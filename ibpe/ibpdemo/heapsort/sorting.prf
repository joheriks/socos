(sorting
 (sorted_TCC1 0
  (sorted_TCC1-1 nil 3477845227 3477847156 ("" (subtype-tcc) nil nil)
   proved-complete
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (vector nonempty-type-eq-decl nil vector nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   86 30 nil nil))
 (sorted_TCC2 0
  (sorted_TCC2-1 nil 3477845227 3477847156 ("" (subtype-tcc) nil nil)
   proved-complete
   ((real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   33 10 nil nil))
 (partitioned_TCC1 0
  (partitioned_TCC1-1 nil 3477845227 3477847156
   ("" (subtype-tcc) nil nil) proved-complete
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (vector nonempty-type-eq-decl nil vector nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   82 50 nil nil))
 (perm_len 0
  (perm_len-1 nil 3477848624 3477849711
   ("" (skolem 1 (a b))
    (("" (flatten)
      (("" (expand perm)
        (("" (skolem-typepred -1)
          (("" (use bijection_n_to_m ("n" "len(b)" "m" "len(a)"))
            (("" (bddsimp)
              (("1" (assert) nil nil) ("2" (inst 1 f!1) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved-complete
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (vector nonempty-type-eq-decl nil vector nil)
    (index type-eq-decl nil vector nil)
    (bijective? const-decl "bool" functions nil)
    (bijection_n_to_m formula-decl nil nat_fun_props nil)
    (perm const-decl "bool" sorting nil))
   1086618 1740 t shostak))
 (perm_ref 0
  (perm_ref-1 nil 3477849719 3477849741
   ("" (skolem 1 a)
    (("" (expand perm)
      (("" (inst 1 id)
        (("" (skolem!) (("" (expand id) (("" (propax) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   proved-complete
   ((perm const-decl "bool" sorting nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (index type-eq-decl nil vector nil)
    (vector nonempty-type-eq-decl nil vector nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   21523 20 t shostak))
 (perm_sym 0
  (perm_sym-1 nil 3477849743 3477850652
   ("" (skolem 1 (a b))
    (("" (flatten)
      (("" (use perm_len)
        (("" (bddsimp)
          (("" (case "len(a)/=0")
            (("1" (expand perm)
              (("1" (skolem -2 f)
                (("1" (inst 1 "inverse(f)")
                  (("1" (skolem 1 i)
                    (("1" (inst -2 "inverse(f)(i)")
                      (("1"
                        (use "comp_inverse_right_surj"
                             ("f" "f" "y" "i"))
                        (("1" (assert) nil nil) ("2" (assert) nil nil))
                        nil)
                       ("2" (inst 1 0) (("2" (assert) nil nil)) nil))
                      nil))
                    nil)
                   ("2" (inst 1 0) (("2" (grind) nil nil)) nil))
                  nil))
                nil))
              nil)
             ("2" (grind) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved-complete
   ((injective? const-decl "bool" functions nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) nil nil
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (perm const-decl "bool" sorting nil)
    (bijective_inverse_is_bijective application-judgement
     "(bijective?[R, D])" function_inverse nil)
    (TRUE const-decl "bool" booleans nil)
    (index type-eq-decl nil vector nil) nil
    (< const-decl "bool" reals nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (bijective? const-decl "bool" functions nil)
    (inverse const-decl "D" function_inverse nil)
    (unique_bijective_inverse application-judgement "{x: D | f(x) = y}"
     function_inverse nil)
    (comp_inverse_right_surj formula-decl nil function_inverse nil)
    (surjective? const-decl "bool" functions nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (/= const-decl "boolean" notequal nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (vector nonempty-type-eq-decl nil vector nil)
    (perm_len formula-decl nil sorting nil))
   909078 2050 t shostak))
 (perm_trs 0
  (perm_trs-1 nil 3477850673 3477850791
   ("" (skolem 1 (a b c))
    (("" (flatten)
      (("" (expand perm)
        (("" (skolem -1 g)
          (("" (skolem -2 h)
            (("" (inst 1 "g o h") (("" (grind) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   proved-complete
   ((composition_injective application-judgement "(injective?[T1, T3])"
     function_props nil)
    (composition_surjective application-judgement
     "(surjective?[T1, T3])" function_props nil)
    (composition_bijective application-judgement "(bijective?[T1, T3])"
     function_props nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (vector nonempty-type-eq-decl nil vector nil)
    (index type-eq-decl nil vector nil)
    (bijective? const-decl "bool" functions nil)
    (O const-decl "T3" function_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (perm const-decl "bool" sorting nil))
   117614 760 t shostak))
 (swap_TCC1 0
  (swap_TCC1-1 nil 3477845227 3477847157
   ("" (expand update) (("" (propax) nil nil)) nil) proved-complete
   ((update const-decl "vector" vector nil)) 46 20 t nil))
 (swap_acc_TCC1 0
  (swap_acc_TCC1-1 nil 3477845227 3477847157
   ("" (expand swap) (("" (expand update) (("" (propax) nil nil)) nil))
    nil)
   proved-complete
   ((update const-decl "vector" vector nil)
    (swap const-decl "vector" sorting nil))
   25 30 t nil))
 (swap_acc 0
  (swap_acc-1 nil 3477850813 3477850913
   ("" (expand swap)
    (("" (expand access)
      (("" (expand update)
        (("" (skosimp*) (("" (lift-if) (("" (grind) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   proved-complete
   ((access const-decl "T" vector nil)
    (update const-decl "vector" vector nil)
    (swap const-decl "vector" sorting nil))
   99600 590 t shostak))
 (swap_perm 0
  (swap_perm-1 nil 3477850922 3477851375
   ("" (skolem 1 (a i j))
    (("" (expand perm)
      ((""
        (inst 1
         "lambda (x:index(a)): if x=i then j elsif x=j then i else x endif")
        (("1" (skosimp*)
          (("1" (expand swap)
            (("1" (expand update)
              (("1" (expand access) (("1" (grind) nil nil)) nil)) nil))
            nil))
          nil)
         ("2" (expand bijective?)
          (("2" (split)
            (("1" (expand injective?)
              (("1" (skosimp*) (("1" (grind) nil nil)) nil)) nil)
             ("2" (expand surjective?)
              (("2" (skosimp*)
                (("2" (case "y!1=i")
                  (("1" (inst 1 j) (("1" (grind) nil nil)) nil)
                   ("2" (case "y!1=j")
                    (("1" (inst 2 "i") (("1" (grind) nil nil)) nil)
                     ("2" (inst 3 y!1)
                      (("1" (assert) nil nil)
                       ("2" (typepred y!1)
                        (("2" (expand swap)
                          (("2" (expand update)
                            (("2" (propax) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("3" (expand swap)
          (("3" (expand update) (("3" (propax) nil nil)) nil)) nil)
         ("4" (expand swap)
          (("4" (expand update) (("4" (propax) nil nil)) nil)) nil)
         ("5" (expand swap)
          (("5" (expand update) (("5" (propax) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   proved-complete
   ((perm const-decl "bool" sorting nil)
    (surjective? const-decl "bool" functions nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    nil (injective? const-decl "bool" functions nil)
    (access const-decl "T" vector nil)
    (update const-decl "vector" vector nil)
    (bijective? const-decl "bool" functions nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (vector nonempty-type-eq-decl nil vector nil) nil
    (index type-eq-decl nil vector nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil) nil nil
    (swap const-decl "vector" sorting nil))
   453561 1260 t shostak))
 (heap_TCC1 0
  (heap_TCC1-1 nil 3477845227 3477847157 ("" (subtype-tcc) nil nil)
   proved-complete
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (l const-decl "nat" sorting nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil))
   196 130 nil nil))
 (heap_TCC2 0
  (heap_TCC2-1 nil 3477845227 3477847157 ("" (subtype-tcc) nil nil)
   proved-complete
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (l const-decl "nat" sorting nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil))
   148 120 nil nil))
 (heap_TCC3 0
  (heap_TCC3-1 nil 3477845227 3477847157 ("" (subtype-tcc) nil nil)
   proved-complete
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (even_plus_even_is_even application-judgement "even_int" integers
     nil)
    (l const-decl "nat" sorting nil) (r const-decl "nat" sorting nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil))
   162 140 nil nil))
 (heap_TCC4 0
  (heap_TCC4-1 nil 3477845227 3477847157 ("" (subtype-tcc) nil nil)
   proved-complete
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (even_plus_even_is_even application-judgement "even_int" integers
     nil)
    (l const-decl "nat" sorting nil) (r const-decl "nat" sorting nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil))
   176 150 nil nil))
 (heap_max_TCC1 0
  (heap_max_TCC1-1 nil 3477845227 3477847157 ("" (subtype-tcc) nil nil)
   proved-complete
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (l const-decl "nat" sorting nil) (r const-decl "nat" sorting nil)
    nil nil
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil))
   106 100 nil nil))
 (heap_max_TCC2 0
  (heap_max_TCC2-1 nil 3477845227 3477847157 ("" (subtype-tcc) nil nil)
   proved-complete
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (l const-decl "nat" sorting nil) (r const-decl "nat" sorting nil)
    nil nil
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil))
   119 80 nil nil))
 (heap_max 0
  (heap_max-1 nil 3477851411 3477853817
   ("" (induct k)
    (("1" (grind) nil nil)
     ("2" (skolem 1 j)
      (("2" (flatten)
        (("2" (skolem 1 a)
          (("2" (flatten)
            (("2" (inst -1 a)
              (("2" (bddsimp)
                (("1" (skolem 1 i)
                  (("1" (flatten)
                    (("1" (case "i=j")
                      (("1" (replace -1)
                        (("1" (expand heap)
                          (("1" (expand heap)
                            (("1" (flatten)
                              (("1"
                                (case "j=0")
                                (("1" (grind) nil nil)
                                 ("2"
                                  (case
                                   "exists (p:below[j]): l(p)=j or r(p)=j")
                                  (("1"
                                    (skolem -1 p)
                                    (("1"
                                      (inst -3 p)
                                      (("1"
                                        (typepred p)
                                        (("1" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (inst 1 "floor((j-1)/2)")
                                    (("1" (grind) nil nil)
                                     ("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (inst -1 i) (("2" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide 2)
                  (("2" (expand heap)
                    (("2" (expand heap)
                      (("2" (flatten)
                        (("2" (split)
                          (("1" (grind) nil nil)
                           ("2" (skolem 1 i)
                            (("2" (split)
                              (("1" (grind) nil nil)
                               ("2" (grind) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (grind) nil nil) ("4" (grind) nil nil))
    nil)
   proved-complete
   ((< const-decl "bool" reals nil) nil
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (vector nonempty-type-eq-decl nil vector nil)
    (below type-eq-decl nil naturalnumbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (pred type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (index type-eq-decl nil vector nil)
    (access const-decl "T" vector nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    nil (r const-decl "nat" sorting nil)
    (l const-decl "nat" sorting nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (integer nonempty-type-from-decl nil integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    nil (NOT const-decl "[bool -> bool]" booleans nil)
    (even_plus_odd_is_odd application-judgement "odd_int" integers nil)
    (even_plus_even_is_even application-judgement "even_int" integers
     nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (below type-eq-decl nil nat_types nil)
    (= const-decl "[T, T -> boolean]" equalities nil))
   49357 1350 t shostak))
 (perm_partitioned_TCC1 0
  (perm_partitioned_TCC1-1 nil 3477845227 3477847158
   ("" (skosimp*)
    (("" (lemma perm_len)
      (("" (inst -1 a!1 b!1) (("" (assert) nil nil)) nil)) nil))
    nil)
   proved-complete
   ((perm_len formula-decl nil sorting nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (vector nonempty-type-eq-decl nil vector nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil))
   31 10 t nil))
 (perm_partitioned 0
  (perm_partitioned-1 nil 3477845583 3477894579
   ("" (skolem 1 (a b k))
    (("" (flatten)
      (("" (case "len(a)=len(b)")
        (("1" (expand partitioned)
          (("1" (skolem 1 (i j))
            (("1" (flatten)
              (("1"
                (lemma
                 "bijective[int,len(a),k].all_right_bij_implies_left_bij")
                (("1" (inst -1 a b)
                  (("1" (split)
                    (("1" (skolem -1 h)
                      (("1" (flatten)
                        (("1" (expand eql)
                          (("1" (inst -5 "h(i)" "j")
                            (("1" (inst -6 "j")
                              (("1"
                                (inst -2 i)
                                (("1"
                                  (split)
                                  (("1" (assert) nil nil)
                                   ("2"
                                    (typepred "h(i)")
                                    (("2"
                                      (expand range)
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil)
                                   ("3" (propax) nil nil)
                                   ("4" (assert) nil nil))
                                  nil)
                                 ("2"
                                  (expand range)
                                  (("2" (propax) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (expand range)
                              (("2" (propax) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide 2)
                      (("2" (expand perm)
                        (("2" (skolem -2 f)
                          (("2" (typepred f)
                            (("2" (inst 1 f)
                              (("1"
                                (split)
                                (("1"
                                  (same-name
                                   "bijective?[index[int](b), index[int](a)]"
                                   "bijective?[range[int, len(a), k](0, len(a)),range[int, len(a), k](0, len(a))]")
                                  (("1"
                                    (replace -1)
                                    (("1" (propax) nil nil))
                                    nil)
                                   ("2"
                                    (expand range)
                                    (("2" (propax) nil nil))
                                    nil)
                                   ("3"
                                    (expand range)
                                    (("3"
                                      (replace -2)
                                      (("3" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (skosimp*)
                                  (("2"
                                    (inst -3 i!1)
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (split)
                                (("1"
                                  (expand range)
                                  (("1"
                                    (replace -2)
                                    (("1" (assert) nil nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (expand range)
                                  (("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("3" (inst 1 id)
                      (("3" (split)
                        (("1" (assert) nil nil) ("2" (grind) nil nil))
                        nil))
                      nil))
                    nil)
                   ("2" (grind) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (use perm_len) (("2" (assert) nil nil)) nil))
        nil))
      nil))
    nil)
   proved
   ((vector nonempty-type-eq-decl nil vector nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (below type-eq-decl nil naturalnumbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (all_right_bij_implies_left_bij formula-decl nil bijective nil)
    (upto nonempty-type-eq-decl nil nat_types nil)
    (setof type-eq-decl nil defined_types nil)
    (k skolem-const-decl "upto(len(a))" sorting nil)
    (range const-decl "setof[nat]" bijective nil)
    (i skolem-const-decl "nat" sorting nil)
    (range type-eq-decl nil bijective nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (eql const-decl "bool" vector nil)
    (perm const-decl "bool" sorting nil)
    (bijective? const-decl "bool" functions nil)
    (injective? const-decl "bool" functions nil)
    (surjective? const-decl "bool" functions nil)
    (f skolem-const-decl "(bijective?[index[int](b), index[int](a)])"
     sorting nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (below type-eq-decl nil nat_types nil)
    (index type-eq-decl nil vector nil)
    (access const-decl "T" vector nil)
    (a skolem-const-decl "vector[int]" sorting nil)
    (b skolem-const-decl "vector[int]" sorting nil)
    (< const-decl "bool" reals nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (partitioned const-decl "bool" sorting nil)
    (perm_len formula-decl nil sorting nil))
   154708 970 t shostak)))

