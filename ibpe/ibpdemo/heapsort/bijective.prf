(bijective
 (j0 0
  (j0-1 nil 3476106913 3476559936 ("" (judgement-tcc) nil nil)
   proved-complete
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (upto nonempty-type-eq-decl nil nat_types nil)
    (setof type-eq-decl nil defined_types nil)
    (range const-decl "setof[nat]" bijective nil)
    (range type-eq-decl nil bijective nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   86 30 nil nil))
 (finite_index 0
  (finite_index-1 nil 3476560783 3476561049
   ("" (skolem 1 s)
    ((""
      (lemma finite_sets[index].finite_subset
       ("A" "{i:index|true}" "s" "s"))
      (("1" (bddsimp)
        (("1" (expand subset?)
          (("1" (skolem!)
            (("1" (flatten)
              (("1" (expand member) (("1" (propax) nil nil)) nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (hide 2)
        (("2" (expand is_finite)
          (("2" (inst 1 n id) (("2" (grind) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   unchecked
   ((index type-eq-decl nil bijective nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (setof type-eq-decl nil defined_types nil)
    (TRUE const-decl "bool" booleans nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (finite_subset formula-decl nil finite_sets nil)
    (subset? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (injective? const-decl "bool" functions nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (below type-eq-decl nil nat_types nil))
   266447 270 t shostak))
 (num_TCC1 0
  (num_TCC1-1 nil 3476098884 3476560118
   ("" (auto-rewrite range)
    (("" (lemma finite_index) (("" (grind) nil nil)) nil)) nil)
   proved-complete
   ((is_finite const-decl "bool" finite_sets nil)
    (injective? const-decl "bool" functions nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (< const-decl "bool" reals nil)
    (index type-eq-decl nil bijective nil)
    (setof type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (below type-eq-decl nil nat_types nil)
    (upto nonempty-type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (<= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (finite_index formula-decl nil bijective nil))
   16472 130 t nil))
 (num_TCC2 0
  (num_TCC2-1 nil 3476101113 3476559936 ("" (subtype-tcc) nil nil)
   proved-complete
   ((real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   5 10 nil nil))
 (num_TCC3 0
  (num_TCC3-1 nil 3476101113 3476559936 ("" (subtype-tcc) nil nil)
   proved-complete
   ((real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   4 0 nil nil))
 (ibij_implies_vbij 0
  (ibij_implies_vbij-1 nil 3476557035 3477336387
   ("" (skolem 1 (a b i j))
    (("" (flatten)
      ((""
        (case "EXISTS (f: [range(i, j) -> range(i, j)]):
        bijective?(f) AND (FORALL (x: range(i, j)): a(x) = b(f(x)))")
        (("1" (hide -2)
          (("1" (skolem -1 f)
            (("1" (skolem 1 v)
              (("1" (inst 1 f)
                (("1" (expand bijective?)
                  (("1" (flatten)
                    (("1" (split)
                      (("1" (expand injective?)
                        (("1" (skolem 1 (x1 x2))
                          (("1" (expand restrict)
                            (("1" (inst -1 x1 x2) nil nil)) nil))
                          nil))
                        nil)
                       ("2" (expand surjective?)
                        (("2" (skolem-typepred 1 y)
                          (("2" (expand restrict)
                            (("2" (inst -4 "y!1")
                              (("2"
                                (skolem!)
                                (("2"
                                  (inst 1 x!1)
                                  (("2"
                                    (inst -5 x!1)
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (flatten)
                  (("2" (assert)
                    (("2" (skolem!)
                      (("2" (inst -2 "x1!1") (("2" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (hide 2)
          (("2" (skolem -1 f)
            (("2" (flatten)
              (("2" (case "i<j")
                (("1" (inst 1 "inverse(f)")
                  (("1" (split)
                    (("1"
                      (use "function_inverse[range(i,j),range(i,j)].bijective_inverse_is_bijective")
                      (("1" (inst 1 i)
                        (("1" (expand range) (("1" (propax) nil nil))
                          nil))
                        nil))
                      nil)
                     ("2" (skolem!)
                      (("2" (inst -3 "inverse(f)(x!1)")
                        (("1" (replace -3)
                          (("1"
                            (use "function_inverse[range(i,j),range(i,j)].comp_inverse_right"
                                 ("y" "x!1" "f" "f"))
                            (("1" (assert) nil nil)
                             ("2" (inst 1 i)
                              (("2"
                                (expand range)
                                (("2" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (inst 1 i)
                          (("2" (expand range) (("2" (propax) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (inst 1 i)
                    (("2" (expand range) (("2" (propax) nil nil)) nil))
                    nil))
                  nil)
                 ("2" (auto-rewrite range) (("2" (grind) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((below type-eq-decl nil nat_types nil)
    (< const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (T formal-nonempty-type-decl nil bijective nil)
    (bijective? const-decl "bool" functions nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (range type-eq-decl nil bijective nil)
    (range const-decl "setof[nat]" bijective nil)
    (setof type-eq-decl nil defined_types nil)
    (upto nonempty-type-eq-decl nil nat_types nil)
    (n formal-const-decl "nat" bijective nil)
    (<= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (restrict const-decl "R" restrict nil)
    (surjective? const-decl "bool" functions nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (injective? const-decl "bool" functions nil)
    (bijective_inverse_is_bijective judgement-tcc nil function_inverse
     nil)
    (comp_inverse_right formula-decl nil function_inverse nil)
    (inverse const-decl "D" function_inverse nil)
    (TRUE const-decl "bool" booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   2456 580 t shostak))
 (vbij_implies_ibij 0
  (vbij_implies_ibij-1 nil 3476779622 3477898857
   ("" (skolem 1 (a b i j))
    (("" (flatten)
      ((""
        (case "EXISTS (f: [range(i, j) -> range(i, j)]):
        bijective?(f) AND (FORALL (x: range(i, j)): a(x) = b(f(x)))")
        (("1" (hide -2)
          (("1" (skosimp*)
            (("1" (case i<j)
              (("1" (inst 1 "inverse(f!1)")
                (("1"
                  (use "function_inverse[range(i,j),range(i,j)].bijective_inverse_is_bijective")
                  (("1" (split)
                    (("1" (propax) nil nil)
                     ("2" (skosimp*)
                      (("2" (inst -4 "inverse(f!1)(x!1)")
                        (("1"
                          (lemma
                           "function_inverse[range(i,j),range(i,j)].comp_inverse_right")
                          (("1" (inst -1 "x!1" "f!1")
                            (("1" (assert) nil nil)) nil)
                           ("2" (inst 1 i)
                            (("2" (expand range)
                              (("2" (propax) nil nil)) nil))
                            nil))
                          nil)
                         ("2" (inst 1 i)
                          (("2" (expand range) (("2" (propax) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (inst 1 i)
                    (("2" (expand range) (("2" (propax) nil nil)) nil))
                    nil))
                  nil)
                 ("2" (inst 1 i)
                  (("2" (expand range) (("2" (propax) nil nil)) nil))
                  nil))
                nil)
               ("2" (grind) nil nil))
              nil))
            nil))
          nil)
         ("2" (hide 2)
          (("2"
            (case "exists (h: [v:T -> {f:[{x:range(i, j) | a(x) = v} ->
                                    {x:range(i, j) | b(x) = v}]|bijective?(f)}]): true")
            (("1" (hide -2)
              (("1" (skolem -1 h)
                (("1" (inst 1 "lambda (x:range(i,j)): h(a(x))(x)")
                  (("1" (split)
                    (("1" (expand bijective?)
                      (("1" (split)
                        (("1" (expand injective?)
                          (("1" (skolem 1 (x1 x2))
                            (("1" (flatten)
                              (("1"
                                (case "a(x1)=a(x2)")
                                (("1"
                                  (typepred "h(a(x1))")
                                  (("1"
                                    (replace -2)
                                    (("1"
                                      (expand bijective?)
                                      (("1"
                                        (expand injective?)
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (inst -1 "x1" "x2")
                                            (("1" (assert) nil nil)
                                             ("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (expand surjective?)
                          (("2" (skolem 1 y)
                            (("2" (typepred y)
                              (("2"
                                (typepred "h(b(y))")
                                (("2"
                                  (expand bijective?)
                                  (("2"
                                    (flatten)
                                    (("2"
                                      (expand surjective?)
                                      (("2"
                                        (inst -2 y)
                                        (("2" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (grind) nil nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide 2)
              (("2"
                (inst 1 "lambda (v:T): choose({g:
                  [{x: range(i, j) | a(x) = v} ->
                     {x: range(i, j) | b(x) = v}] | bijective?(g)})")
                (("2" (grind) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((below type-eq-decl nil nat_types nil)
    (< const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (T formal-nonempty-type-decl nil bijective nil)
    (bijective? const-decl "bool" functions nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (range type-eq-decl nil bijective nil)
    (range const-decl "setof[nat]" bijective nil)
    (setof type-eq-decl nil defined_types nil)
    (upto nonempty-type-eq-decl nil nat_types nil)
    (n formal-const-decl "nat" bijective nil)
    (<= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (injective? const-decl "bool" functions nil)
    (surjective? const-decl "bool" functions nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (i skolem-const-decl "upto[n]" bijective nil)
    (j skolem-const-decl "upto[n]" bijective nil)
    (TRUE const-decl "bool" booleans nil)
    (inverse const-decl "D" function_inverse nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (comp_inverse_right formula-decl nil function_inverse nil)
    (f!1 skolem-const-decl "[range(i, j) -> range(i, j)]" bijective
     nil)
    (bijective_inverse_is_bijective judgement-tcc nil function_inverse
     nil)
    (x1 skolem-const-decl "range(i, j)" bijective nil)
    (x2 skolem-const-decl "range(i, j)" bijective nil)
    (a skolem-const-decl "[below[n] -> T]" bijective nil)
    (b skolem-const-decl "[below[n] -> T]" bijective nil)
    (y skolem-const-decl "range(i, j)" bijective nil)
    (set type-eq-decl nil sets nil)
    (nonempty? const-decl "bool" sets nil)
    (choose const-decl "(p)" sets nil)
    (empty? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil))
   1946 900 t shostak))
 (card_ranges_subset_TCC1 0
  (card_ranges_subset_TCC1-1 nil 3476383176 3476560129
   ("" (auto-rewrite range)
    (("" (lemma finite_index) (("" (propax) nil nil)) nil)) nil)
   proved-complete ((finite_index formula-decl nil bijective nil)) 5061
   0 t nil))
 (card_ranges_subset 0
  (card_ranges_subset-1 nil 3476381125 3477899544
   ("" (skolem 1 (s1 s2))
    (("" (lemma card_bij[index])
      (("" (lemma card_bij_inv[index])
        (("" (split)
          (("1" (flatten)
            (("1" (inst -3 "card(s1)" "s1")
              (("1" (bddsimp)
                (("1" (inst -2 "card(s1)" "s2")
                  (("1" (bddsimp)
                    (("1" (skosimp*)
                      (("1" (inst 1 "f!1 o f!2")
                        (("1"
                          (use "composition_bijective"
                               ("f1" "f!2" "f2" "f!1"))
                          nil nil))
                        nil))
                      nil)
                     ("2" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (flatten)
            (("2" (inst -3 "card(s2)" "s1")
              (("2" (inst -2 "card(s1)" "s2")
                (("2" (assert)
                  (("2" (use bij_exists (S s2))
                    (("2" (hide 1 2)
                      (("2" (skolem -1 g)
                        (("2" (skolem -2 f)
                          (("2" (inst 1 "g o f")
                            (("1"
                              (use "function_props[(s1),(s2),below[card(s2)]].composition_bijective")
                              (("1" (use finite_index) nil nil)) nil)
                             ("2" (use finite_index) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((index type-eq-decl nil bijective nil)
    (n formal-const-decl "nat" bijective nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (card_bij formula-decl nil finite_sets nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Card const-decl "nat" finite_sets nil)
    (card const-decl "{n: nat | n = Card(S)}" finite_sets nil)
    (setof type-eq-decl nil defined_types nil)
    (composition_bijective judgement-tcc nil function_props nil)
    (bijective? const-decl "bool" functions nil)
    (O const-decl "T3" function_props nil)
    (below type-eq-decl nil nat_types nil)
    (g skolem-const-decl "[(s2) -> below(card(s2))]" bijective nil)
    (s1 skolem-const-decl "setof[index]" bijective nil)
    (f skolem-const-decl "[(s1) -> (s2)]" bijective nil)
    (finite_index formula-decl nil bijective nil)
    (below type-eq-decl nil naturalnumbers nil)
    (s2 skolem-const-decl "setof[index]" bijective nil)
    (bij_exists formula-decl nil finite_sets nil)
    (card_bij_inv formula-decl nil finite_sets nil))
   526378 170 t shostak))
 (subrange_num_eq_implies_bij 0
  (subrange_num_eq_implies_bij-1 nil 3476099419 3477566381
   ("" (skolem 1 (a b i j))
    (("" (split)
      (("1" (flatten)
        (("1" (auto-rewrite finite_index)
          (("1" (expand num)
            (("1" (decompose-equality)
              (("1"
                (use "vbij_implies_ibij"
                     ("a" "a" "b" "b" "i" "i" "j" "j"))
                (("1" (bddsimp)
                  (("1" (hide 2)
                    (("1" (skolem 1 v)
                      (("1" (inst -1 v)
                        (("1"
                          (use card_ranges_subset
                               ("s1"
                                "{i_1: index | i <= i_1 AND i_1 < j AND a(i_1) = v}"
                                "s2"
                                "{i_1: index | i <= i_1 AND i_1 < j AND b(i_1) = v}"))
                          (("1" (bddsimp)
                            (("1" (hide -1)
                              (("1"
                                (skolem -1 f)
                                (("1"
                                  (inst 1 f)
                                  (("1"
                                    (expand bijective?)
                                    (("1"
                                      (split)
                                      (("1"
                                        (expand injective?)
                                        (("1"
                                          (skosimp*)
                                          (("1"
                                            (inst -2 "x1!1" "x2!1")
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (expand surjective?)
                                        (("2"
                                          (flatten)
                                          (("2"
                                            (skolem-typepred 1)
                                            (("2"
                                              (inst -4 y!1)
                                              (("1"
                                                (skolem-typepred)
                                                (("1"
                                                  (inst 1 x!1)
                                                  (("1"
                                                    (expand range)
                                                    (("1"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (expand range)
                                                (("2"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (split)
                                    (("1" (grind) nil nil)
                                     ("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (flatten)
        (("2" (decompose-equality)
          (("2" (expand num)
            (("2" (lemma "card_ranges_subset")
              (("2" (auto-rewrite finite_index)
                (("2"
                  (inst -1
                   "{i_1: index | i <= i_1 AND i_1 < j AND a(i_1) = x!1}"
                   "{i_1: index | i <= i_1 AND i_1 < j AND b(i_1) = x!1}")
                  (("2" (bddsimp)
                    (("2" (hide 1)
                      (("2" (lemma ibij_implies_vbij)
                        (("2" (inst -1 a b i j)
                          (("2" (bddsimp)
                            (("2" (inst -2 x!1)
                              (("2"
                                (hide -1)
                                (("2"
                                  (skolem-typepred -1)
                                  (("2"
                                    (inst + g!1)
                                    (("1"
                                      (expand bijective?)
                                      (("1"
                                        (split)
                                        (("1"
                                          (expand injective?)
                                          (("1"
                                            (skosimp*)
                                            (("1"
                                              (inst -2 "x1!1" "x2!1")
                                              (("1" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (expand surjective?)
                                          (("2"
                                            (skosimp*)
                                            (("2"
                                              (inst -2 "y!1")
                                              (("1"
                                                (skosimp*)
                                                (("1"
                                                  (inst 1 x!2)
                                                  (("1"
                                                    (typepred "x!2")
                                                    (("1"
                                                      (expand range)
                                                      (("1"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (expand range)
                                                (("2"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (split)
                                      (("1"
                                        (skolem 1 x2)
                                        (("1"
                                          (hide -1)
                                          (("1"
                                            (expand range)
                                            (("1" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (skolem 1 x1)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (split)
                                            (("1"
                                              (typepred "g!1(x1)")
                                              (("1"
                                                (expand range)
                                                (("1"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (typepred "g!1(x1)")
                                              (("2"
                                                (expand range)
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil)
                                             ("3"
                                              (typepred "g!1(x1)")
                                              (("3" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((ibij_implies_vbij formula-decl nil bijective nil) nil nil nil nil
    (num const-decl "nat" bijective nil)
    (vbij_implies_ibij formula-decl nil bijective nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    nil nil (bijective? const-decl "bool" functions nil)
    (surjective? const-decl "bool" functions nil)
    (NOT const-decl "[bool -> bool]" booleans nil) nil nil
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (injective? const-decl "bool" functions nil)
    (range type-eq-decl nil bijective nil) nil nil
    (range const-decl "setof[nat]" bijective nil) nil nil nil nil
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (card_ranges_subset formula-decl nil bijective nil)
    (setof type-eq-decl nil defined_types nil)
    (below type-eq-decl nil nat_types nil)
    (upto nonempty-type-eq-decl nil nat_types nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (card const-decl "{n: nat | n = Card(S)}" finite_sets nil)
    (Card const-decl "nat" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (index type-eq-decl nil bijective nil)
    (n formal-const-decl "nat" bijective nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (T formal-nonempty-type-decl nil bijective nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (finite_index formula-decl nil bijective nil))
   4256 1390 t shostak))
 (num_numright_eq_implies_numleft_eq 0
  (num_numright_eq_implies_numleft_eq-1 nil 3476101124 3476557198
   ("" (skolem 1 (a b j))
    (("" (flatten)
      (("" (expand num)
        (("" (extensionality "[T->nat]")
          (("" (auto-rewrite finite_index)
            ((""
              (inst -1
               "(LAMBDA (x: T): card({i: index | i < j AND a(i) = x}))"
               "(LAMBDA (x: T): card({i: index | i < j AND b(i) = x}))")
              (("" (bddsimp)
                (("" (skolem 1 x)
                  (("" (hide 2)
                    (("" (expand num)
                      (("" (decompose-equality)
                        (("" (decompose-equality)
                          (("" (inst -1 x)
                            (("" (inst -2 x)
                              ((""
                                (lemma card_diff_subset[index])
                                ((""
                                  (case
                                   "difference({i: index | a(i) = x},{i: index | j <= i AND a(i) = x}) = {i: index | i < j AND a(i) = x}")
                                  (("1"
                                    (case
                                     "difference({i: index | b(i) = x},{i: index | j <= i AND b(i) = x}) = {i: index | i < j AND b(i) = x}")
                                    (("1"
                                      (inst-cp
                                       -3
                                       "{i: index | j <= i AND b(i) = x}"
                                       "{i: index | b(i) = x}")
                                      (("1"
                                        (inst-cp
                                         -3
                                         "{i: index | j <= i AND a(i) = x}"
                                         "{i: index | a(i) = x}")
                                        (("1" (grind) nil nil))
                                        nil))
                                      nil)
                                     ("2" (grind-with-ext) nil nil))
                                    nil)
                                   ("2" (grind-with-ext) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((num const-decl "nat" bijective nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (card_diff_subset formula-decl nil finite_sets nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (member const-decl "bool" sets nil)
    (subset? const-decl "bool" sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (injective? const-decl "bool" functions nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (difference const-decl "set" sets nil)
    (below type-eq-decl nil nat_types nil)
    (upto nonempty-type-eq-decl nil nat_types nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (card const-decl "{n: nat | n = Card(S)}" finite_sets nil)
    (Card const-decl "nat" finite_sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (index type-eq-decl nil bijective nil)
    (< const-decl "bool" reals nil)
    (finite_index formula-decl nil bijective nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil))
   5153 3420 t shostak))
 (all_right_bij_implies_left_bij_TCC1 0
  (all_right_bij_implies_left_bij_TCC1-1 nil 3475863001 3476560325
   ("" (auto-rewrite range) (("" (grind) nil nil)) nil) proved-complete
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (range type-eq-decl nil bijective nil)
    (range const-decl "setof[nat]" bijective nil)
    (setof type-eq-decl nil defined_types nil)
    (upto nonempty-type-eq-decl nil nat_types nil)
    (<= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (injective? const-decl "bool" functions nil)
    (surjective? const-decl "bool" functions nil)
    (bijective? const-decl "bool" functions nil))
   11614 40 t nil))
 (all_right_bij_implies_left_bij_TCC2 0
  (all_right_bij_implies_left_bij_TCC2-1 nil 3475863001 3476560370
   ("" (auto-rewrite range)
    (("" (skosimp*) (("" (all-typepreds) (("" (grind) nil nil)) nil))
      nil))
    nil)
   proved-complete
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (upto nonempty-type-eq-decl nil nat_types nil)
    (setof type-eq-decl nil defined_types nil)
    (range const-decl "setof[nat]" bijective nil)
    (range type-eq-decl nil bijective nil)
    (< const-decl "bool" reals nil)
    (strict_total_order? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (even? const-decl "bool" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (irreflexive? const-decl "bool" relations nil)
    (transitive? const-decl "bool" relations nil)
    (strict_order? const-decl "bool" orders nil)
    (trichotomous? const-decl "bool" orders nil)
    (injective? const-decl "bool" functions nil)
    (surjective? const-decl "bool" functions nil)
    (bijective? const-decl "bool" functions nil))
   41875 330 t nil))
 (all_right_bij_implies_left_bij_TCC3 0
  (all_right_bij_implies_left_bij_TCC3-1 nil 3476106913 3476560382
   ("" (auto-rewrite range) (("" (grind) nil nil)) nil) proved-complete
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (range type-eq-decl nil bijective nil)
    (range const-decl "setof[nat]" bijective nil)
    (setof type-eq-decl nil defined_types nil)
    (upto nonempty-type-eq-decl nil nat_types nil)
    (<= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (injective? const-decl "bool" functions nil)
    (surjective? const-decl "bool" functions nil)
    (bijective? const-decl "bool" functions nil))
   4099 110 t nil))
 (all_right_bij_implies_left_bij_TCC4 0
  (all_right_bij_implies_left_bij_TCC4-1 nil 3476106913 3476560584
   ("" (skolem!)
    (("" (flatten)
      (("" (skolem!)
        (("" (flatten)
          (("" (skolem!)
            (("" (flatten)
              (("" (all-typepreds)
                (("" (skolem-typepred)
                  (("" (expand range)
                    (("" (typepred "g!1(i1!1)")
                      (("" (expand range) (("" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved-complete
   ((setof type-eq-decl nil defined_types nil)
    (range const-decl "setof[nat]" bijective nil)
    (range type-eq-decl nil bijective nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (even? const-decl "bool" integers nil)
    (upto nonempty-type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (<= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   194152 7830 t nil))
 (all_right_bij_implies_left_bij_TCC5 0
  (all_right_bij_implies_left_bij_TCC5-1 nil 3476106913 3476560642
   ("" (skosimp*)
    (("" (auto-rewrite range)
      (("" (typepred "i1!1")
        (("" (expand range) (("" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   proved-complete
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (upto nonempty-type-eq-decl nil nat_types nil)
    (setof type-eq-decl nil defined_types nil)
    (range const-decl "setof[nat]" bijective nil)
    (range type-eq-decl nil bijective nil))
   44692 5230 t nil))
 (all_right_bij_implies_left_bij_TCC6 0
  (all_right_bij_implies_left_bij_TCC6-1 nil 3476106913 3476560702
   ("" (skosimp*)
    (("" (typepred "h!1(i1!1)")
      (("" (expand range)
        (("" (assert) (("" (typepred k) (("" (assert) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   proved-complete
   ((range type-eq-decl nil bijective nil)
    (range const-decl "setof[nat]" bijective nil)
    (setof type-eq-decl nil defined_types nil)
    (upto nonempty-type-eq-decl nil nat_types nil)
    (<= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   55142 5670 t nil))
 (all_right_bij_implies_left_bij 0
  (all_right_bij_implies_left_bij-1 nil 3475863033 3476557188
   ("" (skolem 1 (a b))
    (("" (flatten)
      (("" (lemma subrange_num_eq_implies_bij)
        (("" (inst-cp -1 "a" "b" "0" "n")
          (("1" (inst-cp -1 "a" "b" "k" "n")
            (("1" (bddsimp)
              (("1" (hide -3 -5)
                (("1" (lemma num_numright_eq_implies_numleft_eq)
                  (("1" (inst -1 "a" "b" "k")
                    (("1" (bddsimp)
                      (("1" (inst -3 "a" "b" "0" "k")
                        (("1" (grind) nil nil)) nil)
                       ("2" (grind) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (assert) nil nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((subrange_num_eq_implies_bij formula-decl nil bijective nil)
    (num_numright_eq_implies_numleft_eq formula-decl nil bijective nil)
    (upto nonempty-type-eq-decl nil nat_types nil)
    (below type-eq-decl nil nat_types nil)
    (< const-decl "bool" reals nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   967 180 t shostak)))

