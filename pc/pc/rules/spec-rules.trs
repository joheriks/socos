##
# Generates spec parts of a theory
##

partition
::
        module(mid:ID,
               using*,
               importing*,
               extern*,
               def:definition*,
               recdefinition*,
               mvars:KEY_VAR*,
               situation_invariant*,
               procedure(pid:ID,
                         pvars:KEY_VAR*,
                         pinv:situation_invariant+(source(ID = 'PRE|POST|modinv',
                                                     &rest),
                                              &rest),
                         &rest),
               rest:'procedure|pmodule'*)
        ->
        procedure :=
        'pmodule'('ID' = $join('_', $$mid, $$pid, 'Spec'),
                  'importing'('theory_name'('ID' = $join('_', $$mid, 'ModuleSpec'))),
                  mvars,
                  pvars,
                  pinv)
::

partition_2
::
        module(mid:ID,
               using*,
               importing*,
               extern*,
               def:definition*,
               recdefinition*,
               mvars:KEY_VAR*,
               situation_invariant*,
               pmodule*)
        ->
        module := 'module'(mid,
                           'mmodule'('ID' = $join('_', $$mid, 'ModuleSpec'),
                                     using,
                                     importing,
                                     extern,
                                     def,
                                     recdefinition,
                                     mvars,
                                     situation_invariant),
                          pmodule)
::

partition_3
::
        module(mid:ID,
               mmodule,
               pmodule*(pid:ID, &rest))
        ->
        module :=

        'TOP'('mmodule'('ID' = $join('_', $$mid, 'Spec'),
                        'importing'('theory_name'('ID' = $join('_', $$mid, 'ModuleSpec'))),
                        @foreach(pid,
                                 'importing'('theory_name'('ID' = $$pid)))),
              mmodule,
              pmodule)
::
