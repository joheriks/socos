
Put parser tests into a regular textfile with the extension ipet or ibpt in the
unittest directory. Files with the extension ipet are used for testing the PVS
expression parser and files with the extension ibpt for testing the IBP parser.

The syntax for a parser test file is:

[{ignore:}|{file:}]name_of_test
expression|path
expected_tree
linebreak
.
.
.

If the name of the test begins with ignore:, the test is not executed.
Comments can be included in the file by prefixing a line with #, in
which case the line is ignored.

If the name of the test begins with file:, the expression is read from
the file path given on line 2.

The tree is expected to be given in the syntax generated by the
function tree_to_str in PVS_Parser_Nodes.py..

Note: it is a bit annoying to type the trees by hand with the emacs
default indent function (tab key). Put the following lines into your
.emacs file to make life a bit easier. Do M-x stupid-tabs to always
indent with a fixed amount of space. M-x smart-tabs gives you the
default behaviour again. This only works in emacs, not xemacs.

(defvar previous-tab-function nil)
(defvar indent-with-num-space 4)

(defun insert-indent-space ()
  (interactive)
  (insert (make-string indent-with-num-space 32)))

(defun stupid-tabs ()
  "Make TAB key always indent with `indent-with-num-space' spaces in text-mode"
  (interactive)
  (let ((tabfunc (cdr (assoc 9 text-mode-map))))
    (define-key text-mode-map (kbd "TAB") #'insert-indent-space)
    (unless (or (eq tabfunc previous-tab-function)
                (eq tabfunc 'insert-indent-space))
      (setq previous-tab-function tabfunc))))

(defun smart-tabs ()
  "Recall previous bind of TAB key (after call to `stupid-tabs') in text-mode"
  (interactive)
  (when previous-tab-function
    (define-key text-mode-map (kbd "TAB") previous-tab-function)
      (setq previous-tab-function nil)))

