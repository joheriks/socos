
Loading prelude library context from /home/aton4/mparsa/pc/lib/socos/...
/home/aton4/mparsa/pc/lib/socos/.pvscontext is empty
  no PVS files loaded
;;; Compiling file pvs-lib.lisp
;;; Writing fasl file pvs-lib.l64fasl
;;; Fasl write complete

Loading pvs-lib.l64fasl...
;   Fast loading /home/aton4/mparsa/pc/lib/socos/pvs-lib.l64fasl

Loading file /home/aton4/mparsa/pc/lib/socos/pvs-strategies
;     Loading /home/aton4/mparsa/pc/lib/socos/pvs-strategies

Added rule YICES1.

pvs-strategies loaded
;     Loading /home/aton4/mparsa/pc/lib/socos/translate-to-yices.lisp
Warning: eta-expanded-yices-interpretation is defined more than once as `operator' in file /home/aton4/mparsa/pc/lib/socos/translate-to-yices.lisp.

Changed rule yices
pvs-lib.l64fasl loaded
Parsing min
min parsed in 0.12 seconds
Typechecking min
Restored theory from /home/aton4/mparsa/pc/lib/ds/pvsbin/parray.bin in 0.06s (load part took 0.02s)
ctx__min typechecked in 0.07s: No TCCs generated
spec__min__min typechecked in 0.06s: 2 TCCs, 0 proved, 0 subsumed, 2 unproved
impl__min__min typechecked in 0.07s: 10 TCCs, 0 proved, 6 subsumed, 4 unproved
:TYPECHECK_OK

Installing proof scripts [Theory: ctx__min]
"*_TCC*" does not match any formula
Installing proof scripts [Theory: impl__min__min]
Wrote proof file min.prf
Proof script cc__ini__ was installed
Renamed min.prf to min.prf~
Wrote proof file min.prf
Proof script cc__loop was installed
Renamed min.prf to min.prf~
Wrote proof file min.prf
Proof script sit__loop_TCC1 was installed
Renamed min.prf to min.prf~
Wrote proof file min.prf
Proof script sit__loop_TCC2 was installed
Renamed min.prf to min.prf~
Wrote proof file min.prf
Proof script cc__loop_TCC1 was installed
Renamed min.prf to min.prf~
Wrote proof file min.prf
Proof script cc__loop_TCC2 was installed
Installing proof scripts [Theory: spec__min__min]
Renamed min.prf to min.prf~
Wrote proof file min.prf
Proof script post___TCC1 was installed
Renamed min.prf to min.prf~
Wrote proof file min.prf
Proof script post___TCC2 was installed
Proving theory ctx__min
Proving theory impl__min__min
Rerunning proof of impl__min__min.sit__loop_TCC1
Installing rewrite rule sets.singleton_rew (all instances)
sit__loop_TCC1 :  

  |-------
{1}   FORALL (m: int, k: int):
        (id(0 <= m AND m < k)) AND (id(0 < k AND k <= n)) IMPLIES
         (FORALL (i: int): 0 <= i AND i < k IMPLIES m >= 0 AND m < n)

Rerunning step: (then (skosimp-2) (uid "min:context/min:procedure;") (then (expand-nested-defs - (("spec__min__min.pre__" 1 (("sit__ini__" 1))) ("sit__loop" 3) ("spec__min__min.post__" 3 (("sit__fin__post__" 3))))) (flatten-disjunct -) (check-report (skip))))
Skolemizing and flattening,
this simplifies to: 
sit__loop_TCC1 :  

{-1}  (id(0 <= m AND m < k))
{-2}  (id(0 < k AND k <= n))
{-3}  0 <= i
{-4}  i < k
  |-------
{1}   m >= 0 AND m < n

Adding comment: min:context/min:procedure;
this simplifies to: 
sit__loop_TCC1 : 
;;; min:context/min:procedure;

[-1]  (id(0 <= m AND m < k))
[-2]  (id(0 < k AND k <= n))
[-3]  0 <= i
[-4]  i < k
  |-------
[1]   m >= 0 AND m < n

-*-SOCOS-*-
(uid "min:context/min:procedure;")
-*-*-*-*-*-


nil

No change on: (socos-skip-msg (uid "min:context/min:procedure;"))
sit__loop_TCC1 : 
;;; min:context/min:procedure;

[-1]  (id(0 <= m AND m < k))
[-2]  (id(0 < k AND k <= n))
[-3]  0 <= i
[-4]  i < k
  |-------
[1]   m >= 0 AND m < n

Postponing sit__loop_TCC1.

sit__loop_TCC1 : 
;;; min:context/min:procedure;

[-1]  (id(0 <= m AND m < k))
[-2]  (id(0 < k AND k <= n))
[-3]  0 <= i
[-4]  i < k
  |-------
[1]   m >= 0 AND m < n

No change on: (expand-nested-defs - (("spec__min__min.pre__" 1 (("sit__ini__" 1))) ("sit__loop" 3) ("spec__min__min.post__" 3 (("sit__fin__post__" 3)))))
sit__loop_TCC1 : 
;;; min:context/min:procedure;

[-1]  (id(0 <= m AND m < k))
[-2]  (id(0 < k AND k <= n))
[-3]  0 <= i
[-4]  i < k
  |-------
[1]   m >= 0 AND m < n

No change on: (flatten-disjunct -)
sit__loop_TCC1 : 
;;; min:context/min:procedure;

[-1]  (id(0 <= m AND m < k))
[-2]  (id(0 < k AND k <= n))
[-3]  0 <= i
[-4]  i < k
  |-------
[1]   m >= 0 AND m < n

-*-SOCOS-*-
(check-condition "min:context/min:procedure;")
-*-*-*-*-*-


nil

No change on: (socos-skip-msg (check-condition "min:context/min:procedure;"))
sit__loop_TCC1 : 
;;; min:context/min:procedure;

[-1]  (id(0 <= m AND m < k))
[-2]  (id(0 < k AND k <= n))
[-3]  0 <= i
[-4]  i < k
  |-------
[1]   m >= 0 AND m < n

Expanding the definition of id,
this simplifies to: 
sit__loop_TCC1 : 
;;; min:context/min:procedure;

{-1}  0 <= m AND m < k
{-2}  0 < k AND k <= n
[-3]  0 <= i
[-4]  i < k
  |-------
[1]   m >= 0 AND m < n

nil

sit__loop_TCC1 : 
;;; min:context/min:procedure;

{-1}  0 <= m AND m < k
{-2}  0 < k AND k <= n
[-3]  0 <= i
[-4]  i < k
  |-------
[1]   m >= 0 AND m < n

No suitable redexes found.
No change on: (beta)
sit__loop_TCC1 : 
;;; min:context/min:procedure;

{-1}  0 <= m AND m < k
{-2}  0 < k AND k <= n
[-3]  0 <= i
[-4]  i < k
  |-------
[1]   m >= 0 AND m < n

No change on: (skip)
sit__loop_TCC1 : 
;;; min:context/min:procedure;

[-1]  0 <= m AND m < k
[-2]  0 < k AND k <= n
[-3]  0 <= i
[-4]  i < k
  |-------
[1]   m >= 0 AND m < n


Attempted proof of sit__loop_TCC1 failed.

Attempted proof of sit__loop_TCC1 failed.
sit__loop_TCC1 : 
;;; min:context/min:procedure;

{-1}  0 <= m AND m < k
{-2}  0 < k AND k <= n
[-3]  0 <= i
[-4]  i < k
  |-------
[1]   m >= 0 AND m < n

-*-SOCOS-*-
(left-condition (sequent ("0 <= m AND m < k" "0 < k AND k <= n" "0 <= i" "i < k") ("m >= 0 AND m < n")) impl__min__min 62 4)
-*-*-*-*-*-


nil

No change on: (socos-skip-msg (left-condition (sequent ("0 <= m AND m < k" "0 < k AND k <= n" "0 <= i" "i < k") ("m >= 0 AND m < n")) impl__min__min 62 4))
sit__loop_TCC1 : 
;;; min:context/min:procedure;

{-1}  0 <= m AND m < k
{-2}  0 < k AND k <= n
[-3]  0 <= i
[-4]  i < k
  |-------
[1]   m >= 0 AND m < n

nil

sit__loop_TCC1 : 
;;; min:context/min:procedure;

{-1}  0 <= m AND m < k
{-2}  0 < k AND k <= n
[-3]  0 <= i
[-4]  i < k
  |-------
[1]   m >= 0 AND m < n

Postponing sit__loop_TCC1.

sit__loop_TCC1 : 
;;; min:context/min:procedure;

{-1}  0 <= m AND m < k
{-2}  0 < k AND k <= n
[-3]  0 <= i
[-4]  i < k
  |-------
[1]   m >= 0 AND m < n

***Warning: Fewer subproofs (0) than subgoals (1)
No change on: (skip)
sit__loop_TCC1 : 
;;; min:context/min:procedure;

{-1}  0 <= m AND m < k
{-2}  0 < k AND k <= n
[-3]  0 <= i
[-4]  i < k
  |-------
[1]   m >= 0 AND m < n

Postponing sit__loop_TCC1.

sit__loop_TCC1 : 
;;; min:context/min:procedure;

{-1}  0 <= m AND m < k
{-2}  0 < k AND k <= n
[-3]  0 <= i
[-4]  i < k
  |-------
[1]   m >= 0 AND m < n

Postponing sit__loop_TCC1.

sit__loop_TCC1 : 
;;; min:context/min:procedure;

{-1}  0 <= m AND m < k
{-2}  0 < k AND k <= n
[-3]  0 <= i
[-4]  i < k
  |-------
[1]   m >= 0 AND m < n


Run time  = 0.05 secs.
Real time = 0.13 secs.

impl__min__min.sit__loop_TCC1 unproved in 0.05 real, 0.05 cpu seconds
Rerunning proof of impl__min__min.sit__loop_TCC2
Installing rewrite rule sets.singleton_rew (all instances)
sit__loop_TCC2 :  

  |-------
{1}   FORALL (m: int, k: int):
        (id(0 <= m AND m < k)) AND (id(0 < k AND k <= n)) IMPLIES
         (FORALL (i: int): 0 <= i AND i < k IMPLIES i >= 0 AND i < n)

Rerunning step: (then (skosimp-2) (uid "min:context/min:procedure;") (then (expand-nested-defs - (("spec__min__min.pre__" 1 (("sit__ini__" 1))) ("sit__loop" 3) ("spec__min__min.post__" 3 (("sit__fin__post__" 3))))) (flatten-disjunct -) (check-report (skip))))
Skolemizing and flattening,
this simplifies to: 
sit__loop_TCC2 :  

{-1}  (id(0 <= m AND m < k))
{-2}  (id(0 < k AND k <= n))
{-3}  0 <= i
{-4}  i < k
  |-------
{1}   i >= 0 AND i < n

Adding comment: min:context/min:procedure;
this simplifies to: 
sit__loop_TCC2 : 
;;; min:context/min:procedure;

[-1]  (id(0 <= m AND m < k))
[-2]  (id(0 < k AND k <= n))
[-3]  0 <= i
[-4]  i < k
  |-------
[1]   i >= 0 AND i < n

-*-SOCOS-*-
(uid "min:context/min:procedure;")
-*-*-*-*-*-


nil

No change on: (socos-skip-msg (uid "min:context/min:procedure;"))
sit__loop_TCC2 : 
;;; min:context/min:procedure;

[-1]  (id(0 <= m AND m < k))
[-2]  (id(0 < k AND k <= n))
[-3]  0 <= i
[-4]  i < k
  |-------
[1]   i >= 0 AND i < n

Postponing sit__loop_TCC2.

sit__loop_TCC2 : 
;;; min:context/min:procedure;

[-1]  (id(0 <= m AND m < k))
[-2]  (id(0 < k AND k <= n))
[-3]  0 <= i
[-4]  i < k
  |-------
[1]   i >= 0 AND i < n

No change on: (expand-nested-defs - (("spec__min__min.pre__" 1 (("sit__ini__" 1))) ("sit__loop" 3) ("spec__min__min.post__" 3 (("sit__fin__post__" 3)))))
sit__loop_TCC2 : 
;;; min:context/min:procedure;

[-1]  (id(0 <= m AND m < k))
[-2]  (id(0 < k AND k <= n))
[-3]  0 <= i
[-4]  i < k
  |-------
[1]   i >= 0 AND i < n

No change on: (flatten-disjunct -)
sit__loop_TCC2 : 
;;; min:context/min:procedure;

[-1]  (id(0 <= m AND m < k))
[-2]  (id(0 < k AND k <= n))
[-3]  0 <= i
[-4]  i < k
  |-------
[1]   i >= 0 AND i < n

-*-SOCOS-*-
(check-condition "min:context/min:procedure;")
-*-*-*-*-*-


nil

No change on: (socos-skip-msg (check-condition "min:context/min:procedure;"))
sit__loop_TCC2 : 
;;; min:context/min:procedure;

[-1]  (id(0 <= m AND m < k))
[-2]  (id(0 < k AND k <= n))
[-3]  0 <= i
[-4]  i < k
  |-------
[1]   i >= 0 AND i < n

Expanding the definition of id,
this simplifies to: 
sit__loop_TCC2 : 
;;; min:context/min:procedure;

{-1}  0 <= m AND m < k
{-2}  0 < k AND k <= n
[-3]  0 <= i
[-4]  i < k
  |-------
[1]   i >= 0 AND i < n

nil

sit__loop_TCC2 : 
;;; min:context/min:procedure;

{-1}  0 <= m AND m < k
{-2}  0 < k AND k <= n
[-3]  0 <= i
[-4]  i < k
  |-------
[1]   i >= 0 AND i < n

No suitable redexes found.
No change on: (beta)
sit__loop_TCC2 : 
;;; min:context/min:procedure;

{-1}  0 <= m AND m < k
{-2}  0 < k AND k <= n
[-3]  0 <= i
[-4]  i < k
  |-------
[1]   i >= 0 AND i < n

No change on: (skip)
sit__loop_TCC2 : 
;;; min:context/min:procedure;

[-1]  0 <= m AND m < k
[-2]  0 < k AND k <= n
[-3]  0 <= i
[-4]  i < k
  |-------
[1]   i >= 0 AND i < n


Attempted proof of sit__loop_TCC2 failed.

Attempted proof of sit__loop_TCC2 failed.
sit__loop_TCC2 : 
;;; min:context/min:procedure;

{-1}  0 <= m AND m < k
{-2}  0 < k AND k <= n
[-3]  0 <= i
[-4]  i < k
  |-------
[1]   i >= 0 AND i < n

-*-SOCOS-*-
(left-condition (sequent ("0 <= m AND m < k" "0 < k AND k <= n" "0 <= i" "i < k") ("i >= 0 AND i < n")) impl__min__min 62 4)
-*-*-*-*-*-


nil

No change on: (socos-skip-msg (left-condition (sequent ("0 <= m AND m < k" "0 < k AND k <= n" "0 <= i" "i < k") ("i >= 0 AND i < n")) impl__min__min 62 4))
sit__loop_TCC2 : 
;;; min:context/min:procedure;

{-1}  0 <= m AND m < k
{-2}  0 < k AND k <= n
[-3]  0 <= i
[-4]  i < k
  |-------
[1]   i >= 0 AND i < n

nil

sit__loop_TCC2 : 
;;; min:context/min:procedure;

{-1}  0 <= m AND m < k
{-2}  0 < k AND k <= n
[-3]  0 <= i
[-4]  i < k
  |-------
[1]   i >= 0 AND i < n

Postponing sit__loop_TCC2.

sit__loop_TCC2 : 
;;; min:context/min:procedure;

{-1}  0 <= m AND m < k
{-2}  0 < k AND k <= n
[-3]  0 <= i
[-4]  i < k
  |-------
[1]   i >= 0 AND i < n

***Warning: Fewer subproofs (0) than subgoals (1)
No change on: (skip)
sit__loop_TCC2 : 
;;; min:context/min:procedure;

{-1}  0 <= m AND m < k
{-2}  0 < k AND k <= n
[-3]  0 <= i
[-4]  i < k
  |-------
[1]   i >= 0 AND i < n

Postponing sit__loop_TCC2.

sit__loop_TCC2 : 
;;; min:context/min:procedure;

{-1}  0 <= m AND m < k
{-2}  0 < k AND k <= n
[-3]  0 <= i
[-4]  i < k
  |-------
[1]   i >= 0 AND i < n

Postponing sit__loop_TCC2.

sit__loop_TCC2 : 
;;; min:context/min:procedure;

{-1}  0 <= m AND m < k
{-2}  0 < k AND k <= n
[-3]  0 <= i
[-4]  i < k
  |-------
[1]   i >= 0 AND i < n


Run time  = 0.02 secs.
Real time = 0.07 secs.

impl__min__min.sit__loop_TCC2 unproved in 0.02 real, 0.02 cpu seconds
Rerunning proof of impl__min__min.cc__ini__
Installing rewrite rule sets.singleton_rew (all instances)
cc__ini__ :  

  |-------
{1}   sit__ini__(m_0, k_0) =>
       (k_1 = (((LAMBDA (m, k): 1))(m_0, k_0)):: int =>
         m_1 = (((LAMBDA (m, k): 0))(m_0, k_1)):: int =>
          sit__loop(m_1, k_1))

Rerunning step: (uid "min:context/min:procedure/ini__:situation/trs1:transition;")
Adding comment: min:context/min:procedure/ini__:situation/trs1:transition;
this simplifies to: 
cc__ini__ : 
;;; min:context/min:procedure/ini__:situation/trs1:transition;

  |-------
[1]   sit__ini__(m_0, k_0) =>
       (k_1 = (((LAMBDA (m, k): 1))(m_0, k_0)):: int =>
         m_1 = (((LAMBDA (m, k): 0))(m_0, k_1)):: int =>
          sit__loop(m_1, k_1))

-*-SOCOS-*-
(uid "min:context/min:procedure/ini__:situation/trs1:transition;")
-*-*-*-*-*-


nil

No change on: (socos-skip-msg (uid "min:context/min:procedure/ini__:situation/trs1:transition;"))
cc__ini__ : 
;;; min:context/min:procedure/ini__:situation/trs1:transition;

  |-------
[1]   sit__ini__(m_0, k_0) =>
       (k_1 = (((LAMBDA (m, k): 1))(m_0, k_0)):: int =>
         m_1 = (((LAMBDA (m, k): 0))(m_0, k_1)):: int =>
          sit__loop(m_1, k_1))

Postponing cc__ini__.

cc__ini__ : 
;;; min:context/min:procedure/ini__:situation/trs1:transition;

  |-------
[1]   sit__ini__(m_0, k_0) =>
       (k_1 = (((LAMBDA (m, k): 1))(m_0, k_0)):: int =>
         m_1 = (((LAMBDA (m, k): 0))(m_0, k_1)):: int =>
          sit__loop(m_1, k_1))

Rerunning step: (flatten-disjunct 1 :depth 1)
Applying disjunctive simplification to flatten sequent,
this simplifies to: 
cc__ini__ : 
;;; min:context/min:procedure/ini__:situation/trs1:transition;

{-1}  sit__ini__(m_0, k_0)
  |-------
{1}   (k_1 = (((LAMBDA (m, k): 1))(m_0, k_0)):: int =>
        m_1 = (((LAMBDA (m, k): 0))(m_0, k_1)):: int => sit__loop(m_1, k_1))

Rerunning step: (expand sit__ini__)
Expanding the definition of sit__ini__,
this simplifies to: 
cc__ini__ : 
;;; min:context/min:procedure/ini__:situation/trs1:transition;

{-1}  (spec__min__min.pre__(a))
  |-------
[1]   (k_1 = (((LAMBDA (m, k): 1))(m_0, k_0)):: int =>
        m_1 = (((LAMBDA (m, k): 0))(m_0, k_1)):: int => sit__loop(m_1, k_1))

Rerunning step: (flatten-disjunct -1 :depth 1)
No change on: (flatten-disjunct -1 :depth 1)
cc__ini__ : 
;;; min:context/min:procedure/ini__:situation/trs1:transition;

{-1}  (spec__min__min.pre__(a))
  |-------
[1]   (k_1 = (((LAMBDA (m, k): 1))(m_0, k_0)):: int =>
        m_1 = (((LAMBDA (m, k): 0))(m_0, k_1)):: int => sit__loop(m_1, k_1))

Rerunning step: (spread (split-n 1) ((then (uid "min:context/min:procedure/ini__:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition;") (flatten-disjunct 1 :depth 1) (flatten-disjunct 1 :depth 1) (then (uid "min:context/min:procedure/ini__:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__goto:transition;") (expand-defs (("spec__min__min.pre__" 1 (("sit__ini__" 1))) ("sit__loop" 3) ("spec__min__min.post__" 3 (("sit__fin__post__" 3))))) (spread (split-n 3) ((then (uid "min:context/min:procedure/ini__:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__goto:transition/trs1__branch__trs1__goto_check_loop_1:transition;") (check-report (skip))) (then (uid "min:context/min:procedure/ini__:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__goto:transition/trs1__branch__trs1__goto_check_loop_2:transition;") (check-report (skip))) (then (uid "min:context/min:procedure/ini__:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__goto:transition/trs1__branch__trs1__goto_check_loop_3:transition;") (check-report (skip)))))))))
No change on: (split-n 1)
cc__ini__ : 
;;; min:context/min:procedure/ini__:situation/trs1:transition;

[-1]  (spec__min__min.pre__(a))
  |-------
[1]   (k_1 = (((LAMBDA (m, k): 1))(m_0, k_0)):: int =>
        m_1 = (((LAMBDA (m, k): 0))(m_0, k_1)):: int => sit__loop(m_1, k_1))

Adding comment: min:context/min:procedure/ini__:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition;
this simplifies to: 
cc__ini__ : 
;;; min:context/min:procedure/ini__:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition;

[-1]  (spec__min__min.pre__(a))
  |-------
[1]   (k_1 = (((LAMBDA (m, k): 1))(m_0, k_0)):: int =>
        m_1 = (((LAMBDA (m, k): 0))(m_0, k_1)):: int => sit__loop(m_1, k_1))

-*-SOCOS-*-
(uid "min:context/min:procedure/ini__:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition;")
-*-*-*-*-*-


nil

No change on: (socos-skip-msg (uid "min:context/min:procedure/ini__:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition;"))
cc__ini__ : 
;;; min:context/min:procedure/ini__:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition;

[-1]  (spec__min__min.pre__(a))
  |-------
[1]   (k_1 = (((LAMBDA (m, k): 1))(m_0, k_0)):: int =>
        m_1 = (((LAMBDA (m, k): 0))(m_0, k_1)):: int => sit__loop(m_1, k_1))

Postponing cc__ini__.

cc__ini__ : 
;;; min:context/min:procedure/ini__:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition;

[-1]  (spec__min__min.pre__(a))
  |-------
[1]   (k_1 = (((LAMBDA (m, k): 1))(m_0, k_0)):: int =>
        m_1 = (((LAMBDA (m, k): 0))(m_0, k_1)):: int => sit__loop(m_1, k_1))

Applying disjunctive simplification to flatten sequent,
this simplifies to: 
cc__ini__ : 
;;; min:context/min:procedure/ini__:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition;

[-1]  (spec__min__min.pre__(a))
{-2}  k_1 = (((LAMBDA (m, k): 1))(m_0, k_0)):: int
  |-------
{1}   m_1 = (((LAMBDA (m, k): 0))(m_0, k_1)):: int => sit__loop(m_1, k_1)

Applying disjunctive simplification to flatten sequent,
this simplifies to: 
cc__ini__ : 
;;; min:context/min:procedure/ini__:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition;

[-1]  (spec__min__min.pre__(a))
[-2]  k_1 = (((LAMBDA (m, k): 1))(m_0, k_0)):: int
{-3}  m_1 = (((LAMBDA (m, k): 0))(m_0, k_1)):: int
  |-------
{1}   sit__loop(m_1, k_1)

Adding comment: min:context/min:procedure/ini__:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__goto:transition;
this simplifies to: 
cc__ini__ : 
;;; min:context/min:procedure/ini__:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__goto:transition;

[-1]  (spec__min__min.pre__(a))
[-2]  k_1 = (((LAMBDA (m, k): 1))(m_0, k_0)):: int
[-3]  m_1 = (((LAMBDA (m, k): 0))(m_0, k_1)):: int
  |-------
[1]   sit__loop(m_1, k_1)

-*-SOCOS-*-
(uid "min:context/min:procedure/ini__:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__goto:transition;")
-*-*-*-*-*-


nil

No change on: (socos-skip-msg (uid "min:context/min:procedure/ini__:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__goto:transition;"))
cc__ini__ : 
;;; min:context/min:procedure/ini__:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__goto:transition;

[-1]  (spec__min__min.pre__(a))
[-2]  k_1 = (((LAMBDA (m, k): 1))(m_0, k_0)):: int
[-3]  m_1 = (((LAMBDA (m, k): 0))(m_0, k_1)):: int
  |-------
[1]   sit__loop(m_1, k_1)

Postponing cc__ini__.

cc__ini__ : 
;;; min:context/min:procedure/ini__:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__goto:transition;

[-1]  (spec__min__min.pre__(a))
[-2]  k_1 = (((LAMBDA (m, k): 1))(m_0, k_0)):: int
[-3]  m_1 = (((LAMBDA (m, k): 0))(m_0, k_1)):: int
  |-------
[1]   sit__loop(m_1, k_1)

No change on: (expand "sit__ini__" - :assert? none)
cc__ini__ : 
;;; min:context/min:procedure/ini__:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__goto:transition;

[-1]  (spec__min__min.pre__(a))
[-2]  k_1 = (((LAMBDA (m, k): 1))(m_0, k_0)):: int
[-3]  m_1 = (((LAMBDA (m, k): 0))(m_0, k_1)):: int
  |-------
[1]   sit__loop(m_1, k_1)

Expanding the definition of spec__min__min.pre__,
this simplifies to: 
cc__ini__ : 
;;; min:context/min:procedure/ini__:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__goto:transition;

{-1}  (id(n > 0))
[-2]  k_1 = (((LAMBDA (m, k): 1))(m_0, k_0)):: int
[-3]  m_1 = (((LAMBDA (m, k): 0))(m_0, k_1)):: int
  |-------
[1]   sit__loop(m_1, k_1)

No change on: (expand "sit__loop" - :assert? none)
cc__ini__ : 
;;; min:context/min:procedure/ini__:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__goto:transition;

{-1}  (id(n > 0))
[-2]  k_1 = (((LAMBDA (m, k): 1))(m_0, k_0)):: int
[-3]  m_1 = (((LAMBDA (m, k): 0))(m_0, k_1)):: int
  |-------
[1]   sit__loop(m_1, k_1)

No change on: (expand "sit__fin__post__" - :assert? none)
cc__ini__ : 
;;; min:context/min:procedure/ini__:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__goto:transition;

{-1}  (id(n > 0))
[-2]  k_1 = (((LAMBDA (m, k): 1))(m_0, k_0)):: int
[-3]  m_1 = (((LAMBDA (m, k): 0))(m_0, k_1)):: int
  |-------
[1]   sit__loop(m_1, k_1)

No change on: (expand "spec__min__min.post__" - :assert? none)
cc__ini__ : 
;;; min:context/min:procedure/ini__:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__goto:transition;

{-1}  (id(n > 0))
[-2]  k_1 = (((LAMBDA (m, k): 1))(m_0, k_0)):: int
[-3]  m_1 = (((LAMBDA (m, k): 0))(m_0, k_1)):: int
  |-------
[1]   sit__loop(m_1, k_1)

Postponing cc__ini__.

cc__ini__ : 
;;; min:context/min:procedure/ini__:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__goto:transition;

{-1}  (id(n > 0))
[-2]  k_1 = (((LAMBDA (m, k): 1))(m_0, k_0)):: int
[-3]  m_1 = (((LAMBDA (m, k): 0))(m_0, k_1)):: int
  |-------
[1]   sit__loop(m_1, k_1)

No change on: (expand "sit__ini__" + :assert? none)
cc__ini__ : 
;;; min:context/min:procedure/ini__:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__goto:transition;

{-1}  (id(n > 0))
[-2]  k_1 = (((LAMBDA (m, k): 1))(m_0, k_0)):: int
[-3]  m_1 = (((LAMBDA (m, k): 0))(m_0, k_1)):: int
  |-------
[1]   sit__loop(m_1, k_1)

No change on: (expand "spec__min__min.pre__" + :assert? none)
cc__ini__ : 
;;; min:context/min:procedure/ini__:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__goto:transition;

{-1}  (id(n > 0))
[-2]  k_1 = (((LAMBDA (m, k): 1))(m_0, k_0)):: int
[-3]  m_1 = (((LAMBDA (m, k): 0))(m_0, k_1)):: int
  |-------
[1]   sit__loop(m_1, k_1)

Expanding the definition of sit__loop,
this simplifies to: 
cc__ini__ : 
;;; min:context/min:procedure/ini__:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__goto:transition;

[-1]  (id(n > 0))
[-2]  k_1 = (((LAMBDA (m, k): 1))(m_0, k_0)):: int
[-3]  m_1 = (((LAMBDA (m, k): 0))(m_0, k_1)):: int
  |-------
{1}   (id(0 < k_1 AND k_1 <= n)) AND
       (id(0 <= m_1 AND m_1 < k_1)) AND
        (id(FORALL (i: int): 0 <= i AND i < k_1 => a(m_1) <= a(i)))

No change on: (expand "sit__fin__post__" + :assert? none)
cc__ini__ : 
;;; min:context/min:procedure/ini__:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__goto:transition;

[-1]  (id(n > 0))
[-2]  k_1 = (((LAMBDA (m, k): 1))(m_0, k_0)):: int
[-3]  m_1 = (((LAMBDA (m, k): 0))(m_0, k_1)):: int
  |-------
{1}   (id(0 < k_1 AND k_1 <= n)) AND
       (id(0 <= m_1 AND m_1 < k_1)) AND
        (id(FORALL (i: int): 0 <= i AND i < k_1 => a(m_1) <= a(i)))

No change on: (expand "spec__min__min.post__" + :assert? none)
cc__ini__ : 
;;; min:context/min:procedure/ini__:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__goto:transition;

[-1]  (id(n > 0))
[-2]  k_1 = (((LAMBDA (m, k): 1))(m_0, k_0)):: int
[-3]  m_1 = (((LAMBDA (m, k): 0))(m_0, k_1)):: int
  |-------
{1}   (id(0 < k_1 AND k_1 <= n)) AND
       (id(0 <= m_1 AND m_1 < k_1)) AND
        (id(FORALL (i: int): 0 <= i AND i < k_1 => a(m_1) <= a(i)))

Postponing cc__ini__.

cc__ini__ : 
;;; min:context/min:procedure/ini__:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__goto:transition;

[-1]  (id(n > 0))
[-2]  k_1 = (((LAMBDA (m, k): 1))(m_0, k_0)):: int
[-3]  m_1 = (((LAMBDA (m, k): 0))(m_0, k_1)):: int
  |-------
{1}   (id(0 < k_1 AND k_1 <= n)) AND
       (id(0 <= m_1 AND m_1 < k_1)) AND
        (id(FORALL (i: int): 0 <= i AND i < k_1 => a(m_1) <= a(i)))

Splitting conjunction into branches,
this yields  3 subgoals: 
cc__ini__.1 : 
;;; min:context/min:procedure/ini__:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__goto:transition;

[-1]  (id(n > 0))
[-2]  k_1 = (((LAMBDA (m, k): 1))(m_0, k_0)):: int
[-3]  m_1 = (((LAMBDA (m, k): 0))(m_0, k_1)):: int
  |-------
{1}   (id(0 < k_1 AND k_1 <= n))

Adding comment: min:context/min:procedure/ini__:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__goto:transition/trs1__branch__trs1__goto_check_loop_1:transition;
this simplifies to: 
cc__ini__.1 : 
;;; min:context/min:procedure/ini__:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__goto:transition/trs1__branch__trs1__goto_check_loop_1:transition;

[-1]  (id(n > 0))
[-2]  k_1 = (((LAMBDA (m, k): 1))(m_0, k_0)):: int
[-3]  m_1 = (((LAMBDA (m, k): 0))(m_0, k_1)):: int
  |-------
[1]   (id(0 < k_1 AND k_1 <= n))

-*-SOCOS-*-
(uid "min:context/min:procedure/ini__:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__goto:transition/trs1__branch__trs1__goto_check_loop_1:transition;")
-*-*-*-*-*-


nil

No change on: (socos-skip-msg (uid "min:context/min:procedure/ini__:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__goto:transition/trs1__branch__trs1__goto_check_loop_1:transition;"))
cc__ini__.1 : 
;;; min:context/min:procedure/ini__:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__goto:transition/trs1__branch__trs1__goto_check_loop_1:transition;

[-1]  (id(n > 0))
[-2]  k_1 = (((LAMBDA (m, k): 1))(m_0, k_0)):: int
[-3]  m_1 = (((LAMBDA (m, k): 0))(m_0, k_1)):: int
  |-------
[1]   (id(0 < k_1 AND k_1 <= n))

Postponing cc__ini__.1.

cc__ini__.1 : 
;;; min:context/min:procedure/ini__:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__goto:transition/trs1__branch__trs1__goto_check_loop_1:transition;

[-1]  (id(n > 0))
[-2]  k_1 = (((LAMBDA (m, k): 1))(m_0, k_0)):: int
[-3]  m_1 = (((LAMBDA (m, k): 0))(m_0, k_1)):: int
  |-------
[1]   (id(0 < k_1 AND k_1 <= n))

-*-SOCOS-*-
(check-condition "min:context/min:procedure/ini__:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__goto:transition/trs1__branch__trs1__goto_check_loop_1:transition;")
-*-*-*-*-*-


nil

No change on: (socos-skip-msg (check-condition "min:context/min:procedure/ini__:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__goto:transition/trs1__branch__trs1__goto_check_loop_1:transition;"))
cc__ini__.1 : 
;;; min:context/min:procedure/ini__:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__goto:transition/trs1__branch__trs1__goto_check_loop_1:transition;

[-1]  (id(n > 0))
[-2]  k_1 = (((LAMBDA (m, k): 1))(m_0, k_0)):: int
[-3]  m_1 = (((LAMBDA (m, k): 0))(m_0, k_1)):: int
  |-------
[1]   (id(0 < k_1 AND k_1 <= n))

Expanding the definition of id,
this simplifies to: 
cc__ini__.1 : 
;;; min:context/min:procedure/ini__:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__goto:transition/trs1__branch__trs1__goto_check_loop_1:transition;

{-1}  n > 0
[-2]  k_1 = (((LAMBDA (m, k): 1))(m_0, k_0)):: int
[-3]  m_1 = (((LAMBDA (m, k): 0))(m_0, k_1)):: int
  |-------
{1}   0 < k_1 AND k_1 <= n

nil

cc__ini__.1 : 
;;; min:context/min:procedure/ini__:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__goto:transition/trs1__branch__trs1__goto_check_loop_1:transition;

{-1}  n > 0
[-2]  k_1 = (((LAMBDA (m, k): 1))(m_0, k_0)):: int
[-3]  m_1 = (((LAMBDA (m, k): 0))(m_0, k_1)):: int
  |-------
{1}   0 < k_1 AND k_1 <= n

Applying beta-reduction,
this simplifies to: 
cc__ini__.1 : 
;;; min:context/min:procedure/ini__:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__goto:transition/trs1__branch__trs1__goto_check_loop_1:transition;

[-1]  n > 0
{-2}  k_1 = 1
{-3}  m_1 = 0
  |-------
[1]   0 < k_1 AND k_1 <= n

No change on: (skip)
cc__ini__.1 : 
;;; min:context/min:procedure/ini__:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__goto:transition/trs1__branch__trs1__goto_check_loop_1:transition;

[-1]  n > 0
[-2]  k_1 = 1
[-3]  m_1 = 0
  |-------
[1]   0 < k_1 AND k_1 <= n


Attempted proof of cc__ini__.1 failed.

Attempted proof of cc__ini__.1 failed.
cc__ini__.1 : 
;;; min:context/min:procedure/ini__:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__goto:transition/trs1__branch__trs1__goto_check_loop_1:transition;

[-1]  n > 0
{-2}  k_1 = 1
{-3}  m_1 = 0
  |-------
[1]   0 < k_1 AND k_1 <= n

-*-SOCOS-*-
(left-condition (sequent ("n > 0" "k_1 = 1" "m_1 = 0") ("0 < k_1 AND k_1 <= n")))
-*-*-*-*-*-


nil

No change on: (socos-skip-msg (left-condition (sequent ("n > 0" "k_1 = 1" "m_1 = 0") ("0 < k_1 AND k_1 <= n"))))
cc__ini__.1 : 
;;; min:context/min:procedure/ini__:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__goto:transition/trs1__branch__trs1__goto_check_loop_1:transition;

[-1]  n > 0
{-2}  k_1 = 1
{-3}  m_1 = 0
  |-------
[1]   0 < k_1 AND k_1 <= n

nil

cc__ini__.1 : 
;;; min:context/min:procedure/ini__:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__goto:transition/trs1__branch__trs1__goto_check_loop_1:transition;

[-1]  n > 0
{-2}  k_1 = 1
{-3}  m_1 = 0
  |-------
[1]   0 < k_1 AND k_1 <= n

Postponing cc__ini__.1.

cc__ini__.2 : 
;;; min:context/min:procedure/ini__:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__goto:transition;

[-1]  (id(n > 0))
[-2]  k_1 = (((LAMBDA (m, k): 1))(m_0, k_0)):: int
[-3]  m_1 = (((LAMBDA (m, k): 0))(m_0, k_1)):: int
  |-------
{1}   (id(0 <= m_1 AND m_1 < k_1))

Adding comment: min:context/min:procedure/ini__:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__goto:transition/trs1__branch__trs1__goto_check_loop_2:transition;
this simplifies to: 
cc__ini__.2 : 
;;; min:context/min:procedure/ini__:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__goto:transition/trs1__branch__trs1__goto_check_loop_2:transition;

[-1]  (id(n > 0))
[-2]  k_1 = (((LAMBDA (m, k): 1))(m_0, k_0)):: int
[-3]  m_1 = (((LAMBDA (m, k): 0))(m_0, k_1)):: int
  |-------
[1]   (id(0 <= m_1 AND m_1 < k_1))

-*-SOCOS-*-
(uid "min:context/min:procedure/ini__:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__goto:transition/trs1__branch__trs1__goto_check_loop_2:transition;")
-*-*-*-*-*-


nil

No change on: (socos-skip-msg (uid "min:context/min:procedure/ini__:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__goto:transition/trs1__branch__trs1__goto_check_loop_2:transition;"))
cc__ini__.2 : 
;;; min:context/min:procedure/ini__:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__goto:transition/trs1__branch__trs1__goto_check_loop_2:transition;

[-1]  (id(n > 0))
[-2]  k_1 = (((LAMBDA (m, k): 1))(m_0, k_0)):: int
[-3]  m_1 = (((LAMBDA (m, k): 0))(m_0, k_1)):: int
  |-------
[1]   (id(0 <= m_1 AND m_1 < k_1))

Postponing cc__ini__.2.

cc__ini__.2 : 
;;; min:context/min:procedure/ini__:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__goto:transition/trs1__branch__trs1__goto_check_loop_2:transition;

[-1]  (id(n > 0))
[-2]  k_1 = (((LAMBDA (m, k): 1))(m_0, k_0)):: int
[-3]  m_1 = (((LAMBDA (m, k): 0))(m_0, k_1)):: int
  |-------
[1]   (id(0 <= m_1 AND m_1 < k_1))

-*-SOCOS-*-
(check-condition "min:context/min:procedure/ini__:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__goto:transition/trs1__branch__trs1__goto_check_loop_2:transition;")
-*-*-*-*-*-


nil

No change on: (socos-skip-msg (check-condition "min:context/min:procedure/ini__:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__goto:transition/trs1__branch__trs1__goto_check_loop_2:transition;"))
cc__ini__.2 : 
;;; min:context/min:procedure/ini__:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__goto:transition/trs1__branch__trs1__goto_check_loop_2:transition;

[-1]  (id(n > 0))
[-2]  k_1 = (((LAMBDA (m, k): 1))(m_0, k_0)):: int
[-3]  m_1 = (((LAMBDA (m, k): 0))(m_0, k_1)):: int
  |-------
[1]   (id(0 <= m_1 AND m_1 < k_1))

Expanding the definition of id,
this simplifies to: 
cc__ini__.2 : 
;;; min:context/min:procedure/ini__:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__goto:transition/trs1__branch__trs1__goto_check_loop_2:transition;

{-1}  n > 0
[-2]  k_1 = (((LAMBDA (m, k): 1))(m_0, k_0)):: int
[-3]  m_1 = (((LAMBDA (m, k): 0))(m_0, k_1)):: int
  |-------
{1}   0 <= m_1 AND m_1 < k_1

nil

cc__ini__.2 : 
;;; min:context/min:procedure/ini__:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__goto:transition/trs1__branch__trs1__goto_check_loop_2:transition;

{-1}  n > 0
[-2]  k_1 = (((LAMBDA (m, k): 1))(m_0, k_0)):: int
[-3]  m_1 = (((LAMBDA (m, k): 0))(m_0, k_1)):: int
  |-------
{1}   0 <= m_1 AND m_1 < k_1

Applying beta-reduction,
this simplifies to: 
cc__ini__.2 : 
;;; min:context/min:procedure/ini__:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__goto:transition/trs1__branch__trs1__goto_check_loop_2:transition;

[-1]  n > 0
{-2}  k_1 = 1
{-3}  m_1 = 0
  |-------
[1]   0 <= m_1 AND m_1 < k_1

No change on: (skip)
cc__ini__.2 : 
;;; min:context/min:procedure/ini__:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__goto:transition/trs1__branch__trs1__goto_check_loop_2:transition;

[-1]  n > 0
[-2]  k_1 = 1
[-3]  m_1 = 0
  |-------
[1]   0 <= m_1 AND m_1 < k_1


Attempted proof of cc__ini__.2 failed.

Attempted proof of cc__ini__.2 failed.
cc__ini__.2 : 
;;; min:context/min:procedure/ini__:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__goto:transition/trs1__branch__trs1__goto_check_loop_2:transition;

[-1]  n > 0
{-2}  k_1 = 1
{-3}  m_1 = 0
  |-------
[1]   0 <= m_1 AND m_1 < k_1

-*-SOCOS-*-
(left-condition (sequent ("n > 0" "k_1 = 1" "m_1 = 0") ("0 <= m_1 AND m_1 < k_1")))
-*-*-*-*-*-


nil

No change on: (socos-skip-msg (left-condition (sequent ("n > 0" "k_1 = 1" "m_1 = 0") ("0 <= m_1 AND m_1 < k_1"))))
cc__ini__.2 : 
;;; min:context/min:procedure/ini__:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__goto:transition/trs1__branch__trs1__goto_check_loop_2:transition;

[-1]  n > 0
{-2}  k_1 = 1
{-3}  m_1 = 0
  |-------
[1]   0 <= m_1 AND m_1 < k_1

nil

cc__ini__.2 : 
;;; min:context/min:procedure/ini__:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__goto:transition/trs1__branch__trs1__goto_check_loop_2:transition;

[-1]  n > 0
{-2}  k_1 = 1
{-3}  m_1 = 0
  |-------
[1]   0 <= m_1 AND m_1 < k_1

Postponing cc__ini__.2.

cc__ini__.3 : 
;;; min:context/min:procedure/ini__:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__goto:transition;

[-1]  (id(n > 0))
[-2]  k_1 = (((LAMBDA (m, k): 1))(m_0, k_0)):: int
[-3]  m_1 = (((LAMBDA (m, k): 0))(m_0, k_1)):: int
  |-------
{1}   (id(FORALL (i: int): 0 <= i AND i < k_1 => a(m_1) <= a(i)))

Adding comment: min:context/min:procedure/ini__:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__goto:transition/trs1__branch__trs1__goto_check_loop_3:transition;
this simplifies to: 
cc__ini__.3 : 
;;; min:context/min:procedure/ini__:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__goto:transition/trs1__branch__trs1__goto_check_loop_3:transition;

[-1]  (id(n > 0))
[-2]  k_1 = (((LAMBDA (m, k): 1))(m_0, k_0)):: int
[-3]  m_1 = (((LAMBDA (m, k): 0))(m_0, k_1)):: int
  |-------
[1]   (id(FORALL (i: int): 0 <= i AND i < k_1 => a(m_1) <= a(i)))

-*-SOCOS-*-
(uid "min:context/min:procedure/ini__:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__goto:transition/trs1__branch__trs1__goto_check_loop_3:transition;")
-*-*-*-*-*-


nil

No change on: (socos-skip-msg (uid "min:context/min:procedure/ini__:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__goto:transition/trs1__branch__trs1__goto_check_loop_3:transition;"))
cc__ini__.3 : 
;;; min:context/min:procedure/ini__:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__goto:transition/trs1__branch__trs1__goto_check_loop_3:transition;

[-1]  (id(n > 0))
[-2]  k_1 = (((LAMBDA (m, k): 1))(m_0, k_0)):: int
[-3]  m_1 = (((LAMBDA (m, k): 0))(m_0, k_1)):: int
  |-------
[1]   (id(FORALL (i: int): 0 <= i AND i < k_1 => a(m_1) <= a(i)))

Postponing cc__ini__.3.

cc__ini__.3 : 
;;; min:context/min:procedure/ini__:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__goto:transition/trs1__branch__trs1__goto_check_loop_3:transition;

[-1]  (id(n > 0))
[-2]  k_1 = (((LAMBDA (m, k): 1))(m_0, k_0)):: int
[-3]  m_1 = (((LAMBDA (m, k): 0))(m_0, k_1)):: int
  |-------
[1]   (id(FORALL (i: int): 0 <= i AND i < k_1 => a(m_1) <= a(i)))

-*-SOCOS-*-
(check-condition "min:context/min:procedure/ini__:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__goto:transition/trs1__branch__trs1__goto_check_loop_3:transition;")
-*-*-*-*-*-


nil

No change on: (socos-skip-msg (check-condition "min:context/min:procedure/ini__:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__goto:transition/trs1__branch__trs1__goto_check_loop_3:transition;"))
cc__ini__.3 : 
;;; min:context/min:procedure/ini__:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__goto:transition/trs1__branch__trs1__goto_check_loop_3:transition;

[-1]  (id(n > 0))
[-2]  k_1 = (((LAMBDA (m, k): 1))(m_0, k_0)):: int
[-3]  m_1 = (((LAMBDA (m, k): 0))(m_0, k_1)):: int
  |-------
[1]   (id(FORALL (i: int): 0 <= i AND i < k_1 => a(m_1) <= a(i)))

Expanding the definition of id,
this simplifies to: 
cc__ini__.3 : 
;;; min:context/min:procedure/ini__:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__goto:transition/trs1__branch__trs1__goto_check_loop_3:transition;

{-1}  n > 0
[-2]  k_1 = (((LAMBDA (m, k): 1))(m_0, k_0)):: int
[-3]  m_1 = (((LAMBDA (m, k): 0))(m_0, k_1)):: int
  |-------
{1}   FORALL (i: int): 0 <= i AND i < k_1 => a(m_1) <= a(i)

nil

cc__ini__.3 : 
;;; min:context/min:procedure/ini__:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__goto:transition/trs1__branch__trs1__goto_check_loop_3:transition;

{-1}  n > 0
[-2]  k_1 = (((LAMBDA (m, k): 1))(m_0, k_0)):: int
[-3]  m_1 = (((LAMBDA (m, k): 0))(m_0, k_1)):: int
  |-------
{1}   FORALL (i: int): 0 <= i AND i < k_1 => a(m_1) <= a(i)

Applying beta-reduction,
this simplifies to: 
cc__ini__.3 : 
;;; min:context/min:procedure/ini__:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__goto:transition/trs1__branch__trs1__goto_check_loop_3:transition;

[-1]  n > 0
{-2}  k_1 = 1
{-3}  m_1 = 0
  |-------
[1]   FORALL (i: int): 0 <= i AND i < k_1 => a(m_1) <= a(i)

No change on: (skip)
cc__ini__.3 : 
;;; min:context/min:procedure/ini__:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__goto:transition/trs1__branch__trs1__goto_check_loop_3:transition;

[-1]  n > 0
[-2]  k_1 = 1
[-3]  m_1 = 0
  |-------
[1]   FORALL (i: int): 0 <= i AND i < k_1 => a(m_1) <= a(i)


Attempted proof of cc__ini__.3 failed.

Attempted proof of cc__ini__.3 failed.
cc__ini__.3 : 
;;; min:context/min:procedure/ini__:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__goto:transition/trs1__branch__trs1__goto_check_loop_3:transition;

[-1]  n > 0
{-2}  k_1 = 1
{-3}  m_1 = 0
  |-------
[1]   FORALL (i: int): 0 <= i AND i < k_1 => a(m_1) <= a(i)

-*-SOCOS-*-
(left-condition (sequent ("n > 0" "k_1 = 1" "m_1 = 0") ("FORALL (i: int): 0 <= i AND i < k_1 => a(m_1) <= a(i)")))
-*-*-*-*-*-


nil

No change on: (socos-skip-msg (left-condition (sequent ("n > 0" "k_1 = 1" "m_1 = 0") ("FORALL (i: int): 0 <= i AND i < k_1 => a(m_1) <= a(i)"))))
cc__ini__.3 : 
;;; min:context/min:procedure/ini__:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__goto:transition/trs1__branch__trs1__goto_check_loop_3:transition;

[-1]  n > 0
{-2}  k_1 = 1
{-3}  m_1 = 0
  |-------
[1]   FORALL (i: int): 0 <= i AND i < k_1 => a(m_1) <= a(i)

nil

cc__ini__.3 : 
;;; min:context/min:procedure/ini__:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__goto:transition/trs1__branch__trs1__goto_check_loop_3:transition;

[-1]  n > 0
{-2}  k_1 = 1
{-3}  m_1 = 0
  |-------
[1]   FORALL (i: int): 0 <= i AND i < k_1 => a(m_1) <= a(i)

Postponing cc__ini__.3.

cc__ini__.1 : 
;;; min:context/min:procedure/ini__:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__goto:transition/trs1__branch__trs1__goto_check_loop_1:transition;

[-1]  n > 0
{-2}  k_1 = 1
{-3}  m_1 = 0
  |-------
[1]   0 < k_1 AND k_1 <= n

***Warning: Fewer subproofs (0) than subgoals (1)
No change on: (skip)
cc__ini__.1 : 
;;; min:context/min:procedure/ini__:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__goto:transition/trs1__branch__trs1__goto_check_loop_1:transition;

[-1]  n > 0
{-2}  k_1 = 1
{-3}  m_1 = 0
  |-------
[1]   0 < k_1 AND k_1 <= n

Postponing cc__ini__.1.

cc__ini__.2 : 
;;; min:context/min:procedure/ini__:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__goto:transition/trs1__branch__trs1__goto_check_loop_2:transition;

[-1]  n > 0
{-2}  k_1 = 1
{-3}  m_1 = 0
  |-------
[1]   0 <= m_1 AND m_1 < k_1

***Warning: Fewer subproofs (0) than subgoals (1)
No change on: (skip)
cc__ini__.2 : 
;;; min:context/min:procedure/ini__:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__goto:transition/trs1__branch__trs1__goto_check_loop_2:transition;

[-1]  n > 0
{-2}  k_1 = 1
{-3}  m_1 = 0
  |-------
[1]   0 <= m_1 AND m_1 < k_1

Postponing cc__ini__.2.

cc__ini__.3 : 
;;; min:context/min:procedure/ini__:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__goto:transition/trs1__branch__trs1__goto_check_loop_3:transition;

[-1]  n > 0
{-2}  k_1 = 1
{-3}  m_1 = 0
  |-------
[1]   FORALL (i: int): 0 <= i AND i < k_1 => a(m_1) <= a(i)

***Warning: Fewer subproofs (0) than subgoals (1)
No change on: (skip)
cc__ini__.3 : 
;;; min:context/min:procedure/ini__:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__goto:transition/trs1__branch__trs1__goto_check_loop_3:transition;

[-1]  n > 0
{-2}  k_1 = 1
{-3}  m_1 = 0
  |-------
[1]   FORALL (i: int): 0 <= i AND i < k_1 => a(m_1) <= a(i)

Postponing cc__ini__.3.

cc__ini__.1 : 
;;; min:context/min:procedure/ini__:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__goto:transition/trs1__branch__trs1__goto_check_loop_1:transition;

[-1]  n > 0
{-2}  k_1 = 1
{-3}  m_1 = 0
  |-------
[1]   0 < k_1 AND k_1 <= n

Postponing cc__ini__.1.

cc__ini__.2 : 
;;; min:context/min:procedure/ini__:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__goto:transition/trs1__branch__trs1__goto_check_loop_2:transition;

[-1]  n > 0
{-2}  k_1 = 1
{-3}  m_1 = 0
  |-------
[1]   0 <= m_1 AND m_1 < k_1

Postponing cc__ini__.2.

cc__ini__.3 : 
;;; min:context/min:procedure/ini__:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__goto:transition/trs1__branch__trs1__goto_check_loop_3:transition;

[-1]  n > 0
{-2}  k_1 = 1
{-3}  m_1 = 0
  |-------
[1]   FORALL (i: int): 0 <= i AND i < k_1 => a(m_1) <= a(i)

Postponing cc__ini__.3.

cc__ini__.1 : 
;;; min:context/min:procedure/ini__:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__goto:transition/trs1__branch__trs1__goto_check_loop_1:transition;

[-1]  n > 0
{-2}  k_1 = 1
{-3}  m_1 = 0
  |-------
[1]   0 < k_1 AND k_1 <= n


Run time  = 0.06 secs.
Real time = 0.13 secs.

impl__min__min.cc__ini__ unproved in 0.06 real, 0.06 cpu seconds
Rerunning proof of impl__min__min.cc__loop_TCC1
Installing rewrite rule sets.singleton_rew (all instances)
cc__loop_TCC1 :  

  |-------
{1}   sit__loop(m_0, k_0) AND
       (id(((LAMBDA (m, k): k < n OR k = n))(m_0, k_0))) AND
        (((LAMBDA (m, k): k < n))(m_0, k_0))
       IMPLIES
       (FORALL (m1: int, k1: int):
          k1 = k_0 AND m1 = m_0 IMPLIES m1 >= 0 AND m1 < n)

Rerunning step: (then (skosimp-2) (uid "min:context/min:procedure;") (then (expand-nested-defs - (("spec__min__min.pre__" 1 (("sit__ini__" 1))) ("sit__loop" 3) ("spec__min__min.post__" 3 (("sit__fin__post__" 3))))) (flatten-disjunct -) (check-report (skip))))
Skolemizing and flattening,
this simplifies to: 
cc__loop_TCC1 :  

{-1}  sit__loop(m_0, k_0)
{-2}  (id(((LAMBDA (m, k): k < n OR k = n))(m_0, k_0)))
{-3}  (((LAMBDA (m, k): k < n))(m_0, k_0))
{-4}  k1 = k_0
{-5}  m1 = m_0
  |-------
{1}   m1 >= 0 AND m1 < n

Adding comment: min:context/min:procedure;
this simplifies to: 
cc__loop_TCC1 : 
;;; min:context/min:procedure;

[-1]  sit__loop(m_0, k_0)
[-2]  (id(((LAMBDA (m, k): k < n OR k = n))(m_0, k_0)))
[-3]  (((LAMBDA (m, k): k < n))(m_0, k_0))
[-4]  k1 = k_0
[-5]  m1 = m_0
  |-------
[1]   m1 >= 0 AND m1 < n

-*-SOCOS-*-
(uid "min:context/min:procedure;")
-*-*-*-*-*-


nil

No change on: (socos-skip-msg (uid "min:context/min:procedure;"))
cc__loop_TCC1 : 
;;; min:context/min:procedure;

[-1]  sit__loop(m_0, k_0)
[-2]  (id(((LAMBDA (m, k): k < n OR k = n))(m_0, k_0)))
[-3]  (((LAMBDA (m, k): k < n))(m_0, k_0))
[-4]  k1 = k_0
[-5]  m1 = m_0
  |-------
[1]   m1 >= 0 AND m1 < n

Postponing cc__loop_TCC1.

cc__loop_TCC1 : 
;;; min:context/min:procedure;

[-1]  sit__loop(m_0, k_0)
[-2]  (id(((LAMBDA (m, k): k < n OR k = n))(m_0, k_0)))
[-3]  (((LAMBDA (m, k): k < n))(m_0, k_0))
[-4]  k1 = k_0
[-5]  m1 = m_0
  |-------
[1]   m1 >= 0 AND m1 < n

Expanding all definitions,
this simplifies to: 
cc__loop_TCC1 : 
;;; min:context/min:procedure;

{-1}  (id(0 < k_0 AND k_0 <= n)) AND
       (id(0 <= m_0 AND m_0 < k_0)) AND
        (id(FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)))
[-2]  (id(((LAMBDA (m, k): k < n OR k = n))(m_0, k_0)))
[-3]  (((LAMBDA (m, k): k < n))(m_0, k_0))
[-4]  k1 = k_0
[-5]  m1 = m_0
  |-------
[1]   m1 >= 0 AND m1 < n

Applying disjunctive simplification to flatten sequent,
this simplifies to: 
cc__loop_TCC1 : 
;;; min:context/min:procedure;

{-1}  (id(0 < k_0 AND k_0 <= n))
{-2}  (id(0 <= m_0 AND m_0 < k_0))
{-3}  (id(FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)))
[-4]  (id(((LAMBDA (m, k): k < n OR k = n))(m_0, k_0)))
[-5]  (((LAMBDA (m, k): k < n))(m_0, k_0))
[-6]  k1 = k_0
[-7]  m1 = m_0
  |-------
[1]   m1 >= 0 AND m1 < n

-*-SOCOS-*-
(check-condition "min:context/min:procedure;")
-*-*-*-*-*-


nil

No change on: (socos-skip-msg (check-condition "min:context/min:procedure;"))
cc__loop_TCC1 : 
;;; min:context/min:procedure;

{-1}  (id(0 < k_0 AND k_0 <= n))
{-2}  (id(0 <= m_0 AND m_0 < k_0))
{-3}  (id(FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)))
[-4]  (id(((LAMBDA (m, k): k < n OR k = n))(m_0, k_0)))
[-5]  (((LAMBDA (m, k): k < n))(m_0, k_0))
[-6]  k1 = k_0
[-7]  m1 = m_0
  |-------
[1]   m1 >= 0 AND m1 < n

Expanding the definition of id,
this simplifies to: 
cc__loop_TCC1 : 
;;; min:context/min:procedure;

{-1}  0 < k_0 AND k_0 <= n
{-2}  0 <= m_0 AND m_0 < k_0
{-3}  FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)
{-4}  ((LAMBDA (m, k): k < n OR k = n))(m_0, k_0)
[-5]  (((LAMBDA (m, k): k < n))(m_0, k_0))
[-6]  k1 = k_0
[-7]  m1 = m_0
  |-------
[1]   m1 >= 0 AND m1 < n

nil

cc__loop_TCC1 : 
;;; min:context/min:procedure;

{-1}  0 < k_0 AND k_0 <= n
{-2}  0 <= m_0 AND m_0 < k_0
{-3}  FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)
{-4}  ((LAMBDA (m, k): k < n OR k = n))(m_0, k_0)
[-5]  (((LAMBDA (m, k): k < n))(m_0, k_0))
[-6]  k1 = k_0
[-7]  m1 = m_0
  |-------
[1]   m1 >= 0 AND m1 < n

Applying beta-reduction,
this simplifies to: 
cc__loop_TCC1 : 
;;; min:context/min:procedure;

[-1]  0 < k_0 AND k_0 <= n
[-2]  0 <= m_0 AND m_0 < k_0
[-3]  FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)
{-4}  k_0 < n OR k_0 = n
{-5}  k_0 < n
[-6]  k1 = k_0
[-7]  m1 = m_0
  |-------
[1]   m1 >= 0 AND m1 < n

No change on: (skip)
cc__loop_TCC1 : 
;;; min:context/min:procedure;

[-1]  0 < k_0 AND k_0 <= n
[-2]  0 <= m_0 AND m_0 < k_0
[-3]  FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)
[-4]  k_0 < n OR k_0 = n
[-5]  k_0 < n
[-6]  k1 = k_0
[-7]  m1 = m_0
  |-------
[1]   m1 >= 0 AND m1 < n


Attempted proof of cc__loop_TCC1 failed.

Attempted proof of cc__loop_TCC1 failed.
cc__loop_TCC1 : 
;;; min:context/min:procedure;

[-1]  0 < k_0 AND k_0 <= n
[-2]  0 <= m_0 AND m_0 < k_0
[-3]  FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)
{-4}  k_0 < n OR k_0 = n
{-5}  k_0 < n
[-6]  k1 = k_0
[-7]  m1 = m_0
  |-------
[1]   m1 >= 0 AND m1 < n

-*-SOCOS-*-
(left-condition (sequent ("0 < k_0 AND k_0 <= n" "0 <= m_0 AND m_0 < k_0" "FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)" "k_0 < n OR k_0 = n" "k_0 < n" "k1 = k_0" "m1 = m_0") ("m1 >= 0 AND m1 < n")) impl__min__min 98 8)
-*-*-*-*-*-


nil

No change on: (socos-skip-msg (left-condition (sequent ("0 < k_0 AND k_0 <= n" "0 <= m_0 AND m_0 < k_0" "FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)" "k_0 < n OR k_0 = n" "k_0 < n" "k1 = k_0" "m1 = m_0") ("m1 >= 0 AND m1 < n")) impl__min__min 98 8))
cc__loop_TCC1 : 
;;; min:context/min:procedure;

[-1]  0 < k_0 AND k_0 <= n
[-2]  0 <= m_0 AND m_0 < k_0
[-3]  FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)
{-4}  k_0 < n OR k_0 = n
{-5}  k_0 < n
[-6]  k1 = k_0
[-7]  m1 = m_0
  |-------
[1]   m1 >= 0 AND m1 < n

nil

cc__loop_TCC1 : 
;;; min:context/min:procedure;

[-1]  0 < k_0 AND k_0 <= n
[-2]  0 <= m_0 AND m_0 < k_0
[-3]  FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)
{-4}  k_0 < n OR k_0 = n
{-5}  k_0 < n
[-6]  k1 = k_0
[-7]  m1 = m_0
  |-------
[1]   m1 >= 0 AND m1 < n

Postponing cc__loop_TCC1.

cc__loop_TCC1 : 
;;; min:context/min:procedure;

[-1]  0 < k_0 AND k_0 <= n
[-2]  0 <= m_0 AND m_0 < k_0
[-3]  FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)
{-4}  k_0 < n OR k_0 = n
{-5}  k_0 < n
[-6]  k1 = k_0
[-7]  m1 = m_0
  |-------
[1]   m1 >= 0 AND m1 < n

***Warning: Fewer subproofs (0) than subgoals (1)
No change on: (skip)
cc__loop_TCC1 : 
;;; min:context/min:procedure;

[-1]  0 < k_0 AND k_0 <= n
[-2]  0 <= m_0 AND m_0 < k_0
[-3]  FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)
{-4}  k_0 < n OR k_0 = n
{-5}  k_0 < n
[-6]  k1 = k_0
[-7]  m1 = m_0
  |-------
[1]   m1 >= 0 AND m1 < n

Postponing cc__loop_TCC1.

cc__loop_TCC1 : 
;;; min:context/min:procedure;

[-1]  0 < k_0 AND k_0 <= n
[-2]  0 <= m_0 AND m_0 < k_0
[-3]  FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)
{-4}  k_0 < n OR k_0 = n
{-5}  k_0 < n
[-6]  k1 = k_0
[-7]  m1 = m_0
  |-------
[1]   m1 >= 0 AND m1 < n

Postponing cc__loop_TCC1.

cc__loop_TCC1 : 
;;; min:context/min:procedure;

[-1]  0 < k_0 AND k_0 <= n
[-2]  0 <= m_0 AND m_0 < k_0
[-3]  FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)
{-4}  k_0 < n OR k_0 = n
{-5}  k_0 < n
[-6]  k1 = k_0
[-7]  m1 = m_0
  |-------
[1]   m1 >= 0 AND m1 < n


Run time  = 0.03 secs.
Real time = 0.06 secs.

impl__min__min.cc__loop_TCC1 unproved in 0.03 real, 0.03 cpu seconds
Rerunning proof of impl__min__min.cc__loop_TCC2
Installing rewrite rule sets.singleton_rew (all instances)
cc__loop_TCC2 :  

  |-------
{1}   sit__loop(m_0, k_0) AND
       (id(((LAMBDA (m, k): k < n OR k = n))(m_0, k_0))) AND
        (((LAMBDA (m, k): k < n))(m_0, k_0))
       IMPLIES
       (FORALL (m1: int, k1: int):
          k1 = k_0 AND m1 = m_0 IMPLIES k1 >= 0 AND k1 < n)

Rerunning step: (then (skosimp-2) (uid "min:context/min:procedure;") (then (expand-nested-defs - (("spec__min__min.pre__" 1 (("sit__ini__" 1))) ("sit__loop" 3) ("spec__min__min.post__" 3 (("sit__fin__post__" 3))))) (flatten-disjunct -) (check-report (skip))))
Skolemizing and flattening,
this simplifies to: 
cc__loop_TCC2 :  

{-1}  sit__loop(m_0, k_0)
{-2}  (id(((LAMBDA (m, k): k < n OR k = n))(m_0, k_0)))
{-3}  (((LAMBDA (m, k): k < n))(m_0, k_0))
{-4}  k1 = k_0
{-5}  m1 = m_0
  |-------
{1}   k1 >= 0 AND k1 < n

Adding comment: min:context/min:procedure;
this simplifies to: 
cc__loop_TCC2 : 
;;; min:context/min:procedure;

[-1]  sit__loop(m_0, k_0)
[-2]  (id(((LAMBDA (m, k): k < n OR k = n))(m_0, k_0)))
[-3]  (((LAMBDA (m, k): k < n))(m_0, k_0))
[-4]  k1 = k_0
[-5]  m1 = m_0
  |-------
[1]   k1 >= 0 AND k1 < n

-*-SOCOS-*-
(uid "min:context/min:procedure;")
-*-*-*-*-*-


nil

No change on: (socos-skip-msg (uid "min:context/min:procedure;"))
cc__loop_TCC2 : 
;;; min:context/min:procedure;

[-1]  sit__loop(m_0, k_0)
[-2]  (id(((LAMBDA (m, k): k < n OR k = n))(m_0, k_0)))
[-3]  (((LAMBDA (m, k): k < n))(m_0, k_0))
[-4]  k1 = k_0
[-5]  m1 = m_0
  |-------
[1]   k1 >= 0 AND k1 < n

Postponing cc__loop_TCC2.

cc__loop_TCC2 : 
;;; min:context/min:procedure;

[-1]  sit__loop(m_0, k_0)
[-2]  (id(((LAMBDA (m, k): k < n OR k = n))(m_0, k_0)))
[-3]  (((LAMBDA (m, k): k < n))(m_0, k_0))
[-4]  k1 = k_0
[-5]  m1 = m_0
  |-------
[1]   k1 >= 0 AND k1 < n

Expanding all definitions,
this simplifies to: 
cc__loop_TCC2 : 
;;; min:context/min:procedure;

{-1}  (id(0 < k_0 AND k_0 <= n)) AND
       (id(0 <= m_0 AND m_0 < k_0)) AND
        (id(FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)))
[-2]  (id(((LAMBDA (m, k): k < n OR k = n))(m_0, k_0)))
[-3]  (((LAMBDA (m, k): k < n))(m_0, k_0))
[-4]  k1 = k_0
[-5]  m1 = m_0
  |-------
[1]   k1 >= 0 AND k1 < n

Applying disjunctive simplification to flatten sequent,
this simplifies to: 
cc__loop_TCC2 : 
;;; min:context/min:procedure;

{-1}  (id(0 < k_0 AND k_0 <= n))
{-2}  (id(0 <= m_0 AND m_0 < k_0))
{-3}  (id(FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)))
[-4]  (id(((LAMBDA (m, k): k < n OR k = n))(m_0, k_0)))
[-5]  (((LAMBDA (m, k): k < n))(m_0, k_0))
[-6]  k1 = k_0
[-7]  m1 = m_0
  |-------
[1]   k1 >= 0 AND k1 < n

-*-SOCOS-*-
(check-condition "min:context/min:procedure;")
-*-*-*-*-*-


nil

No change on: (socos-skip-msg (check-condition "min:context/min:procedure;"))
cc__loop_TCC2 : 
;;; min:context/min:procedure;

{-1}  (id(0 < k_0 AND k_0 <= n))
{-2}  (id(0 <= m_0 AND m_0 < k_0))
{-3}  (id(FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)))
[-4]  (id(((LAMBDA (m, k): k < n OR k = n))(m_0, k_0)))
[-5]  (((LAMBDA (m, k): k < n))(m_0, k_0))
[-6]  k1 = k_0
[-7]  m1 = m_0
  |-------
[1]   k1 >= 0 AND k1 < n

Expanding the definition of id,
this simplifies to: 
cc__loop_TCC2 : 
;;; min:context/min:procedure;

{-1}  0 < k_0 AND k_0 <= n
{-2}  0 <= m_0 AND m_0 < k_0
{-3}  FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)
{-4}  ((LAMBDA (m, k): k < n OR k = n))(m_0, k_0)
[-5]  (((LAMBDA (m, k): k < n))(m_0, k_0))
[-6]  k1 = k_0
[-7]  m1 = m_0
  |-------
[1]   k1 >= 0 AND k1 < n

nil

cc__loop_TCC2 : 
;;; min:context/min:procedure;

{-1}  0 < k_0 AND k_0 <= n
{-2}  0 <= m_0 AND m_0 < k_0
{-3}  FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)
{-4}  ((LAMBDA (m, k): k < n OR k = n))(m_0, k_0)
[-5]  (((LAMBDA (m, k): k < n))(m_0, k_0))
[-6]  k1 = k_0
[-7]  m1 = m_0
  |-------
[1]   k1 >= 0 AND k1 < n

Applying beta-reduction,
this simplifies to: 
cc__loop_TCC2 : 
;;; min:context/min:procedure;

[-1]  0 < k_0 AND k_0 <= n
[-2]  0 <= m_0 AND m_0 < k_0
[-3]  FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)
{-4}  k_0 < n OR k_0 = n
{-5}  k_0 < n
[-6]  k1 = k_0
[-7]  m1 = m_0
  |-------
[1]   k1 >= 0 AND k1 < n

No change on: (skip)
cc__loop_TCC2 : 
;;; min:context/min:procedure;

[-1]  0 < k_0 AND k_0 <= n
[-2]  0 <= m_0 AND m_0 < k_0
[-3]  FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)
[-4]  k_0 < n OR k_0 = n
[-5]  k_0 < n
[-6]  k1 = k_0
[-7]  m1 = m_0
  |-------
[1]   k1 >= 0 AND k1 < n


Attempted proof of cc__loop_TCC2 failed.

Attempted proof of cc__loop_TCC2 failed.
cc__loop_TCC2 : 
;;; min:context/min:procedure;

[-1]  0 < k_0 AND k_0 <= n
[-2]  0 <= m_0 AND m_0 < k_0
[-3]  FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)
{-4}  k_0 < n OR k_0 = n
{-5}  k_0 < n
[-6]  k1 = k_0
[-7]  m1 = m_0
  |-------
[1]   k1 >= 0 AND k1 < n

-*-SOCOS-*-
(left-condition (sequent ("0 < k_0 AND k_0 <= n" "0 <= m_0 AND m_0 < k_0" "FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)" "k_0 < n OR k_0 = n" "k_0 < n" "k1 = k_0" "m1 = m_0") ("k1 >= 0 AND k1 < n")) impl__min__min 98 8)
-*-*-*-*-*-


nil

No change on: (socos-skip-msg (left-condition (sequent ("0 < k_0 AND k_0 <= n" "0 <= m_0 AND m_0 < k_0" "FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)" "k_0 < n OR k_0 = n" "k_0 < n" "k1 = k_0" "m1 = m_0") ("k1 >= 0 AND k1 < n")) impl__min__min 98 8))
cc__loop_TCC2 : 
;;; min:context/min:procedure;

[-1]  0 < k_0 AND k_0 <= n
[-2]  0 <= m_0 AND m_0 < k_0
[-3]  FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)
{-4}  k_0 < n OR k_0 = n
{-5}  k_0 < n
[-6]  k1 = k_0
[-7]  m1 = m_0
  |-------
[1]   k1 >= 0 AND k1 < n

nil

cc__loop_TCC2 : 
;;; min:context/min:procedure;

[-1]  0 < k_0 AND k_0 <= n
[-2]  0 <= m_0 AND m_0 < k_0
[-3]  FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)
{-4}  k_0 < n OR k_0 = n
{-5}  k_0 < n
[-6]  k1 = k_0
[-7]  m1 = m_0
  |-------
[1]   k1 >= 0 AND k1 < n

Postponing cc__loop_TCC2.

cc__loop_TCC2 : 
;;; min:context/min:procedure;

[-1]  0 < k_0 AND k_0 <= n
[-2]  0 <= m_0 AND m_0 < k_0
[-3]  FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)
{-4}  k_0 < n OR k_0 = n
{-5}  k_0 < n
[-6]  k1 = k_0
[-7]  m1 = m_0
  |-------
[1]   k1 >= 0 AND k1 < n

***Warning: Fewer subproofs (0) than subgoals (1)
No change on: (skip)
cc__loop_TCC2 : 
;;; min:context/min:procedure;

[-1]  0 < k_0 AND k_0 <= n
[-2]  0 <= m_0 AND m_0 < k_0
[-3]  FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)
{-4}  k_0 < n OR k_0 = n
{-5}  k_0 < n
[-6]  k1 = k_0
[-7]  m1 = m_0
  |-------
[1]   k1 >= 0 AND k1 < n

Postponing cc__loop_TCC2.

cc__loop_TCC2 : 
;;; min:context/min:procedure;

[-1]  0 < k_0 AND k_0 <= n
[-2]  0 <= m_0 AND m_0 < k_0
[-3]  FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)
{-4}  k_0 < n OR k_0 = n
{-5}  k_0 < n
[-6]  k1 = k_0
[-7]  m1 = m_0
  |-------
[1]   k1 >= 0 AND k1 < n

Postponing cc__loop_TCC2.

cc__loop_TCC2 : 
;;; min:context/min:procedure;

[-1]  0 < k_0 AND k_0 <= n
[-2]  0 <= m_0 AND m_0 < k_0
[-3]  FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)
{-4}  k_0 < n OR k_0 = n
{-5}  k_0 < n
[-6]  k1 = k_0
[-7]  m1 = m_0
  |-------
[1]   k1 >= 0 AND k1 < n


Run time  = 0.02 secs.
Real time = 0.07 secs.

impl__min__min.cc__loop_TCC2 unproved in 0.02 real, 0.02 cpu seconds
Rerunning proof of impl__min__min.cc__loop
Installing rewrite rule sets.singleton_rew (all instances)
cc__loop :  

  |-------
{1}   sit__loop(m_0, k_0) =>
       (id(((LAMBDA (m, k): k < n OR k = n))(m_0, k_0))) AND
        (((((LAMBDA (m, k): k < n))(m_0, k_0)) =>
           (id(((LAMBDA (m, k): a(m) < a(k) OR a(m) >= a(k)))(m_0, k_0)))
            AND
            (((((LAMBDA (m, k): a(m) < a(k)))(m_0, k_0)) =>
               k_1 = (((LAMBDA (m, k): k + 1))(m_0, k_0)):: int =>
                (id(((LAMBDA (m, k): 0 <= n - k))(m_0, k_1))) AND
                 ((id(((LAMBDA (m, k):
                          n - k < ((LAMBDA (m, k): n - k))(m_0, k_0)))
                          (m_0, k_1)))
                   AND (sit__loop(m_0, k_1))))
              AND
              ((((LAMBDA (m, k): a(m) >= a(k)))(m_0, k_0)) =>
                m_1 = (((LAMBDA (m, k): k))(m_0, k_0)):: int =>
                 k_1 = (((LAMBDA (m, k): k + 1))(m_1, k_0)):: int =>
                  (id(((LAMBDA (m, k): 0 <= n - k))(m_1, k_1))) AND
                   ((id(((LAMBDA (m, k):
                            n - k < ((LAMBDA (m, k): n - k))(m_0, k_0)))
                            (m_1, k_1)))
                     AND (sit__loop(m_1, k_1))))))
          AND
          ((((LAMBDA (m, k): k = n))(m_0, k_0)) =>
            sit__fin__post__(m_0, k_0)))

Rerunning step: (uid "min:context/min:procedure/loop:situation/trs1:transition;")
Adding comment: min:context/min:procedure/loop:situation/trs1:transition;
this simplifies to: 
cc__loop : 
;;; min:context/min:procedure/loop:situation/trs1:transition;

  |-------
[1]   sit__loop(m_0, k_0) =>
       (id(((LAMBDA (m, k): k < n OR k = n))(m_0, k_0))) AND
        (((((LAMBDA (m, k): k < n))(m_0, k_0)) =>
           (id(((LAMBDA (m, k): a(m) < a(k) OR a(m) >= a(k)))(m_0, k_0)))
            AND
            (((((LAMBDA (m, k): a(m) < a(k)))(m_0, k_0)) =>
               k_1 = (((LAMBDA (m, k): k + 1))(m_0, k_0)):: int =>
                (id(((LAMBDA (m, k): 0 <= n - k))(m_0, k_1))) AND
                 ((id(((LAMBDA (m, k):
                          n - k < ((LAMBDA (m, k): n - k))(m_0, k_0)))
                          (m_0, k_1)))
                   AND (sit__loop(m_0, k_1))))
              AND
              ((((LAMBDA (m, k): a(m) >= a(k)))(m_0, k_0)) =>
                m_1 = (((LAMBDA (m, k): k))(m_0, k_0)):: int =>
                 k_1 = (((LAMBDA (m, k): k + 1))(m_1, k_0)):: int =>
                  (id(((LAMBDA (m, k): 0 <= n - k))(m_1, k_1))) AND
                   ((id(((LAMBDA (m, k):
                            n - k < ((LAMBDA (m, k): n - k))(m_0, k_0)))
                            (m_1, k_1)))
                     AND (sit__loop(m_1, k_1))))))
          AND
          ((((LAMBDA (m, k): k = n))(m_0, k_0)) =>
            sit__fin__post__(m_0, k_0)))

-*-SOCOS-*-
(uid "min:context/min:procedure/loop:situation/trs1:transition;")
-*-*-*-*-*-


nil

No change on: (socos-skip-msg (uid "min:context/min:procedure/loop:situation/trs1:transition;"))
cc__loop : 
;;; min:context/min:procedure/loop:situation/trs1:transition;

  |-------
[1]   sit__loop(m_0, k_0) =>
       (id(((LAMBDA (m, k): k < n OR k = n))(m_0, k_0))) AND
        (((((LAMBDA (m, k): k < n))(m_0, k_0)) =>
           (id(((LAMBDA (m, k): a(m) < a(k) OR a(m) >= a(k)))(m_0, k_0)))
            AND
            (((((LAMBDA (m, k): a(m) < a(k)))(m_0, k_0)) =>
               k_1 = (((LAMBDA (m, k): k + 1))(m_0, k_0)):: int =>
                (id(((LAMBDA (m, k): 0 <= n - k))(m_0, k_1))) AND
                 ((id(((LAMBDA (m, k):
                          n - k < ((LAMBDA (m, k): n - k))(m_0, k_0)))
                          (m_0, k_1)))
                   AND (sit__loop(m_0, k_1))))
              AND
              ((((LAMBDA (m, k): a(m) >= a(k)))(m_0, k_0)) =>
                m_1 = (((LAMBDA (m, k): k))(m_0, k_0)):: int =>
                 k_1 = (((LAMBDA (m, k): k + 1))(m_1, k_0)):: int =>
                  (id(((LAMBDA (m, k): 0 <= n - k))(m_1, k_1))) AND
                   ((id(((LAMBDA (m, k):
                            n - k < ((LAMBDA (m, k): n - k))(m_0, k_0)))
                            (m_1, k_1)))
                     AND (sit__loop(m_1, k_1))))))
          AND
          ((((LAMBDA (m, k): k = n))(m_0, k_0)) =>
            sit__fin__post__(m_0, k_0)))

Postponing cc__loop.

cc__loop : 
;;; min:context/min:procedure/loop:situation/trs1:transition;

  |-------
[1]   sit__loop(m_0, k_0) =>
       (id(((LAMBDA (m, k): k < n OR k = n))(m_0, k_0))) AND
        (((((LAMBDA (m, k): k < n))(m_0, k_0)) =>
           (id(((LAMBDA (m, k): a(m) < a(k) OR a(m) >= a(k)))(m_0, k_0)))
            AND
            (((((LAMBDA (m, k): a(m) < a(k)))(m_0, k_0)) =>
               k_1 = (((LAMBDA (m, k): k + 1))(m_0, k_0)):: int =>
                (id(((LAMBDA (m, k): 0 <= n - k))(m_0, k_1))) AND
                 ((id(((LAMBDA (m, k):
                          n - k < ((LAMBDA (m, k): n - k))(m_0, k_0)))
                          (m_0, k_1)))
                   AND (sit__loop(m_0, k_1))))
              AND
              ((((LAMBDA (m, k): a(m) >= a(k)))(m_0, k_0)) =>
                m_1 = (((LAMBDA (m, k): k))(m_0, k_0)):: int =>
                 k_1 = (((LAMBDA (m, k): k + 1))(m_1, k_0)):: int =>
                  (id(((LAMBDA (m, k): 0 <= n - k))(m_1, k_1))) AND
                   ((id(((LAMBDA (m, k):
                            n - k < ((LAMBDA (m, k): n - k))(m_0, k_0)))
                            (m_1, k_1)))
                     AND (sit__loop(m_1, k_1))))))
          AND
          ((((LAMBDA (m, k): k = n))(m_0, k_0)) =>
            sit__fin__post__(m_0, k_0)))

Rerunning step: (flatten-disjunct 1 :depth 1)
Applying disjunctive simplification to flatten sequent,
this simplifies to: 
cc__loop : 
;;; min:context/min:procedure/loop:situation/trs1:transition;

{-1}  sit__loop(m_0, k_0)
  |-------
{1}   (id(((LAMBDA (m, k): k < n OR k = n))(m_0, k_0))) AND
       (((((LAMBDA (m, k): k < n))(m_0, k_0)) =>
          (id(((LAMBDA (m, k): a(m) < a(k) OR a(m) >= a(k)))(m_0, k_0)))
           AND
           (((((LAMBDA (m, k): a(m) < a(k)))(m_0, k_0)) =>
              k_1 = (((LAMBDA (m, k): k + 1))(m_0, k_0)):: int =>
               (id(((LAMBDA (m, k): 0 <= n - k))(m_0, k_1))) AND
                ((id(((LAMBDA (m, k):
                         n - k < ((LAMBDA (m, k): n - k))(m_0, k_0)))
                         (m_0, k_1)))
                  AND (sit__loop(m_0, k_1))))
             AND
             ((((LAMBDA (m, k): a(m) >= a(k)))(m_0, k_0)) =>
               m_1 = (((LAMBDA (m, k): k))(m_0, k_0)):: int =>
                k_1 = (((LAMBDA (m, k): k + 1))(m_1, k_0)):: int =>
                 (id(((LAMBDA (m, k): 0 <= n - k))(m_1, k_1))) AND
                  ((id(((LAMBDA (m, k):
                           n - k < ((LAMBDA (m, k): n - k))(m_0, k_0)))
                           (m_1, k_1)))
                    AND (sit__loop(m_1, k_1))))))
         AND
         ((((LAMBDA (m, k): k = n))(m_0, k_0)) =>
           sit__fin__post__(m_0, k_0)))

Rerunning step: (spread (split 1 :depth 1) ((then (beta 1) (uid "min:context/min:procedure/loop:situation/trs1:transition/loop__stmt1:transition;") (then (expand-nested-defs - (("spec__min__min.pre__" 1 (("sit__ini__" 1))) ("sit__loop" 3) ("spec__min__min.post__" 3 (("sit__fin__post__" 3))))) (flatten-disjunct -) (check-report (skip)))) (then (spread (split-n 2) ((then (uid "min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition;") (flatten-disjunct 1 :depth 1) (spread (split 1 :depth 1) ((then (beta 1) (uid "min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__stmt2:transition;") (then (expand-nested-defs - (("spec__min__min.pre__" 1 (("sit__ini__" 1))) ("sit__loop" 3) ("spec__min__min.post__" 3 (("sit__fin__post__" 3))))) (flatten-disjunct -) (check-report (skip)))) (then (spread (split-n 2) ((then (uid "min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__branch:transition/trs1__branch__trs1__branch__trs1:transition;") (flatten-disjunct 1 :depth 1) (flatten-disjunct 1 :depth 1) (spread (split 1 :depth 1) ((then (beta 1) (uid "min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__branch:transition/trs1__branch__trs1__branch__trs1:transition/trs1__branch__trs1__branch__stmt4:transition;") (then (expand-nested-defs - (("spec__min__min.pre__" 1 (("sit__ini__" 1))) ("sit__loop" 3) ("spec__min__min.post__" 3 (("sit__fin__post__" 3))))) (flatten-disjunct -) (check-report (skip)))) (then (spread (split 1 :depth 1) ((then (beta 1) (uid "min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__branch:transition/trs1__branch__trs1__branch__trs1:transition/trs1__branch__trs1__branch__stmt5:transition;") (then (expand-nested-defs - (("spec__min__min.pre__" 1 (("sit__ini__" 1))) ("sit__loop" 3) ("spec__min__min.post__" 3 (("sit__fin__post__" 3))))) (flatten-disjunct -) (check-report (skip)))) (then (then (uid "min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__branch:transition/trs1__branch__trs1__branch__trs1:transition/trs1__branch__trs1__branch__trs1__goto:transition;") (expand-defs (("spec__min__min.pre__" 1 (("sit__ini__" 1))) ("sit__loop" 3) ("spec__min__min.post__" 3 (("sit__fin__post__" 3))))) (spread (split-n 3) ((then (uid "min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__branch:transition/trs1__branch__trs1__branch__trs1:transition/trs1__branch__trs1__branch__trs1__goto:transition/trs1__branch__trs1__branch__trs1__goto_check_loop_1:transition;") (check-report (skip))) (then (uid "min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__branch:transition/trs1__branch__trs1__branch__trs1:transition/trs1__branch__trs1__branch__trs1__goto:transition/trs1__branch__trs1__branch__trs1__goto_check_loop_2:transition;") (check-report (skip))) (then (uid "min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__branch:transition/trs1__branch__trs1__branch__trs1:transition/trs1__branch__trs1__branch__trs1__goto:transition/trs1__branch__trs1__branch__trs1__goto_check_loop_3:transition;") (check-report (skip))))))))))))) (then (uid "min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__branch:transition/trs1__branch__trs1__branch__trs2:transition;") (flatten-disjunct 1 :depth 1) (flatten-disjunct 1 :depth 1) (flatten-disjunct 1 :depth 1) (spread (split 1 :depth 1) ((then (beta 1) (uid "min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__branch:transition/trs1__branch__trs1__branch__trs2:transition/trs1__branch__trs1__branch__stmt6:transition;") (then (expand-nested-defs - (("spec__min__min.pre__" 1 (("sit__ini__" 1))) ("sit__loop" 3) ("spec__min__min.post__" 3 (("sit__fin__post__" 3))))) (flatten-disjunct -) (check-report (skip)))) (then (spread (split 1 :depth 1) ((then (beta 1) (uid "min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__branch:transition/trs1__branch__trs1__branch__trs2:transition/trs1__branch__trs1__branch__stmt7:transition;") (then (expand-nested-defs - (("spec__min__min.pre__" 1 (("sit__ini__" 1))) ("sit__loop" 3) ("spec__min__min.post__" 3 (("sit__fin__post__" 3))))) (flatten-disjunct -) (check-report (skip)))) (then (then (uid "min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__branch:transition/trs1__branch__trs1__branch__trs2:transition/trs1__branch__trs1__branch__trs2__goto:transition;") (expand-defs (("spec__min__min.pre__" 1 (("sit__ini__" 1))) ("sit__loop" 3) ("spec__min__min.post__" 3 (("sit__fin__post__" 3))))) (spread (split-n 3) ((then (uid "min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__branch:transition/trs1__branch__trs1__branch__trs2:transition/trs1__branch__trs1__branch__trs2__goto:transition/trs1__branch__trs1__branch__trs2__goto_check_loop_1:transition;") (check-report (skip))) (then (uid "min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__branch:transition/trs1__branch__trs1__branch__trs2:transition/trs1__branch__trs1__branch__trs2__goto:transition/trs1__branch__trs1__branch__trs2__goto_check_loop_2:transition;") (check-report (skip))) (then (uid "min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__branch:transition/trs1__branch__trs1__branch__trs2:transition/trs1__branch__trs1__branch__trs2__goto:transition/trs1__branch__trs1__branch__trs2__goto_check_loop_3:transition;") (check-report (skip))))))))))))))))))) (then (uid "min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs2:transition;") (flatten-disjunct 1 :depth 1) (then (uid "min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs2:transition/trs1__branch__trs2__goto:transition;") (expand-defs (("spec__min__min.pre__" 1 (("sit__ini__" 1))) ("sit__loop" 3) ("spec__min__min.post__" 3 (("sit__fin__post__" 3))))) (spread (split-n 3) ((then (uid "min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs2:transition/trs1__branch__trs2__goto:transition/trs1__branch__trs2__goto_check_post___1:transition;") (check-report (skip))) (then (uid "min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs2:transition/trs1__branch__trs2__goto:transition/trs1__branch__trs2__goto_check_post___2:transition;") (check-report (skip))) (then (uid "min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs2:transition/trs1__branch__trs2__goto:transition/trs1__branch__trs2__goto_check_post___3:transition;") (check-report (skip))))))))))))
Splitting conjunctions,
this yields  2 subgoals: 
cc__loop.1 : 
;;; min:context/min:procedure/loop:situation/trs1:transition;

[-1]  sit__loop(m_0, k_0)
  |-------
{1}   (id(((LAMBDA (m, k): k < n OR k = n))(m_0, k_0)))

Applying beta-reduction,
this simplifies to: 
cc__loop.1 : 
;;; min:context/min:procedure/loop:situation/trs1:transition;

[-1]  sit__loop(m_0, k_0)
  |-------
{1}   (id(k_0 < n OR k_0 = n))

Adding comment: min:context/min:procedure/loop:situation/trs1:transition/loop__stmt1:transition;
this simplifies to: 
cc__loop.1 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/loop__stmt1:transition;

[-1]  sit__loop(m_0, k_0)
  |-------
[1]   (id(k_0 < n OR k_0 = n))

-*-SOCOS-*-
(uid "min:context/min:procedure/loop:situation/trs1:transition/loop__stmt1:transition;")
-*-*-*-*-*-


nil

No change on: (socos-skip-msg (uid "min:context/min:procedure/loop:situation/trs1:transition/loop__stmt1:transition;"))
cc__loop.1 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/loop__stmt1:transition;

[-1]  sit__loop(m_0, k_0)
  |-------
[1]   (id(k_0 < n OR k_0 = n))

Postponing cc__loop.1.

cc__loop.1 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/loop__stmt1:transition;

[-1]  sit__loop(m_0, k_0)
  |-------
[1]   (id(k_0 < n OR k_0 = n))

Expanding all definitions,
this simplifies to: 
cc__loop.1 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/loop__stmt1:transition;

{-1}  (id(0 < k_0 AND k_0 <= n)) AND
       (id(0 <= m_0 AND m_0 < k_0)) AND
        (id(FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)))
  |-------
[1]   (id(k_0 < n OR k_0 = n))

Applying disjunctive simplification to flatten sequent,
this simplifies to: 
cc__loop.1 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/loop__stmt1:transition;

{-1}  (id(0 < k_0 AND k_0 <= n))
{-2}  (id(0 <= m_0 AND m_0 < k_0))
{-3}  (id(FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)))
  |-------
[1]   (id(k_0 < n OR k_0 = n))

-*-SOCOS-*-
(check-condition "min:context/min:procedure/loop:situation/trs1:transition/loop__stmt1:transition;")
-*-*-*-*-*-


nil

No change on: (socos-skip-msg (check-condition "min:context/min:procedure/loop:situation/trs1:transition/loop__stmt1:transition;"))
cc__loop.1 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/loop__stmt1:transition;

{-1}  (id(0 < k_0 AND k_0 <= n))
{-2}  (id(0 <= m_0 AND m_0 < k_0))
{-3}  (id(FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)))
  |-------
[1]   (id(k_0 < n OR k_0 = n))

Expanding the definition of id,
this simplifies to: 
cc__loop.1 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/loop__stmt1:transition;

{-1}  0 < k_0 AND k_0 <= n
{-2}  0 <= m_0 AND m_0 < k_0
{-3}  FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)
  |-------
{1}   k_0 < n OR k_0 = n

nil

cc__loop.1 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/loop__stmt1:transition;

{-1}  0 < k_0 AND k_0 <= n
{-2}  0 <= m_0 AND m_0 < k_0
{-3}  FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)
  |-------
{1}   k_0 < n OR k_0 = n

No suitable redexes found.
No change on: (beta)
cc__loop.1 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/loop__stmt1:transition;

{-1}  0 < k_0 AND k_0 <= n
{-2}  0 <= m_0 AND m_0 < k_0
{-3}  FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)
  |-------
{1}   k_0 < n OR k_0 = n

No change on: (skip)
cc__loop.1 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/loop__stmt1:transition;

[-1]  0 < k_0 AND k_0 <= n
[-2]  0 <= m_0 AND m_0 < k_0
[-3]  FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)
  |-------
[1]   k_0 < n OR k_0 = n


Attempted proof of cc__loop.1 failed.

Attempted proof of cc__loop.1 failed.
cc__loop.1 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/loop__stmt1:transition;

{-1}  0 < k_0 AND k_0 <= n
{-2}  0 <= m_0 AND m_0 < k_0
{-3}  FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)
  |-------
{1}   k_0 < n OR k_0 = n

-*-SOCOS-*-
(left-condition (sequent ("0 < k_0 AND k_0 <= n" "0 <= m_0 AND m_0 < k_0" "FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)") ("k_0 < n OR k_0 = n")))
-*-*-*-*-*-


nil

No change on: (socos-skip-msg (left-condition (sequent ("0 < k_0 AND k_0 <= n" "0 <= m_0 AND m_0 < k_0" "FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)") ("k_0 < n OR k_0 = n"))))
cc__loop.1 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/loop__stmt1:transition;

{-1}  0 < k_0 AND k_0 <= n
{-2}  0 <= m_0 AND m_0 < k_0
{-3}  FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)
  |-------
{1}   k_0 < n OR k_0 = n

nil

cc__loop.1 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/loop__stmt1:transition;

{-1}  0 < k_0 AND k_0 <= n
{-2}  0 <= m_0 AND m_0 < k_0
{-3}  FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)
  |-------
{1}   k_0 < n OR k_0 = n

Postponing cc__loop.1.

cc__loop.2 : 
;;; min:context/min:procedure/loop:situation/trs1:transition;

[-1]  sit__loop(m_0, k_0)
  |-------
{1}   (((((LAMBDA (m, k): k < n))(m_0, k_0)) =>
         (id(((LAMBDA (m, k): a(m) < a(k) OR a(m) >= a(k)))(m_0, k_0))) AND
          (((((LAMBDA (m, k): a(m) < a(k)))(m_0, k_0)) =>
             k_1 = (((LAMBDA (m, k): k + 1))(m_0, k_0)):: int =>
              (id(((LAMBDA (m, k): 0 <= n - k))(m_0, k_1))) AND
               ((id(((LAMBDA (m, k):
                        n - k < ((LAMBDA (m, k): n - k))(m_0, k_0)))
                        (m_0, k_1)))
                 AND (sit__loop(m_0, k_1))))
            AND
            ((((LAMBDA (m, k): a(m) >= a(k)))(m_0, k_0)) =>
              m_1 = (((LAMBDA (m, k): k))(m_0, k_0)):: int =>
               k_1 = (((LAMBDA (m, k): k + 1))(m_1, k_0)):: int =>
                (id(((LAMBDA (m, k): 0 <= n - k))(m_1, k_1))) AND
                 ((id(((LAMBDA (m, k):
                          n - k < ((LAMBDA (m, k): n - k))(m_0, k_0)))
                          (m_1, k_1)))
                   AND (sit__loop(m_1, k_1))))))
        AND
        ((((LAMBDA (m, k): k = n))(m_0, k_0)) =>
          sit__fin__post__(m_0, k_0)))

Splitting conjunction into branches,
this yields  2 subgoals: 
cc__loop.2.1 : 
;;; min:context/min:procedure/loop:situation/trs1:transition;

[-1]  sit__loop(m_0, k_0)
  |-------
{1}   ((((LAMBDA (m, k): k < n))(m_0, k_0)) =>
        (id(((LAMBDA (m, k): a(m) < a(k) OR a(m) >= a(k)))(m_0, k_0))) AND
         (((((LAMBDA (m, k): a(m) < a(k)))(m_0, k_0)) =>
            k_1 = (((LAMBDA (m, k): k + 1))(m_0, k_0)):: int =>
             (id(((LAMBDA (m, k): 0 <= n - k))(m_0, k_1))) AND
              ((id(((LAMBDA (m, k):
                       n - k < ((LAMBDA (m, k): n - k))(m_0, k_0)))
                       (m_0, k_1)))
                AND (sit__loop(m_0, k_1))))
           AND
           ((((LAMBDA (m, k): a(m) >= a(k)))(m_0, k_0)) =>
             m_1 = (((LAMBDA (m, k): k))(m_0, k_0)):: int =>
              k_1 = (((LAMBDA (m, k): k + 1))(m_1, k_0)):: int =>
               (id(((LAMBDA (m, k): 0 <= n - k))(m_1, k_1))) AND
                ((id(((LAMBDA (m, k):
                         n - k < ((LAMBDA (m, k): n - k))(m_0, k_0)))
                         (m_1, k_1)))
                  AND (sit__loop(m_1, k_1))))))

Adding comment: min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition;
this simplifies to: 
cc__loop.2.1 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition;

[-1]  sit__loop(m_0, k_0)
  |-------
[1]   ((((LAMBDA (m, k): k < n))(m_0, k_0)) =>
        (id(((LAMBDA (m, k): a(m) < a(k) OR a(m) >= a(k)))(m_0, k_0))) AND
         (((((LAMBDA (m, k): a(m) < a(k)))(m_0, k_0)) =>
            k_1 = (((LAMBDA (m, k): k + 1))(m_0, k_0)):: int =>
             (id(((LAMBDA (m, k): 0 <= n - k))(m_0, k_1))) AND
              ((id(((LAMBDA (m, k):
                       n - k < ((LAMBDA (m, k): n - k))(m_0, k_0)))
                       (m_0, k_1)))
                AND (sit__loop(m_0, k_1))))
           AND
           ((((LAMBDA (m, k): a(m) >= a(k)))(m_0, k_0)) =>
             m_1 = (((LAMBDA (m, k): k))(m_0, k_0)):: int =>
              k_1 = (((LAMBDA (m, k): k + 1))(m_1, k_0)):: int =>
               (id(((LAMBDA (m, k): 0 <= n - k))(m_1, k_1))) AND
                ((id(((LAMBDA (m, k):
                         n - k < ((LAMBDA (m, k): n - k))(m_0, k_0)))
                         (m_1, k_1)))
                  AND (sit__loop(m_1, k_1))))))

-*-SOCOS-*-
(uid "min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition;")
-*-*-*-*-*-


nil

No change on: (socos-skip-msg (uid "min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition;"))
cc__loop.2.1 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition;

[-1]  sit__loop(m_0, k_0)
  |-------
[1]   ((((LAMBDA (m, k): k < n))(m_0, k_0)) =>
        (id(((LAMBDA (m, k): a(m) < a(k) OR a(m) >= a(k)))(m_0, k_0))) AND
         (((((LAMBDA (m, k): a(m) < a(k)))(m_0, k_0)) =>
            k_1 = (((LAMBDA (m, k): k + 1))(m_0, k_0)):: int =>
             (id(((LAMBDA (m, k): 0 <= n - k))(m_0, k_1))) AND
              ((id(((LAMBDA (m, k):
                       n - k < ((LAMBDA (m, k): n - k))(m_0, k_0)))
                       (m_0, k_1)))
                AND (sit__loop(m_0, k_1))))
           AND
           ((((LAMBDA (m, k): a(m) >= a(k)))(m_0, k_0)) =>
             m_1 = (((LAMBDA (m, k): k))(m_0, k_0)):: int =>
              k_1 = (((LAMBDA (m, k): k + 1))(m_1, k_0)):: int =>
               (id(((LAMBDA (m, k): 0 <= n - k))(m_1, k_1))) AND
                ((id(((LAMBDA (m, k):
                         n - k < ((LAMBDA (m, k): n - k))(m_0, k_0)))
                         (m_1, k_1)))
                  AND (sit__loop(m_1, k_1))))))

Postponing cc__loop.2.1.

cc__loop.2.1 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition;

[-1]  sit__loop(m_0, k_0)
  |-------
[1]   ((((LAMBDA (m, k): k < n))(m_0, k_0)) =>
        (id(((LAMBDA (m, k): a(m) < a(k) OR a(m) >= a(k)))(m_0, k_0))) AND
         (((((LAMBDA (m, k): a(m) < a(k)))(m_0, k_0)) =>
            k_1 = (((LAMBDA (m, k): k + 1))(m_0, k_0)):: int =>
             (id(((LAMBDA (m, k): 0 <= n - k))(m_0, k_1))) AND
              ((id(((LAMBDA (m, k):
                       n - k < ((LAMBDA (m, k): n - k))(m_0, k_0)))
                       (m_0, k_1)))
                AND (sit__loop(m_0, k_1))))
           AND
           ((((LAMBDA (m, k): a(m) >= a(k)))(m_0, k_0)) =>
             m_1 = (((LAMBDA (m, k): k))(m_0, k_0)):: int =>
              k_1 = (((LAMBDA (m, k): k + 1))(m_1, k_0)):: int =>
               (id(((LAMBDA (m, k): 0 <= n - k))(m_1, k_1))) AND
                ((id(((LAMBDA (m, k):
                         n - k < ((LAMBDA (m, k): n - k))(m_0, k_0)))
                         (m_1, k_1)))
                  AND (sit__loop(m_1, k_1))))))

Applying disjunctive simplification to flatten sequent,
this simplifies to: 
cc__loop.2.1 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition;

{-1}  (((LAMBDA (m, k): k < n))(m_0, k_0))
[-2]  sit__loop(m_0, k_0)
  |-------
{1}   (id(((LAMBDA (m, k): a(m) < a(k) OR a(m) >= a(k)))(m_0, k_0))) AND
       (((((LAMBDA (m, k): a(m) < a(k)))(m_0, k_0)) =>
          k_1 = (((LAMBDA (m, k): k + 1))(m_0, k_0)):: int =>
           (id(((LAMBDA (m, k): 0 <= n - k))(m_0, k_1))) AND
            ((id(((LAMBDA (m, k):
                     n - k < ((LAMBDA (m, k): n - k))(m_0, k_0)))
                     (m_0, k_1)))
              AND (sit__loop(m_0, k_1))))
         AND
         ((((LAMBDA (m, k): a(m) >= a(k)))(m_0, k_0)) =>
           m_1 = (((LAMBDA (m, k): k))(m_0, k_0)):: int =>
            k_1 = (((LAMBDA (m, k): k + 1))(m_1, k_0)):: int =>
             (id(((LAMBDA (m, k): 0 <= n - k))(m_1, k_1))) AND
              ((id(((LAMBDA (m, k):
                       n - k < ((LAMBDA (m, k): n - k))(m_0, k_0)))
                       (m_1, k_1)))
                AND (sit__loop(m_1, k_1)))))

Splitting conjunctions,
this yields  2 subgoals: 
cc__loop.2.1.1 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition;

[-1]  (((LAMBDA (m, k): k < n))(m_0, k_0))
[-2]  sit__loop(m_0, k_0)
  |-------
{1}   (id(((LAMBDA (m, k): a(m) < a(k) OR a(m) >= a(k)))(m_0, k_0)))

Applying beta-reduction,
this simplifies to: 
cc__loop.2.1.1 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition;

[-1]  (((LAMBDA (m, k): k < n))(m_0, k_0))
[-2]  sit__loop(m_0, k_0)
  |-------
{1}   (id(a(m_0) < a(k_0) OR a(m_0) >= a(k_0)))

Adding comment: min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__stmt2:transition;
this simplifies to: 
cc__loop.2.1.1 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__stmt2:transition;

[-1]  (((LAMBDA (m, k): k < n))(m_0, k_0))
[-2]  sit__loop(m_0, k_0)
  |-------
[1]   (id(a(m_0) < a(k_0) OR a(m_0) >= a(k_0)))

-*-SOCOS-*-
(uid "min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__stmt2:transition;")
-*-*-*-*-*-


nil

No change on: (socos-skip-msg (uid "min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__stmt2:transition;"))
cc__loop.2.1.1 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__stmt2:transition;

[-1]  (((LAMBDA (m, k): k < n))(m_0, k_0))
[-2]  sit__loop(m_0, k_0)
  |-------
[1]   (id(a(m_0) < a(k_0) OR a(m_0) >= a(k_0)))

Postponing cc__loop.2.1.1.

cc__loop.2.1.1 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__stmt2:transition;

[-1]  (((LAMBDA (m, k): k < n))(m_0, k_0))
[-2]  sit__loop(m_0, k_0)
  |-------
[1]   (id(a(m_0) < a(k_0) OR a(m_0) >= a(k_0)))

Expanding all definitions,
this simplifies to: 
cc__loop.2.1.1 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__stmt2:transition;

[-1]  (((LAMBDA (m, k): k < n))(m_0, k_0))
{-2}  (id(0 < k_0 AND k_0 <= n)) AND
       (id(0 <= m_0 AND m_0 < k_0)) AND
        (id(FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)))
  |-------
[1]   (id(a(m_0) < a(k_0) OR a(m_0) >= a(k_0)))

Applying disjunctive simplification to flatten sequent,
this simplifies to: 
cc__loop.2.1.1 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__stmt2:transition;

[-1]  (((LAMBDA (m, k): k < n))(m_0, k_0))
{-2}  (id(0 < k_0 AND k_0 <= n))
{-3}  (id(0 <= m_0 AND m_0 < k_0))
{-4}  (id(FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)))
  |-------
[1]   (id(a(m_0) < a(k_0) OR a(m_0) >= a(k_0)))

-*-SOCOS-*-
(check-condition "min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__stmt2:transition;")
-*-*-*-*-*-


nil

No change on: (socos-skip-msg (check-condition "min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__stmt2:transition;"))
cc__loop.2.1.1 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__stmt2:transition;

[-1]  (((LAMBDA (m, k): k < n))(m_0, k_0))
{-2}  (id(0 < k_0 AND k_0 <= n))
{-3}  (id(0 <= m_0 AND m_0 < k_0))
{-4}  (id(FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)))
  |-------
[1]   (id(a(m_0) < a(k_0) OR a(m_0) >= a(k_0)))

Expanding the definition of id,
this simplifies to: 
cc__loop.2.1.1 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__stmt2:transition;

[-1]  (((LAMBDA (m, k): k < n))(m_0, k_0))
{-2}  0 < k_0 AND k_0 <= n
{-3}  0 <= m_0 AND m_0 < k_0
{-4}  FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)
  |-------
{1}   a(m_0) < a(k_0) OR a(m_0) >= a(k_0)

nil

cc__loop.2.1.1 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__stmt2:transition;

[-1]  (((LAMBDA (m, k): k < n))(m_0, k_0))
{-2}  0 < k_0 AND k_0 <= n
{-3}  0 <= m_0 AND m_0 < k_0
{-4}  FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)
  |-------
{1}   a(m_0) < a(k_0) OR a(m_0) >= a(k_0)

Applying beta-reduction,
this simplifies to: 
cc__loop.2.1.1 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__stmt2:transition;

{-1}  k_0 < n
[-2]  0 < k_0 AND k_0 <= n
[-3]  0 <= m_0 AND m_0 < k_0
[-4]  FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)
  |-------
[1]   a(m_0) < a(k_0) OR a(m_0) >= a(k_0)

No change on: (skip)
cc__loop.2.1.1 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__stmt2:transition;

[-1]  k_0 < n
[-2]  0 < k_0 AND k_0 <= n
[-3]  0 <= m_0 AND m_0 < k_0
[-4]  FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)
  |-------
[1]   a(m_0) < a(k_0) OR a(m_0) >= a(k_0)


Attempted proof of cc__loop.2.1.1 failed.

Attempted proof of cc__loop.2.1.1 failed.
cc__loop.2.1.1 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__stmt2:transition;

{-1}  k_0 < n
[-2]  0 < k_0 AND k_0 <= n
[-3]  0 <= m_0 AND m_0 < k_0
[-4]  FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)
  |-------
[1]   a(m_0) < a(k_0) OR a(m_0) >= a(k_0)

-*-SOCOS-*-
(left-condition (sequent ("k_0 < n" "0 < k_0 AND k_0 <= n" "0 <= m_0 AND m_0 < k_0" "FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)") ("a(m_0) < a(k_0) OR a(m_0) >= a(k_0)")))
-*-*-*-*-*-


nil

No change on: (socos-skip-msg (left-condition (sequent ("k_0 < n" "0 < k_0 AND k_0 <= n" "0 <= m_0 AND m_0 < k_0" "FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)") ("a(m_0) < a(k_0) OR a(m_0) >= a(k_0)"))))
cc__loop.2.1.1 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__stmt2:transition;

{-1}  k_0 < n
[-2]  0 < k_0 AND k_0 <= n
[-3]  0 <= m_0 AND m_0 < k_0
[-4]  FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)
  |-------
[1]   a(m_0) < a(k_0) OR a(m_0) >= a(k_0)

nil

cc__loop.2.1.1 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__stmt2:transition;

{-1}  k_0 < n
[-2]  0 < k_0 AND k_0 <= n
[-3]  0 <= m_0 AND m_0 < k_0
[-4]  FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)
  |-------
[1]   a(m_0) < a(k_0) OR a(m_0) >= a(k_0)

Postponing cc__loop.2.1.1.

cc__loop.2.1.2 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition;

[-1]  (((LAMBDA (m, k): k < n))(m_0, k_0))
[-2]  sit__loop(m_0, k_0)
  |-------
{1}   (((((LAMBDA (m, k): a(m) < a(k)))(m_0, k_0)) =>
         k_1 = (((LAMBDA (m, k): k + 1))(m_0, k_0)):: int =>
          (id(((LAMBDA (m, k): 0 <= n - k))(m_0, k_1))) AND
           ((id(((LAMBDA (m, k):
                    n - k < ((LAMBDA (m, k): n - k))(m_0, k_0)))
                    (m_0, k_1)))
             AND (sit__loop(m_0, k_1))))
        AND
        ((((LAMBDA (m, k): a(m) >= a(k)))(m_0, k_0)) =>
          m_1 = (((LAMBDA (m, k): k))(m_0, k_0)):: int =>
           k_1 = (((LAMBDA (m, k): k + 1))(m_1, k_0)):: int =>
            (id(((LAMBDA (m, k): 0 <= n - k))(m_1, k_1))) AND
             ((id(((LAMBDA (m, k):
                      n - k < ((LAMBDA (m, k): n - k))(m_0, k_0)))
                      (m_1, k_1)))
               AND (sit__loop(m_1, k_1)))))

Splitting conjunction into branches,
this yields  2 subgoals: 
cc__loop.2.1.2.1 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition;

[-1]  (((LAMBDA (m, k): k < n))(m_0, k_0))
[-2]  sit__loop(m_0, k_0)
  |-------
{1}   ((((LAMBDA (m, k): a(m) < a(k)))(m_0, k_0)) =>
        k_1 = (((LAMBDA (m, k): k + 1))(m_0, k_0)):: int =>
         (id(((LAMBDA (m, k): 0 <= n - k))(m_0, k_1))) AND
          ((id(((LAMBDA (m, k): n - k < ((LAMBDA (m, k): n - k))(m_0, k_0)))
                   (m_0, k_1)))
            AND (sit__loop(m_0, k_1))))

Adding comment: min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__branch:transition/trs1__branch__trs1__branch__trs1:transition;
this simplifies to: 
cc__loop.2.1.2.1 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__branch:transition/trs1__branch__trs1__branch__trs1:transition;

[-1]  (((LAMBDA (m, k): k < n))(m_0, k_0))
[-2]  sit__loop(m_0, k_0)
  |-------
[1]   ((((LAMBDA (m, k): a(m) < a(k)))(m_0, k_0)) =>
        k_1 = (((LAMBDA (m, k): k + 1))(m_0, k_0)):: int =>
         (id(((LAMBDA (m, k): 0 <= n - k))(m_0, k_1))) AND
          ((id(((LAMBDA (m, k): n - k < ((LAMBDA (m, k): n - k))(m_0, k_0)))
                   (m_0, k_1)))
            AND (sit__loop(m_0, k_1))))

-*-SOCOS-*-
(uid "min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__branch:transition/trs1__branch__trs1__branch__trs1:transition;")
-*-*-*-*-*-


nil

No change on: (socos-skip-msg (uid "min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__branch:transition/trs1__branch__trs1__branch__trs1:transition;"))
cc__loop.2.1.2.1 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__branch:transition/trs1__branch__trs1__branch__trs1:transition;

[-1]  (((LAMBDA (m, k): k < n))(m_0, k_0))
[-2]  sit__loop(m_0, k_0)
  |-------
[1]   ((((LAMBDA (m, k): a(m) < a(k)))(m_0, k_0)) =>
        k_1 = (((LAMBDA (m, k): k + 1))(m_0, k_0)):: int =>
         (id(((LAMBDA (m, k): 0 <= n - k))(m_0, k_1))) AND
          ((id(((LAMBDA (m, k): n - k < ((LAMBDA (m, k): n - k))(m_0, k_0)))
                   (m_0, k_1)))
            AND (sit__loop(m_0, k_1))))

Postponing cc__loop.2.1.2.1.

cc__loop.2.1.2.1 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__branch:transition/trs1__branch__trs1__branch__trs1:transition;

[-1]  (((LAMBDA (m, k): k < n))(m_0, k_0))
[-2]  sit__loop(m_0, k_0)
  |-------
[1]   ((((LAMBDA (m, k): a(m) < a(k)))(m_0, k_0)) =>
        k_1 = (((LAMBDA (m, k): k + 1))(m_0, k_0)):: int =>
         (id(((LAMBDA (m, k): 0 <= n - k))(m_0, k_1))) AND
          ((id(((LAMBDA (m, k): n - k < ((LAMBDA (m, k): n - k))(m_0, k_0)))
                   (m_0, k_1)))
            AND (sit__loop(m_0, k_1))))

Applying disjunctive simplification to flatten sequent,
this simplifies to: 
cc__loop.2.1.2.1 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__branch:transition/trs1__branch__trs1__branch__trs1:transition;

{-1}  (((LAMBDA (m, k): a(m) < a(k)))(m_0, k_0))
[-2]  (((LAMBDA (m, k): k < n))(m_0, k_0))
[-3]  sit__loop(m_0, k_0)
  |-------
{1}   k_1 = (((LAMBDA (m, k): k + 1))(m_0, k_0)):: int =>
       (id(((LAMBDA (m, k): 0 <= n - k))(m_0, k_1))) AND
        ((id(((LAMBDA (m, k): n - k < ((LAMBDA (m, k): n - k))(m_0, k_0)))
                 (m_0, k_1)))
          AND (sit__loop(m_0, k_1)))

Applying disjunctive simplification to flatten sequent,
this simplifies to: 
cc__loop.2.1.2.1 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__branch:transition/trs1__branch__trs1__branch__trs1:transition;

[-1]  (((LAMBDA (m, k): a(m) < a(k)))(m_0, k_0))
{-2}  k_1 = (((LAMBDA (m, k): k + 1))(m_0, k_0)):: int
[-3]  (((LAMBDA (m, k): k < n))(m_0, k_0))
[-4]  sit__loop(m_0, k_0)
  |-------
{1}   (id(((LAMBDA (m, k): 0 <= n - k))(m_0, k_1))) AND
       ((id(((LAMBDA (m, k): n - k < ((LAMBDA (m, k): n - k))(m_0, k_0)))
                (m_0, k_1)))
         AND (sit__loop(m_0, k_1)))

Splitting conjunctions,
this yields  2 subgoals: 
cc__loop.2.1.2.1.1 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__branch:transition/trs1__branch__trs1__branch__trs1:transition;

[-1]  (((LAMBDA (m, k): a(m) < a(k)))(m_0, k_0))
[-2]  k_1 = (((LAMBDA (m, k): k + 1))(m_0, k_0)):: int
[-3]  (((LAMBDA (m, k): k < n))(m_0, k_0))
[-4]  sit__loop(m_0, k_0)
  |-------
{1}   (id(((LAMBDA (m, k): 0 <= n - k))(m_0, k_1)))

Applying beta-reduction,
this simplifies to: 
cc__loop.2.1.2.1.1 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__branch:transition/trs1__branch__trs1__branch__trs1:transition;

[-1]  (((LAMBDA (m, k): a(m) < a(k)))(m_0, k_0))
[-2]  k_1 = (((LAMBDA (m, k): k + 1))(m_0, k_0)):: int
[-3]  (((LAMBDA (m, k): k < n))(m_0, k_0))
[-4]  sit__loop(m_0, k_0)
  |-------
{1}   (id(0 <= n - k_1))

Adding comment: min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__branch:transition/trs1__branch__trs1__branch__trs1:transition/trs1__branch__trs1__branch__stmt4:transition;
this simplifies to: 
cc__loop.2.1.2.1.1 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__branch:transition/trs1__branch__trs1__branch__trs1:transition/trs1__branch__trs1__branch__stmt4:transition;

[-1]  (((LAMBDA (m, k): a(m) < a(k)))(m_0, k_0))
[-2]  k_1 = (((LAMBDA (m, k): k + 1))(m_0, k_0)):: int
[-3]  (((LAMBDA (m, k): k < n))(m_0, k_0))
[-4]  sit__loop(m_0, k_0)
  |-------
[1]   (id(0 <= n - k_1))

-*-SOCOS-*-
(uid "min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__branch:transition/trs1__branch__trs1__branch__trs1:transition/trs1__branch__trs1__branch__stmt4:transition;")
-*-*-*-*-*-


nil

No change on: (socos-skip-msg (uid "min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__branch:transition/trs1__branch__trs1__branch__trs1:transition/trs1__branch__trs1__branch__stmt4:transition;"))
cc__loop.2.1.2.1.1 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__branch:transition/trs1__branch__trs1__branch__trs1:transition/trs1__branch__trs1__branch__stmt4:transition;

[-1]  (((LAMBDA (m, k): a(m) < a(k)))(m_0, k_0))
[-2]  k_1 = (((LAMBDA (m, k): k + 1))(m_0, k_0)):: int
[-3]  (((LAMBDA (m, k): k < n))(m_0, k_0))
[-4]  sit__loop(m_0, k_0)
  |-------
[1]   (id(0 <= n - k_1))

Postponing cc__loop.2.1.2.1.1.

cc__loop.2.1.2.1.1 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__branch:transition/trs1__branch__trs1__branch__trs1:transition/trs1__branch__trs1__branch__stmt4:transition;

[-1]  (((LAMBDA (m, k): a(m) < a(k)))(m_0, k_0))
[-2]  k_1 = (((LAMBDA (m, k): k + 1))(m_0, k_0)):: int
[-3]  (((LAMBDA (m, k): k < n))(m_0, k_0))
[-4]  sit__loop(m_0, k_0)
  |-------
[1]   (id(0 <= n - k_1))

Expanding all definitions,
this simplifies to: 
cc__loop.2.1.2.1.1 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__branch:transition/trs1__branch__trs1__branch__trs1:transition/trs1__branch__trs1__branch__stmt4:transition;

[-1]  (((LAMBDA (m, k): a(m) < a(k)))(m_0, k_0))
[-2]  k_1 = (((LAMBDA (m, k): k + 1))(m_0, k_0)):: int
[-3]  (((LAMBDA (m, k): k < n))(m_0, k_0))
{-4}  (id(0 < k_0 AND k_0 <= n)) AND
       (id(0 <= m_0 AND m_0 < k_0)) AND
        (id(FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)))
  |-------
[1]   (id(0 <= n - k_1))

Applying disjunctive simplification to flatten sequent,
this simplifies to: 
cc__loop.2.1.2.1.1 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__branch:transition/trs1__branch__trs1__branch__trs1:transition/trs1__branch__trs1__branch__stmt4:transition;

[-1]  (((LAMBDA (m, k): a(m) < a(k)))(m_0, k_0))
[-2]  k_1 = (((LAMBDA (m, k): k + 1))(m_0, k_0)):: int
[-3]  (((LAMBDA (m, k): k < n))(m_0, k_0))
{-4}  (id(0 < k_0 AND k_0 <= n))
{-5}  (id(0 <= m_0 AND m_0 < k_0))
{-6}  (id(FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)))
  |-------
[1]   (id(0 <= n - k_1))

-*-SOCOS-*-
(check-condition "min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__branch:transition/trs1__branch__trs1__branch__trs1:transition/trs1__branch__trs1__branch__stmt4:transition;")
-*-*-*-*-*-


nil

No change on: (socos-skip-msg (check-condition "min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__branch:transition/trs1__branch__trs1__branch__trs1:transition/trs1__branch__trs1__branch__stmt4:transition;"))
cc__loop.2.1.2.1.1 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__branch:transition/trs1__branch__trs1__branch__trs1:transition/trs1__branch__trs1__branch__stmt4:transition;

[-1]  (((LAMBDA (m, k): a(m) < a(k)))(m_0, k_0))
[-2]  k_1 = (((LAMBDA (m, k): k + 1))(m_0, k_0)):: int
[-3]  (((LAMBDA (m, k): k < n))(m_0, k_0))
{-4}  (id(0 < k_0 AND k_0 <= n))
{-5}  (id(0 <= m_0 AND m_0 < k_0))
{-6}  (id(FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)))
  |-------
[1]   (id(0 <= n - k_1))

Expanding the definition of id,
this simplifies to: 
cc__loop.2.1.2.1.1 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__branch:transition/trs1__branch__trs1__branch__trs1:transition/trs1__branch__trs1__branch__stmt4:transition;

[-1]  (((LAMBDA (m, k): a(m) < a(k)))(m_0, k_0))
[-2]  k_1 = (((LAMBDA (m, k): k + 1))(m_0, k_0)):: int
[-3]  (((LAMBDA (m, k): k < n))(m_0, k_0))
{-4}  0 < k_0 AND k_0 <= n
{-5}  0 <= m_0 AND m_0 < k_0
{-6}  FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)
  |-------
{1}   0 <= n - k_1

nil

cc__loop.2.1.2.1.1 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__branch:transition/trs1__branch__trs1__branch__trs1:transition/trs1__branch__trs1__branch__stmt4:transition;

[-1]  (((LAMBDA (m, k): a(m) < a(k)))(m_0, k_0))
[-2]  k_1 = (((LAMBDA (m, k): k + 1))(m_0, k_0)):: int
[-3]  (((LAMBDA (m, k): k < n))(m_0, k_0))
{-4}  0 < k_0 AND k_0 <= n
{-5}  0 <= m_0 AND m_0 < k_0
{-6}  FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)
  |-------
{1}   0 <= n - k_1

Applying beta-reduction,
this simplifies to: 
cc__loop.2.1.2.1.1 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__branch:transition/trs1__branch__trs1__branch__trs1:transition/trs1__branch__trs1__branch__stmt4:transition;

{-1}  a(m_0) < a(k_0)
{-2}  k_1 = k_0 + 1
{-3}  k_0 < n
[-4]  0 < k_0 AND k_0 <= n
[-5]  0 <= m_0 AND m_0 < k_0
[-6]  FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)
  |-------
[1]   0 <= n - k_1

No change on: (skip)
cc__loop.2.1.2.1.1 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__branch:transition/trs1__branch__trs1__branch__trs1:transition/trs1__branch__trs1__branch__stmt4:transition;

[-1]  a(m_0) < a(k_0)
[-2]  k_1 = k_0 + 1
[-3]  k_0 < n
[-4]  0 < k_0 AND k_0 <= n
[-5]  0 <= m_0 AND m_0 < k_0
[-6]  FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)
  |-------
[1]   0 <= n - k_1


Attempted proof of cc__loop.2.1.2.1.1 failed.

Attempted proof of cc__loop.2.1.2.1.1 failed.
cc__loop.2.1.2.1.1 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__branch:transition/trs1__branch__trs1__branch__trs1:transition/trs1__branch__trs1__branch__stmt4:transition;

{-1}  a(m_0) < a(k_0)
{-2}  k_1 = k_0 + 1
{-3}  k_0 < n
[-4]  0 < k_0 AND k_0 <= n
[-5]  0 <= m_0 AND m_0 < k_0
[-6]  FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)
  |-------
[1]   0 <= n - k_1

-*-SOCOS-*-
(left-condition (sequent ("a(m_0) < a(k_0)" "k_1 = k_0 + 1" "k_0 < n" "0 < k_0 AND k_0 <= n" "0 <= m_0 AND m_0 < k_0" "FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)") ("0 <= n - k_1")))
-*-*-*-*-*-


nil

No change on: (socos-skip-msg (left-condition (sequent ("a(m_0) < a(k_0)" "k_1 = k_0 + 1" "k_0 < n" "0 < k_0 AND k_0 <= n" "0 <= m_0 AND m_0 < k_0" "FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)") ("0 <= n - k_1"))))
cc__loop.2.1.2.1.1 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__branch:transition/trs1__branch__trs1__branch__trs1:transition/trs1__branch__trs1__branch__stmt4:transition;

{-1}  a(m_0) < a(k_0)
{-2}  k_1 = k_0 + 1
{-3}  k_0 < n
[-4]  0 < k_0 AND k_0 <= n
[-5]  0 <= m_0 AND m_0 < k_0
[-6]  FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)
  |-------
[1]   0 <= n - k_1

nil

cc__loop.2.1.2.1.1 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__branch:transition/trs1__branch__trs1__branch__trs1:transition/trs1__branch__trs1__branch__stmt4:transition;

{-1}  a(m_0) < a(k_0)
{-2}  k_1 = k_0 + 1
{-3}  k_0 < n
[-4]  0 < k_0 AND k_0 <= n
[-5]  0 <= m_0 AND m_0 < k_0
[-6]  FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)
  |-------
[1]   0 <= n - k_1

Postponing cc__loop.2.1.2.1.1.

cc__loop.2.1.2.1.2 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__branch:transition/trs1__branch__trs1__branch__trs1:transition;

[-1]  (((LAMBDA (m, k): a(m) < a(k)))(m_0, k_0))
[-2]  k_1 = (((LAMBDA (m, k): k + 1))(m_0, k_0)):: int
[-3]  (((LAMBDA (m, k): k < n))(m_0, k_0))
[-4]  sit__loop(m_0, k_0)
  |-------
{1}   ((id(((LAMBDA (m, k): n - k < ((LAMBDA (m, k): n - k))(m_0, k_0)))
               (m_0, k_1)))
        AND (sit__loop(m_0, k_1)))

Splitting conjunctions,
this yields  2 subgoals: 
cc__loop.2.1.2.1.2.1 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__branch:transition/trs1__branch__trs1__branch__trs1:transition;

[-1]  (((LAMBDA (m, k): a(m) < a(k)))(m_0, k_0))
[-2]  k_1 = (((LAMBDA (m, k): k + 1))(m_0, k_0)):: int
[-3]  (((LAMBDA (m, k): k < n))(m_0, k_0))
[-4]  sit__loop(m_0, k_0)
  |-------
{1}   (id(((LAMBDA (m, k): n - k < ((LAMBDA (m, k): n - k))(m_0, k_0)))
              (m_0, k_1)))

Applying beta-reduction,
this simplifies to: 
cc__loop.2.1.2.1.2.1 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__branch:transition/trs1__branch__trs1__branch__trs1:transition;

[-1]  (((LAMBDA (m, k): a(m) < a(k)))(m_0, k_0))
[-2]  k_1 = (((LAMBDA (m, k): k + 1))(m_0, k_0)):: int
[-3]  (((LAMBDA (m, k): k < n))(m_0, k_0))
[-4]  sit__loop(m_0, k_0)
  |-------
{1}   (id(n - k_1 < n - k_0))

Adding comment: min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__branch:transition/trs1__branch__trs1__branch__trs1:transition/trs1__branch__trs1__branch__stmt5:transition;
this simplifies to: 
cc__loop.2.1.2.1.2.1 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__branch:transition/trs1__branch__trs1__branch__trs1:transition/trs1__branch__trs1__branch__stmt5:transition;

[-1]  (((LAMBDA (m, k): a(m) < a(k)))(m_0, k_0))
[-2]  k_1 = (((LAMBDA (m, k): k + 1))(m_0, k_0)):: int
[-3]  (((LAMBDA (m, k): k < n))(m_0, k_0))
[-4]  sit__loop(m_0, k_0)
  |-------
[1]   (id(n - k_1 < n - k_0))

-*-SOCOS-*-
(uid "min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__branch:transition/trs1__branch__trs1__branch__trs1:transition/trs1__branch__trs1__branch__stmt5:transition;")
-*-*-*-*-*-


nil

No change on: (socos-skip-msg (uid "min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__branch:transition/trs1__branch__trs1__branch__trs1:transition/trs1__branch__trs1__branch__stmt5:transition;"))
cc__loop.2.1.2.1.2.1 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__branch:transition/trs1__branch__trs1__branch__trs1:transition/trs1__branch__trs1__branch__stmt5:transition;

[-1]  (((LAMBDA (m, k): a(m) < a(k)))(m_0, k_0))
[-2]  k_1 = (((LAMBDA (m, k): k + 1))(m_0, k_0)):: int
[-3]  (((LAMBDA (m, k): k < n))(m_0, k_0))
[-4]  sit__loop(m_0, k_0)
  |-------
[1]   (id(n - k_1 < n - k_0))

Postponing cc__loop.2.1.2.1.2.1.

cc__loop.2.1.2.1.2.1 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__branch:transition/trs1__branch__trs1__branch__trs1:transition/trs1__branch__trs1__branch__stmt5:transition;

[-1]  (((LAMBDA (m, k): a(m) < a(k)))(m_0, k_0))
[-2]  k_1 = (((LAMBDA (m, k): k + 1))(m_0, k_0)):: int
[-3]  (((LAMBDA (m, k): k < n))(m_0, k_0))
[-4]  sit__loop(m_0, k_0)
  |-------
[1]   (id(n - k_1 < n - k_0))

Expanding all definitions,
this simplifies to: 
cc__loop.2.1.2.1.2.1 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__branch:transition/trs1__branch__trs1__branch__trs1:transition/trs1__branch__trs1__branch__stmt5:transition;

[-1]  (((LAMBDA (m, k): a(m) < a(k)))(m_0, k_0))
[-2]  k_1 = (((LAMBDA (m, k): k + 1))(m_0, k_0)):: int
[-3]  (((LAMBDA (m, k): k < n))(m_0, k_0))
{-4}  (id(0 < k_0 AND k_0 <= n)) AND
       (id(0 <= m_0 AND m_0 < k_0)) AND
        (id(FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)))
  |-------
[1]   (id(n - k_1 < n - k_0))

Applying disjunctive simplification to flatten sequent,
this simplifies to: 
cc__loop.2.1.2.1.2.1 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__branch:transition/trs1__branch__trs1__branch__trs1:transition/trs1__branch__trs1__branch__stmt5:transition;

[-1]  (((LAMBDA (m, k): a(m) < a(k)))(m_0, k_0))
[-2]  k_1 = (((LAMBDA (m, k): k + 1))(m_0, k_0)):: int
[-3]  (((LAMBDA (m, k): k < n))(m_0, k_0))
{-4}  (id(0 < k_0 AND k_0 <= n))
{-5}  (id(0 <= m_0 AND m_0 < k_0))
{-6}  (id(FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)))
  |-------
[1]   (id(n - k_1 < n - k_0))

-*-SOCOS-*-
(check-condition "min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__branch:transition/trs1__branch__trs1__branch__trs1:transition/trs1__branch__trs1__branch__stmt5:transition;")
-*-*-*-*-*-


nil

No change on: (socos-skip-msg (check-condition "min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__branch:transition/trs1__branch__trs1__branch__trs1:transition/trs1__branch__trs1__branch__stmt5:transition;"))
cc__loop.2.1.2.1.2.1 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__branch:transition/trs1__branch__trs1__branch__trs1:transition/trs1__branch__trs1__branch__stmt5:transition;

[-1]  (((LAMBDA (m, k): a(m) < a(k)))(m_0, k_0))
[-2]  k_1 = (((LAMBDA (m, k): k + 1))(m_0, k_0)):: int
[-3]  (((LAMBDA (m, k): k < n))(m_0, k_0))
{-4}  (id(0 < k_0 AND k_0 <= n))
{-5}  (id(0 <= m_0 AND m_0 < k_0))
{-6}  (id(FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)))
  |-------
[1]   (id(n - k_1 < n - k_0))

Expanding the definition of id,
this simplifies to: 
cc__loop.2.1.2.1.2.1 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__branch:transition/trs1__branch__trs1__branch__trs1:transition/trs1__branch__trs1__branch__stmt5:transition;

[-1]  (((LAMBDA (m, k): a(m) < a(k)))(m_0, k_0))
[-2]  k_1 = (((LAMBDA (m, k): k + 1))(m_0, k_0)):: int
[-3]  (((LAMBDA (m, k): k < n))(m_0, k_0))
{-4}  0 < k_0 AND k_0 <= n
{-5}  0 <= m_0 AND m_0 < k_0
{-6}  FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)
  |-------
{1}   n - k_1 < n - k_0

nil

cc__loop.2.1.2.1.2.1 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__branch:transition/trs1__branch__trs1__branch__trs1:transition/trs1__branch__trs1__branch__stmt5:transition;

[-1]  (((LAMBDA (m, k): a(m) < a(k)))(m_0, k_0))
[-2]  k_1 = (((LAMBDA (m, k): k + 1))(m_0, k_0)):: int
[-3]  (((LAMBDA (m, k): k < n))(m_0, k_0))
{-4}  0 < k_0 AND k_0 <= n
{-5}  0 <= m_0 AND m_0 < k_0
{-6}  FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)
  |-------
{1}   n - k_1 < n - k_0

Applying beta-reduction,
this simplifies to: 
cc__loop.2.1.2.1.2.1 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__branch:transition/trs1__branch__trs1__branch__trs1:transition/trs1__branch__trs1__branch__stmt5:transition;

{-1}  a(m_0) < a(k_0)
{-2}  k_1 = k_0 + 1
{-3}  k_0 < n
[-4]  0 < k_0 AND k_0 <= n
[-5]  0 <= m_0 AND m_0 < k_0
[-6]  FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)
  |-------
[1]   n - k_1 < n - k_0

No change on: (skip)
cc__loop.2.1.2.1.2.1 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__branch:transition/trs1__branch__trs1__branch__trs1:transition/trs1__branch__trs1__branch__stmt5:transition;

[-1]  a(m_0) < a(k_0)
[-2]  k_1 = k_0 + 1
[-3]  k_0 < n
[-4]  0 < k_0 AND k_0 <= n
[-5]  0 <= m_0 AND m_0 < k_0
[-6]  FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)
  |-------
[1]   n - k_1 < n - k_0


Attempted proof of cc__loop.2.1.2.1.2.1 failed.

Attempted proof of cc__loop.2.1.2.1.2.1 failed.
cc__loop.2.1.2.1.2.1 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__branch:transition/trs1__branch__trs1__branch__trs1:transition/trs1__branch__trs1__branch__stmt5:transition;

{-1}  a(m_0) < a(k_0)
{-2}  k_1 = k_0 + 1
{-3}  k_0 < n
[-4]  0 < k_0 AND k_0 <= n
[-5]  0 <= m_0 AND m_0 < k_0
[-6]  FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)
  |-------
[1]   n - k_1 < n - k_0

-*-SOCOS-*-
(left-condition (sequent ("a(m_0) < a(k_0)" "k_1 = k_0 + 1" "k_0 < n" "0 < k_0 AND k_0 <= n" "0 <= m_0 AND m_0 < k_0" "FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)") ("n - k_1 < n - k_0")))
-*-*-*-*-*-


nil

No change on: (socos-skip-msg (left-condition (sequent ("a(m_0) < a(k_0)" "k_1 = k_0 + 1" "k_0 < n" "0 < k_0 AND k_0 <= n" "0 <= m_0 AND m_0 < k_0" "FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)") ("n - k_1 < n - k_0"))))
cc__loop.2.1.2.1.2.1 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__branch:transition/trs1__branch__trs1__branch__trs1:transition/trs1__branch__trs1__branch__stmt5:transition;

{-1}  a(m_0) < a(k_0)
{-2}  k_1 = k_0 + 1
{-3}  k_0 < n
[-4]  0 < k_0 AND k_0 <= n
[-5]  0 <= m_0 AND m_0 < k_0
[-6]  FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)
  |-------
[1]   n - k_1 < n - k_0

nil

cc__loop.2.1.2.1.2.1 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__branch:transition/trs1__branch__trs1__branch__trs1:transition/trs1__branch__trs1__branch__stmt5:transition;

{-1}  a(m_0) < a(k_0)
{-2}  k_1 = k_0 + 1
{-3}  k_0 < n
[-4]  0 < k_0 AND k_0 <= n
[-5]  0 <= m_0 AND m_0 < k_0
[-6]  FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)
  |-------
[1]   n - k_1 < n - k_0

Postponing cc__loop.2.1.2.1.2.1.

cc__loop.2.1.2.1.2.2 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__branch:transition/trs1__branch__trs1__branch__trs1:transition;

[-1]  (((LAMBDA (m, k): a(m) < a(k)))(m_0, k_0))
[-2]  k_1 = (((LAMBDA (m, k): k + 1))(m_0, k_0)):: int
[-3]  (((LAMBDA (m, k): k < n))(m_0, k_0))
[-4]  sit__loop(m_0, k_0)
  |-------
{1}   (sit__loop(m_0, k_1))

Adding comment: min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__branch:transition/trs1__branch__trs1__branch__trs1:transition/trs1__branch__trs1__branch__trs1__goto:transition;
this simplifies to: 
cc__loop.2.1.2.1.2.2 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__branch:transition/trs1__branch__trs1__branch__trs1:transition/trs1__branch__trs1__branch__trs1__goto:transition;

[-1]  (((LAMBDA (m, k): a(m) < a(k)))(m_0, k_0))
[-2]  k_1 = (((LAMBDA (m, k): k + 1))(m_0, k_0)):: int
[-3]  (((LAMBDA (m, k): k < n))(m_0, k_0))
[-4]  sit__loop(m_0, k_0)
  |-------
[1]   (sit__loop(m_0, k_1))

-*-SOCOS-*-
(uid "min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__branch:transition/trs1__branch__trs1__branch__trs1:transition/trs1__branch__trs1__branch__trs1__goto:transition;")
-*-*-*-*-*-


nil

No change on: (socos-skip-msg (uid "min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__branch:transition/trs1__branch__trs1__branch__trs1:transition/trs1__branch__trs1__branch__trs1__goto:transition;"))
cc__loop.2.1.2.1.2.2 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__branch:transition/trs1__branch__trs1__branch__trs1:transition/trs1__branch__trs1__branch__trs1__goto:transition;

[-1]  (((LAMBDA (m, k): a(m) < a(k)))(m_0, k_0))
[-2]  k_1 = (((LAMBDA (m, k): k + 1))(m_0, k_0)):: int
[-3]  (((LAMBDA (m, k): k < n))(m_0, k_0))
[-4]  sit__loop(m_0, k_0)
  |-------
[1]   (sit__loop(m_0, k_1))

Postponing cc__loop.2.1.2.1.2.2.

cc__loop.2.1.2.1.2.2 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__branch:transition/trs1__branch__trs1__branch__trs1:transition/trs1__branch__trs1__branch__trs1__goto:transition;

[-1]  (((LAMBDA (m, k): a(m) < a(k)))(m_0, k_0))
[-2]  k_1 = (((LAMBDA (m, k): k + 1))(m_0, k_0)):: int
[-3]  (((LAMBDA (m, k): k < n))(m_0, k_0))
[-4]  sit__loop(m_0, k_0)
  |-------
[1]   (sit__loop(m_0, k_1))

No change on: (expand "sit__ini__" - :assert? none)
cc__loop.2.1.2.1.2.2 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__branch:transition/trs1__branch__trs1__branch__trs1:transition/trs1__branch__trs1__branch__trs1__goto:transition;

[-1]  (((LAMBDA (m, k): a(m) < a(k)))(m_0, k_0))
[-2]  k_1 = (((LAMBDA (m, k): k + 1))(m_0, k_0)):: int
[-3]  (((LAMBDA (m, k): k < n))(m_0, k_0))
[-4]  sit__loop(m_0, k_0)
  |-------
[1]   (sit__loop(m_0, k_1))

No change on: (expand "spec__min__min.pre__" - :assert? none)
cc__loop.2.1.2.1.2.2 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__branch:transition/trs1__branch__trs1__branch__trs1:transition/trs1__branch__trs1__branch__trs1__goto:transition;

[-1]  (((LAMBDA (m, k): a(m) < a(k)))(m_0, k_0))
[-2]  k_1 = (((LAMBDA (m, k): k + 1))(m_0, k_0)):: int
[-3]  (((LAMBDA (m, k): k < n))(m_0, k_0))
[-4]  sit__loop(m_0, k_0)
  |-------
[1]   (sit__loop(m_0, k_1))

Expanding the definition of sit__loop,
this simplifies to: 
cc__loop.2.1.2.1.2.2 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__branch:transition/trs1__branch__trs1__branch__trs1:transition/trs1__branch__trs1__branch__trs1__goto:transition;

[-1]  (((LAMBDA (m, k): a(m) < a(k)))(m_0, k_0))
[-2]  k_1 = (((LAMBDA (m, k): k + 1))(m_0, k_0)):: int
[-3]  (((LAMBDA (m, k): k < n))(m_0, k_0))
{-4}  (id(0 < k_0 AND k_0 <= n)) AND
       (id(0 <= m_0 AND m_0 < k_0)) AND
        (id(FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)))
  |-------
[1]   (sit__loop(m_0, k_1))

No change on: (expand "sit__fin__post__" - :assert? none)
cc__loop.2.1.2.1.2.2 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__branch:transition/trs1__branch__trs1__branch__trs1:transition/trs1__branch__trs1__branch__trs1__goto:transition;

[-1]  (((LAMBDA (m, k): a(m) < a(k)))(m_0, k_0))
[-2]  k_1 = (((LAMBDA (m, k): k + 1))(m_0, k_0)):: int
[-3]  (((LAMBDA (m, k): k < n))(m_0, k_0))
{-4}  (id(0 < k_0 AND k_0 <= n)) AND
       (id(0 <= m_0 AND m_0 < k_0)) AND
        (id(FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)))
  |-------
[1]   (sit__loop(m_0, k_1))

No change on: (expand "spec__min__min.post__" - :assert? none)
cc__loop.2.1.2.1.2.2 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__branch:transition/trs1__branch__trs1__branch__trs1:transition/trs1__branch__trs1__branch__trs1__goto:transition;

[-1]  (((LAMBDA (m, k): a(m) < a(k)))(m_0, k_0))
[-2]  k_1 = (((LAMBDA (m, k): k + 1))(m_0, k_0)):: int
[-3]  (((LAMBDA (m, k): k < n))(m_0, k_0))
{-4}  (id(0 < k_0 AND k_0 <= n)) AND
       (id(0 <= m_0 AND m_0 < k_0)) AND
        (id(FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)))
  |-------
[1]   (sit__loop(m_0, k_1))

Postponing cc__loop.2.1.2.1.2.2.

cc__loop.2.1.2.1.2.2 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__branch:transition/trs1__branch__trs1__branch__trs1:transition/trs1__branch__trs1__branch__trs1__goto:transition;

[-1]  (((LAMBDA (m, k): a(m) < a(k)))(m_0, k_0))
[-2]  k_1 = (((LAMBDA (m, k): k + 1))(m_0, k_0)):: int
[-3]  (((LAMBDA (m, k): k < n))(m_0, k_0))
{-4}  (id(0 < k_0 AND k_0 <= n)) AND
       (id(0 <= m_0 AND m_0 < k_0)) AND
        (id(FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)))
  |-------
[1]   (sit__loop(m_0, k_1))

No change on: (expand "sit__ini__" + :assert? none)
cc__loop.2.1.2.1.2.2 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__branch:transition/trs1__branch__trs1__branch__trs1:transition/trs1__branch__trs1__branch__trs1__goto:transition;

[-1]  (((LAMBDA (m, k): a(m) < a(k)))(m_0, k_0))
[-2]  k_1 = (((LAMBDA (m, k): k + 1))(m_0, k_0)):: int
[-3]  (((LAMBDA (m, k): k < n))(m_0, k_0))
{-4}  (id(0 < k_0 AND k_0 <= n)) AND
       (id(0 <= m_0 AND m_0 < k_0)) AND
        (id(FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)))
  |-------
[1]   (sit__loop(m_0, k_1))

No change on: (expand "spec__min__min.pre__" + :assert? none)
cc__loop.2.1.2.1.2.2 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__branch:transition/trs1__branch__trs1__branch__trs1:transition/trs1__branch__trs1__branch__trs1__goto:transition;

[-1]  (((LAMBDA (m, k): a(m) < a(k)))(m_0, k_0))
[-2]  k_1 = (((LAMBDA (m, k): k + 1))(m_0, k_0)):: int
[-3]  (((LAMBDA (m, k): k < n))(m_0, k_0))
{-4}  (id(0 < k_0 AND k_0 <= n)) AND
       (id(0 <= m_0 AND m_0 < k_0)) AND
        (id(FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)))
  |-------
[1]   (sit__loop(m_0, k_1))

Expanding the definition of sit__loop,
this simplifies to: 
cc__loop.2.1.2.1.2.2 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__branch:transition/trs1__branch__trs1__branch__trs1:transition/trs1__branch__trs1__branch__trs1__goto:transition;

[-1]  (((LAMBDA (m, k): a(m) < a(k)))(m_0, k_0))
[-2]  k_1 = (((LAMBDA (m, k): k + 1))(m_0, k_0)):: int
[-3]  (((LAMBDA (m, k): k < n))(m_0, k_0))
[-4]  (id(0 < k_0 AND k_0 <= n)) AND
       (id(0 <= m_0 AND m_0 < k_0)) AND
        (id(FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)))
  |-------
{1}   (id(0 < k_1 AND k_1 <= n)) AND
       (id(0 <= m_0 AND m_0 < k_1)) AND
        (id(FORALL (i: int): 0 <= i AND i < k_1 => a(m_0) <= a(i)))

No change on: (expand "sit__fin__post__" + :assert? none)
cc__loop.2.1.2.1.2.2 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__branch:transition/trs1__branch__trs1__branch__trs1:transition/trs1__branch__trs1__branch__trs1__goto:transition;

[-1]  (((LAMBDA (m, k): a(m) < a(k)))(m_0, k_0))
[-2]  k_1 = (((LAMBDA (m, k): k + 1))(m_0, k_0)):: int
[-3]  (((LAMBDA (m, k): k < n))(m_0, k_0))
[-4]  (id(0 < k_0 AND k_0 <= n)) AND
       (id(0 <= m_0 AND m_0 < k_0)) AND
        (id(FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)))
  |-------
{1}   (id(0 < k_1 AND k_1 <= n)) AND
       (id(0 <= m_0 AND m_0 < k_1)) AND
        (id(FORALL (i: int): 0 <= i AND i < k_1 => a(m_0) <= a(i)))

No change on: (expand "spec__min__min.post__" + :assert? none)
cc__loop.2.1.2.1.2.2 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__branch:transition/trs1__branch__trs1__branch__trs1:transition/trs1__branch__trs1__branch__trs1__goto:transition;

[-1]  (((LAMBDA (m, k): a(m) < a(k)))(m_0, k_0))
[-2]  k_1 = (((LAMBDA (m, k): k + 1))(m_0, k_0)):: int
[-3]  (((LAMBDA (m, k): k < n))(m_0, k_0))
[-4]  (id(0 < k_0 AND k_0 <= n)) AND
       (id(0 <= m_0 AND m_0 < k_0)) AND
        (id(FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)))
  |-------
{1}   (id(0 < k_1 AND k_1 <= n)) AND
       (id(0 <= m_0 AND m_0 < k_1)) AND
        (id(FORALL (i: int): 0 <= i AND i < k_1 => a(m_0) <= a(i)))

Postponing cc__loop.2.1.2.1.2.2.

cc__loop.2.1.2.1.2.2 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__branch:transition/trs1__branch__trs1__branch__trs1:transition/trs1__branch__trs1__branch__trs1__goto:transition;

[-1]  (((LAMBDA (m, k): a(m) < a(k)))(m_0, k_0))
[-2]  k_1 = (((LAMBDA (m, k): k + 1))(m_0, k_0)):: int
[-3]  (((LAMBDA (m, k): k < n))(m_0, k_0))
[-4]  (id(0 < k_0 AND k_0 <= n)) AND
       (id(0 <= m_0 AND m_0 < k_0)) AND
        (id(FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)))
  |-------
{1}   (id(0 < k_1 AND k_1 <= n)) AND
       (id(0 <= m_0 AND m_0 < k_1)) AND
        (id(FORALL (i: int): 0 <= i AND i < k_1 => a(m_0) <= a(i)))

Splitting conjunction into branches,
this yields  3 subgoals: 
cc__loop.2.1.2.1.2.2.1 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__branch:transition/trs1__branch__trs1__branch__trs1:transition/trs1__branch__trs1__branch__trs1__goto:transition;

[-1]  (((LAMBDA (m, k): a(m) < a(k)))(m_0, k_0))
[-2]  k_1 = (((LAMBDA (m, k): k + 1))(m_0, k_0)):: int
[-3]  (((LAMBDA (m, k): k < n))(m_0, k_0))
[-4]  (id(0 < k_0 AND k_0 <= n)) AND
       (id(0 <= m_0 AND m_0 < k_0)) AND
        (id(FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)))
  |-------
{1}   (id(0 < k_1 AND k_1 <= n))

Adding comment: min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__branch:transition/trs1__branch__trs1__branch__trs1:transition/trs1__branch__trs1__branch__trs1__goto:transition/trs1__branch__trs1__branch__trs1__goto_check_loop_1:transition;
this simplifies to: 
cc__loop.2.1.2.1.2.2.1 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__branch:transition/trs1__branch__trs1__branch__trs1:transition/trs1__branch__trs1__branch__trs1__goto:transition/trs1__branch__trs1__branch__trs1__goto_check_loop_1:transition;

[-1]  (((LAMBDA (m, k): a(m) < a(k)))(m_0, k_0))
[-2]  k_1 = (((LAMBDA (m, k): k + 1))(m_0, k_0)):: int
[-3]  (((LAMBDA (m, k): k < n))(m_0, k_0))
[-4]  (id(0 < k_0 AND k_0 <= n)) AND
       (id(0 <= m_0 AND m_0 < k_0)) AND
        (id(FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)))
  |-------
[1]   (id(0 < k_1 AND k_1 <= n))

-*-SOCOS-*-
(uid "min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__branch:transition/trs1__branch__trs1__branch__trs1:transition/trs1__branch__trs1__branch__trs1__goto:transition/trs1__branch__trs1__branch__trs1__goto_check_loop_1:transition;")
-*-*-*-*-*-


nil

No change on: (socos-skip-msg (uid "min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__branch:transition/trs1__branch__trs1__branch__trs1:transition/trs1__branch__trs1__branch__trs1__goto:transition/trs1__branch__trs1__branch__trs1__goto_check_loop_1:transition;"))
cc__loop.2.1.2.1.2.2.1 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__branch:transition/trs1__branch__trs1__branch__trs1:transition/trs1__branch__trs1__branch__trs1__goto:transition/trs1__branch__trs1__branch__trs1__goto_check_loop_1:transition;

[-1]  (((LAMBDA (m, k): a(m) < a(k)))(m_0, k_0))
[-2]  k_1 = (((LAMBDA (m, k): k + 1))(m_0, k_0)):: int
[-3]  (((LAMBDA (m, k): k < n))(m_0, k_0))
[-4]  (id(0 < k_0 AND k_0 <= n)) AND
       (id(0 <= m_0 AND m_0 < k_0)) AND
        (id(FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)))
  |-------
[1]   (id(0 < k_1 AND k_1 <= n))

Postponing cc__loop.2.1.2.1.2.2.1.

cc__loop.2.1.2.1.2.2.1 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__branch:transition/trs1__branch__trs1__branch__trs1:transition/trs1__branch__trs1__branch__trs1__goto:transition/trs1__branch__trs1__branch__trs1__goto_check_loop_1:transition;

[-1]  (((LAMBDA (m, k): a(m) < a(k)))(m_0, k_0))
[-2]  k_1 = (((LAMBDA (m, k): k + 1))(m_0, k_0)):: int
[-3]  (((LAMBDA (m, k): k < n))(m_0, k_0))
[-4]  (id(0 < k_0 AND k_0 <= n)) AND
       (id(0 <= m_0 AND m_0 < k_0)) AND
        (id(FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)))
  |-------
[1]   (id(0 < k_1 AND k_1 <= n))

-*-SOCOS-*-
(check-condition "min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__branch:transition/trs1__branch__trs1__branch__trs1:transition/trs1__branch__trs1__branch__trs1__goto:transition/trs1__branch__trs1__branch__trs1__goto_check_loop_1:transition;")
-*-*-*-*-*-


nil

No change on: (socos-skip-msg (check-condition "min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__branch:transition/trs1__branch__trs1__branch__trs1:transition/trs1__branch__trs1__branch__trs1__goto:transition/trs1__branch__trs1__branch__trs1__goto_check_loop_1:transition;"))
cc__loop.2.1.2.1.2.2.1 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__branch:transition/trs1__branch__trs1__branch__trs1:transition/trs1__branch__trs1__branch__trs1__goto:transition/trs1__branch__trs1__branch__trs1__goto_check_loop_1:transition;

[-1]  (((LAMBDA (m, k): a(m) < a(k)))(m_0, k_0))
[-2]  k_1 = (((LAMBDA (m, k): k + 1))(m_0, k_0)):: int
[-3]  (((LAMBDA (m, k): k < n))(m_0, k_0))
[-4]  (id(0 < k_0 AND k_0 <= n)) AND
       (id(0 <= m_0 AND m_0 < k_0)) AND
        (id(FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)))
  |-------
[1]   (id(0 < k_1 AND k_1 <= n))

Expanding the definition of id,
this simplifies to: 
cc__loop.2.1.2.1.2.2.1 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__branch:transition/trs1__branch__trs1__branch__trs1:transition/trs1__branch__trs1__branch__trs1__goto:transition/trs1__branch__trs1__branch__trs1__goto_check_loop_1:transition;

[-1]  (((LAMBDA (m, k): a(m) < a(k)))(m_0, k_0))
[-2]  k_1 = (((LAMBDA (m, k): k + 1))(m_0, k_0)):: int
[-3]  (((LAMBDA (m, k): k < n))(m_0, k_0))
{-4}       0 < k_0 AND k_0 <= n AND 0 <= m_0 AND m_0 < k_0
       AND FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)
  |-------
{1}   0 < k_1 AND k_1 <= n

nil

cc__loop.2.1.2.1.2.2.1 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__branch:transition/trs1__branch__trs1__branch__trs1:transition/trs1__branch__trs1__branch__trs1__goto:transition/trs1__branch__trs1__branch__trs1__goto_check_loop_1:transition;

[-1]  (((LAMBDA (m, k): a(m) < a(k)))(m_0, k_0))
[-2]  k_1 = (((LAMBDA (m, k): k + 1))(m_0, k_0)):: int
[-3]  (((LAMBDA (m, k): k < n))(m_0, k_0))
{-4}       0 < k_0 AND k_0 <= n AND 0 <= m_0 AND m_0 < k_0
       AND FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)
  |-------
{1}   0 < k_1 AND k_1 <= n

Applying beta-reduction,
this simplifies to: 
cc__loop.2.1.2.1.2.2.1 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__branch:transition/trs1__branch__trs1__branch__trs1:transition/trs1__branch__trs1__branch__trs1__goto:transition/trs1__branch__trs1__branch__trs1__goto_check_loop_1:transition;

{-1}  a(m_0) < a(k_0)
{-2}  k_1 = k_0 + 1
{-3}  k_0 < n
[-4]       0 < k_0 AND k_0 <= n AND 0 <= m_0 AND m_0 < k_0
       AND FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)
  |-------
[1]   0 < k_1 AND k_1 <= n

No change on: (skip)
cc__loop.2.1.2.1.2.2.1 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__branch:transition/trs1__branch__trs1__branch__trs1:transition/trs1__branch__trs1__branch__trs1__goto:transition/trs1__branch__trs1__branch__trs1__goto_check_loop_1:transition;

[-1]  a(m_0) < a(k_0)
[-2]  k_1 = k_0 + 1
[-3]  k_0 < n
[-4]       0 < k_0 AND k_0 <= n AND 0 <= m_0 AND m_0 < k_0
       AND FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)
  |-------
[1]   0 < k_1 AND k_1 <= n


Attempted proof of cc__loop.2.1.2.1.2.2.1 failed.

Attempted proof of cc__loop.2.1.2.1.2.2.1 failed.
cc__loop.2.1.2.1.2.2.1 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__branch:transition/trs1__branch__trs1__branch__trs1:transition/trs1__branch__trs1__branch__trs1__goto:transition/trs1__branch__trs1__branch__trs1__goto_check_loop_1:transition;

{-1}  a(m_0) < a(k_0)
{-2}  k_1 = k_0 + 1
{-3}  k_0 < n
[-4]       0 < k_0 AND k_0 <= n AND 0 <= m_0 AND m_0 < k_0
       AND FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)
  |-------
[1]   0 < k_1 AND k_1 <= n

-*-SOCOS-*-
(left-condition (sequent ("a(m_0) < a(k_0)" "k_1 = k_0 + 1" "k_0 < n" "     0 < k_0 AND k_0 <= n AND 0 <= m_0 AND m_0 < k_0
       AND FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)") ("0 < k_1 AND k_1 <= n")))
-*-*-*-*-*-


nil

No change on: (socos-skip-msg (left-condition (sequent ("a(m_0) < a(k_0)" "k_1 = k_0 + 1" "k_0 < n" "     0 < k_0 AND k_0 <= n AND 0 <= m_0 AND m_0 < k_0
       AND FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)") ("0 < k_1 AND k_1 <= n"))))
cc__loop.2.1.2.1.2.2.1 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__branch:transition/trs1__branch__trs1__branch__trs1:transition/trs1__branch__trs1__branch__trs1__goto:transition/trs1__branch__trs1__branch__trs1__goto_check_loop_1:transition;

{-1}  a(m_0) < a(k_0)
{-2}  k_1 = k_0 + 1
{-3}  k_0 < n
[-4]       0 < k_0 AND k_0 <= n AND 0 <= m_0 AND m_0 < k_0
       AND FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)
  |-------
[1]   0 < k_1 AND k_1 <= n

nil

cc__loop.2.1.2.1.2.2.1 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__branch:transition/trs1__branch__trs1__branch__trs1:transition/trs1__branch__trs1__branch__trs1__goto:transition/trs1__branch__trs1__branch__trs1__goto_check_loop_1:transition;

{-1}  a(m_0) < a(k_0)
{-2}  k_1 = k_0 + 1
{-3}  k_0 < n
[-4]       0 < k_0 AND k_0 <= n AND 0 <= m_0 AND m_0 < k_0
       AND FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)
  |-------
[1]   0 < k_1 AND k_1 <= n

Postponing cc__loop.2.1.2.1.2.2.1.

cc__loop.2.1.2.1.2.2.2 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__branch:transition/trs1__branch__trs1__branch__trs1:transition/trs1__branch__trs1__branch__trs1__goto:transition;

[-1]  (((LAMBDA (m, k): a(m) < a(k)))(m_0, k_0))
[-2]  k_1 = (((LAMBDA (m, k): k + 1))(m_0, k_0)):: int
[-3]  (((LAMBDA (m, k): k < n))(m_0, k_0))
[-4]  (id(0 < k_0 AND k_0 <= n)) AND
       (id(0 <= m_0 AND m_0 < k_0)) AND
        (id(FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)))
  |-------
{1}   (id(0 <= m_0 AND m_0 < k_1))

Adding comment: min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__branch:transition/trs1__branch__trs1__branch__trs1:transition/trs1__branch__trs1__branch__trs1__goto:transition/trs1__branch__trs1__branch__trs1__goto_check_loop_2:transition;
this simplifies to: 
cc__loop.2.1.2.1.2.2.2 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__branch:transition/trs1__branch__trs1__branch__trs1:transition/trs1__branch__trs1__branch__trs1__goto:transition/trs1__branch__trs1__branch__trs1__goto_check_loop_2:transition;

[-1]  (((LAMBDA (m, k): a(m) < a(k)))(m_0, k_0))
[-2]  k_1 = (((LAMBDA (m, k): k + 1))(m_0, k_0)):: int
[-3]  (((LAMBDA (m, k): k < n))(m_0, k_0))
[-4]  (id(0 < k_0 AND k_0 <= n)) AND
       (id(0 <= m_0 AND m_0 < k_0)) AND
        (id(FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)))
  |-------
[1]   (id(0 <= m_0 AND m_0 < k_1))

-*-SOCOS-*-
(uid "min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__branch:transition/trs1__branch__trs1__branch__trs1:transition/trs1__branch__trs1__branch__trs1__goto:transition/trs1__branch__trs1__branch__trs1__goto_check_loop_2:transition;")
-*-*-*-*-*-


nil

No change on: (socos-skip-msg (uid "min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__branch:transition/trs1__branch__trs1__branch__trs1:transition/trs1__branch__trs1__branch__trs1__goto:transition/trs1__branch__trs1__branch__trs1__goto_check_loop_2:transition;"))
cc__loop.2.1.2.1.2.2.2 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__branch:transition/trs1__branch__trs1__branch__trs1:transition/trs1__branch__trs1__branch__trs1__goto:transition/trs1__branch__trs1__branch__trs1__goto_check_loop_2:transition;

[-1]  (((LAMBDA (m, k): a(m) < a(k)))(m_0, k_0))
[-2]  k_1 = (((LAMBDA (m, k): k + 1))(m_0, k_0)):: int
[-3]  (((LAMBDA (m, k): k < n))(m_0, k_0))
[-4]  (id(0 < k_0 AND k_0 <= n)) AND
       (id(0 <= m_0 AND m_0 < k_0)) AND
        (id(FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)))
  |-------
[1]   (id(0 <= m_0 AND m_0 < k_1))

Postponing cc__loop.2.1.2.1.2.2.2.

cc__loop.2.1.2.1.2.2.2 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__branch:transition/trs1__branch__trs1__branch__trs1:transition/trs1__branch__trs1__branch__trs1__goto:transition/trs1__branch__trs1__branch__trs1__goto_check_loop_2:transition;

[-1]  (((LAMBDA (m, k): a(m) < a(k)))(m_0, k_0))
[-2]  k_1 = (((LAMBDA (m, k): k + 1))(m_0, k_0)):: int
[-3]  (((LAMBDA (m, k): k < n))(m_0, k_0))
[-4]  (id(0 < k_0 AND k_0 <= n)) AND
       (id(0 <= m_0 AND m_0 < k_0)) AND
        (id(FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)))
  |-------
[1]   (id(0 <= m_0 AND m_0 < k_1))

-*-SOCOS-*-
(check-condition "min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__branch:transition/trs1__branch__trs1__branch__trs1:transition/trs1__branch__trs1__branch__trs1__goto:transition/trs1__branch__trs1__branch__trs1__goto_check_loop_2:transition;")
-*-*-*-*-*-


nil

No change on: (socos-skip-msg (check-condition "min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__branch:transition/trs1__branch__trs1__branch__trs1:transition/trs1__branch__trs1__branch__trs1__goto:transition/trs1__branch__trs1__branch__trs1__goto_check_loop_2:transition;"))
cc__loop.2.1.2.1.2.2.2 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__branch:transition/trs1__branch__trs1__branch__trs1:transition/trs1__branch__trs1__branch__trs1__goto:transition/trs1__branch__trs1__branch__trs1__goto_check_loop_2:transition;

[-1]  (((LAMBDA (m, k): a(m) < a(k)))(m_0, k_0))
[-2]  k_1 = (((LAMBDA (m, k): k + 1))(m_0, k_0)):: int
[-3]  (((LAMBDA (m, k): k < n))(m_0, k_0))
[-4]  (id(0 < k_0 AND k_0 <= n)) AND
       (id(0 <= m_0 AND m_0 < k_0)) AND
        (id(FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)))
  |-------
[1]   (id(0 <= m_0 AND m_0 < k_1))

Expanding the definition of id,
this simplifies to: 
cc__loop.2.1.2.1.2.2.2 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__branch:transition/trs1__branch__trs1__branch__trs1:transition/trs1__branch__trs1__branch__trs1__goto:transition/trs1__branch__trs1__branch__trs1__goto_check_loop_2:transition;

[-1]  (((LAMBDA (m, k): a(m) < a(k)))(m_0, k_0))
[-2]  k_1 = (((LAMBDA (m, k): k + 1))(m_0, k_0)):: int
[-3]  (((LAMBDA (m, k): k < n))(m_0, k_0))
{-4}       0 < k_0 AND k_0 <= n AND 0 <= m_0 AND m_0 < k_0
       AND FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)
  |-------
{1}   0 <= m_0 AND m_0 < k_1

nil

cc__loop.2.1.2.1.2.2.2 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__branch:transition/trs1__branch__trs1__branch__trs1:transition/trs1__branch__trs1__branch__trs1__goto:transition/trs1__branch__trs1__branch__trs1__goto_check_loop_2:transition;

[-1]  (((LAMBDA (m, k): a(m) < a(k)))(m_0, k_0))
[-2]  k_1 = (((LAMBDA (m, k): k + 1))(m_0, k_0)):: int
[-3]  (((LAMBDA (m, k): k < n))(m_0, k_0))
{-4}       0 < k_0 AND k_0 <= n AND 0 <= m_0 AND m_0 < k_0
       AND FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)
  |-------
{1}   0 <= m_0 AND m_0 < k_1

Applying beta-reduction,
this simplifies to: 
cc__loop.2.1.2.1.2.2.2 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__branch:transition/trs1__branch__trs1__branch__trs1:transition/trs1__branch__trs1__branch__trs1__goto:transition/trs1__branch__trs1__branch__trs1__goto_check_loop_2:transition;

{-1}  a(m_0) < a(k_0)
{-2}  k_1 = k_0 + 1
{-3}  k_0 < n
[-4]       0 < k_0 AND k_0 <= n AND 0 <= m_0 AND m_0 < k_0
       AND FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)
  |-------
[1]   0 <= m_0 AND m_0 < k_1

No change on: (skip)
cc__loop.2.1.2.1.2.2.2 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__branch:transition/trs1__branch__trs1__branch__trs1:transition/trs1__branch__trs1__branch__trs1__goto:transition/trs1__branch__trs1__branch__trs1__goto_check_loop_2:transition;

[-1]  a(m_0) < a(k_0)
[-2]  k_1 = k_0 + 1
[-3]  k_0 < n
[-4]       0 < k_0 AND k_0 <= n AND 0 <= m_0 AND m_0 < k_0
       AND FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)
  |-------
[1]   0 <= m_0 AND m_0 < k_1


Attempted proof of cc__loop.2.1.2.1.2.2.2 failed.

Attempted proof of cc__loop.2.1.2.1.2.2.2 failed.
cc__loop.2.1.2.1.2.2.2 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__branch:transition/trs1__branch__trs1__branch__trs1:transition/trs1__branch__trs1__branch__trs1__goto:transition/trs1__branch__trs1__branch__trs1__goto_check_loop_2:transition;

{-1}  a(m_0) < a(k_0)
{-2}  k_1 = k_0 + 1
{-3}  k_0 < n
[-4]       0 < k_0 AND k_0 <= n AND 0 <= m_0 AND m_0 < k_0
       AND FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)
  |-------
[1]   0 <= m_0 AND m_0 < k_1

-*-SOCOS-*-
(left-condition (sequent ("a(m_0) < a(k_0)" "k_1 = k_0 + 1" "k_0 < n" "     0 < k_0 AND k_0 <= n AND 0 <= m_0 AND m_0 < k_0
       AND FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)") ("0 <= m_0 AND m_0 < k_1")))
-*-*-*-*-*-


nil

No change on: (socos-skip-msg (left-condition (sequent ("a(m_0) < a(k_0)" "k_1 = k_0 + 1" "k_0 < n" "     0 < k_0 AND k_0 <= n AND 0 <= m_0 AND m_0 < k_0
       AND FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)") ("0 <= m_0 AND m_0 < k_1"))))
cc__loop.2.1.2.1.2.2.2 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__branch:transition/trs1__branch__trs1__branch__trs1:transition/trs1__branch__trs1__branch__trs1__goto:transition/trs1__branch__trs1__branch__trs1__goto_check_loop_2:transition;

{-1}  a(m_0) < a(k_0)
{-2}  k_1 = k_0 + 1
{-3}  k_0 < n
[-4]       0 < k_0 AND k_0 <= n AND 0 <= m_0 AND m_0 < k_0
       AND FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)
  |-------
[1]   0 <= m_0 AND m_0 < k_1

nil

cc__loop.2.1.2.1.2.2.2 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__branch:transition/trs1__branch__trs1__branch__trs1:transition/trs1__branch__trs1__branch__trs1__goto:transition/trs1__branch__trs1__branch__trs1__goto_check_loop_2:transition;

{-1}  a(m_0) < a(k_0)
{-2}  k_1 = k_0 + 1
{-3}  k_0 < n
[-4]       0 < k_0 AND k_0 <= n AND 0 <= m_0 AND m_0 < k_0
       AND FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)
  |-------
[1]   0 <= m_0 AND m_0 < k_1

Postponing cc__loop.2.1.2.1.2.2.2.

cc__loop.2.1.2.1.2.2.3 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__branch:transition/trs1__branch__trs1__branch__trs1:transition/trs1__branch__trs1__branch__trs1__goto:transition;

[-1]  (((LAMBDA (m, k): a(m) < a(k)))(m_0, k_0))
[-2]  k_1 = (((LAMBDA (m, k): k + 1))(m_0, k_0)):: int
[-3]  (((LAMBDA (m, k): k < n))(m_0, k_0))
[-4]  (id(0 < k_0 AND k_0 <= n)) AND
       (id(0 <= m_0 AND m_0 < k_0)) AND
        (id(FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)))
  |-------
{1}   (id(FORALL (i: int): 0 <= i AND i < k_1 => a(m_0) <= a(i)))

Adding comment: min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__branch:transition/trs1__branch__trs1__branch__trs1:transition/trs1__branch__trs1__branch__trs1__goto:transition/trs1__branch__trs1__branch__trs1__goto_check_loop_3:transition;
this simplifies to: 
cc__loop.2.1.2.1.2.2.3 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__branch:transition/trs1__branch__trs1__branch__trs1:transition/trs1__branch__trs1__branch__trs1__goto:transition/trs1__branch__trs1__branch__trs1__goto_check_loop_3:transition;

[-1]  (((LAMBDA (m, k): a(m) < a(k)))(m_0, k_0))
[-2]  k_1 = (((LAMBDA (m, k): k + 1))(m_0, k_0)):: int
[-3]  (((LAMBDA (m, k): k < n))(m_0, k_0))
[-4]  (id(0 < k_0 AND k_0 <= n)) AND
       (id(0 <= m_0 AND m_0 < k_0)) AND
        (id(FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)))
  |-------
[1]   (id(FORALL (i: int): 0 <= i AND i < k_1 => a(m_0) <= a(i)))

-*-SOCOS-*-
(uid "min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__branch:transition/trs1__branch__trs1__branch__trs1:transition/trs1__branch__trs1__branch__trs1__goto:transition/trs1__branch__trs1__branch__trs1__goto_check_loop_3:transition;")
-*-*-*-*-*-


nil

No change on: (socos-skip-msg (uid "min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__branch:transition/trs1__branch__trs1__branch__trs1:transition/trs1__branch__trs1__branch__trs1__goto:transition/trs1__branch__trs1__branch__trs1__goto_check_loop_3:transition;"))
cc__loop.2.1.2.1.2.2.3 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__branch:transition/trs1__branch__trs1__branch__trs1:transition/trs1__branch__trs1__branch__trs1__goto:transition/trs1__branch__trs1__branch__trs1__goto_check_loop_3:transition;

[-1]  (((LAMBDA (m, k): a(m) < a(k)))(m_0, k_0))
[-2]  k_1 = (((LAMBDA (m, k): k + 1))(m_0, k_0)):: int
[-3]  (((LAMBDA (m, k): k < n))(m_0, k_0))
[-4]  (id(0 < k_0 AND k_0 <= n)) AND
       (id(0 <= m_0 AND m_0 < k_0)) AND
        (id(FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)))
  |-------
[1]   (id(FORALL (i: int): 0 <= i AND i < k_1 => a(m_0) <= a(i)))

Postponing cc__loop.2.1.2.1.2.2.3.

cc__loop.2.1.2.1.2.2.3 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__branch:transition/trs1__branch__trs1__branch__trs1:transition/trs1__branch__trs1__branch__trs1__goto:transition/trs1__branch__trs1__branch__trs1__goto_check_loop_3:transition;

[-1]  (((LAMBDA (m, k): a(m) < a(k)))(m_0, k_0))
[-2]  k_1 = (((LAMBDA (m, k): k + 1))(m_0, k_0)):: int
[-3]  (((LAMBDA (m, k): k < n))(m_0, k_0))
[-4]  (id(0 < k_0 AND k_0 <= n)) AND
       (id(0 <= m_0 AND m_0 < k_0)) AND
        (id(FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)))
  |-------
[1]   (id(FORALL (i: int): 0 <= i AND i < k_1 => a(m_0) <= a(i)))

-*-SOCOS-*-
(check-condition "min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__branch:transition/trs1__branch__trs1__branch__trs1:transition/trs1__branch__trs1__branch__trs1__goto:transition/trs1__branch__trs1__branch__trs1__goto_check_loop_3:transition;")
-*-*-*-*-*-


nil

No change on: (socos-skip-msg (check-condition "min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__branch:transition/trs1__branch__trs1__branch__trs1:transition/trs1__branch__trs1__branch__trs1__goto:transition/trs1__branch__trs1__branch__trs1__goto_check_loop_3:transition;"))
cc__loop.2.1.2.1.2.2.3 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__branch:transition/trs1__branch__trs1__branch__trs1:transition/trs1__branch__trs1__branch__trs1__goto:transition/trs1__branch__trs1__branch__trs1__goto_check_loop_3:transition;

[-1]  (((LAMBDA (m, k): a(m) < a(k)))(m_0, k_0))
[-2]  k_1 = (((LAMBDA (m, k): k + 1))(m_0, k_0)):: int
[-3]  (((LAMBDA (m, k): k < n))(m_0, k_0))
[-4]  (id(0 < k_0 AND k_0 <= n)) AND
       (id(0 <= m_0 AND m_0 < k_0)) AND
        (id(FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)))
  |-------
[1]   (id(FORALL (i: int): 0 <= i AND i < k_1 => a(m_0) <= a(i)))

Expanding the definition of id,
this simplifies to: 
cc__loop.2.1.2.1.2.2.3 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__branch:transition/trs1__branch__trs1__branch__trs1:transition/trs1__branch__trs1__branch__trs1__goto:transition/trs1__branch__trs1__branch__trs1__goto_check_loop_3:transition;

[-1]  (((LAMBDA (m, k): a(m) < a(k)))(m_0, k_0))
[-2]  k_1 = (((LAMBDA (m, k): k + 1))(m_0, k_0)):: int
[-3]  (((LAMBDA (m, k): k < n))(m_0, k_0))
{-4}       0 < k_0 AND k_0 <= n AND 0 <= m_0 AND m_0 < k_0
       AND FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)
  |-------
{1}   FORALL (i: int): 0 <= i AND i < k_1 => a(m_0) <= a(i)

nil

cc__loop.2.1.2.1.2.2.3 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__branch:transition/trs1__branch__trs1__branch__trs1:transition/trs1__branch__trs1__branch__trs1__goto:transition/trs1__branch__trs1__branch__trs1__goto_check_loop_3:transition;

[-1]  (((LAMBDA (m, k): a(m) < a(k)))(m_0, k_0))
[-2]  k_1 = (((LAMBDA (m, k): k + 1))(m_0, k_0)):: int
[-3]  (((LAMBDA (m, k): k < n))(m_0, k_0))
{-4}       0 < k_0 AND k_0 <= n AND 0 <= m_0 AND m_0 < k_0
       AND FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)
  |-------
{1}   FORALL (i: int): 0 <= i AND i < k_1 => a(m_0) <= a(i)

Applying beta-reduction,
this simplifies to: 
cc__loop.2.1.2.1.2.2.3 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__branch:transition/trs1__branch__trs1__branch__trs1:transition/trs1__branch__trs1__branch__trs1__goto:transition/trs1__branch__trs1__branch__trs1__goto_check_loop_3:transition;

{-1}  a(m_0) < a(k_0)
{-2}  k_1 = k_0 + 1
{-3}  k_0 < n
[-4]       0 < k_0 AND k_0 <= n AND 0 <= m_0 AND m_0 < k_0
       AND FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)
  |-------
[1]   FORALL (i: int): 0 <= i AND i < k_1 => a(m_0) <= a(i)

No change on: (skip)
cc__loop.2.1.2.1.2.2.3 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__branch:transition/trs1__branch__trs1__branch__trs1:transition/trs1__branch__trs1__branch__trs1__goto:transition/trs1__branch__trs1__branch__trs1__goto_check_loop_3:transition;

[-1]  a(m_0) < a(k_0)
[-2]  k_1 = k_0 + 1
[-3]  k_0 < n
[-4]       0 < k_0 AND k_0 <= n AND 0 <= m_0 AND m_0 < k_0
       AND FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)
  |-------
[1]   FORALL (i: int): 0 <= i AND i < k_1 => a(m_0) <= a(i)


Attempted proof of cc__loop.2.1.2.1.2.2.3 failed.

Attempted proof of cc__loop.2.1.2.1.2.2.3 failed.
cc__loop.2.1.2.1.2.2.3 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__branch:transition/trs1__branch__trs1__branch__trs1:transition/trs1__branch__trs1__branch__trs1__goto:transition/trs1__branch__trs1__branch__trs1__goto_check_loop_3:transition;

{-1}  a(m_0) < a(k_0)
{-2}  k_1 = k_0 + 1
{-3}  k_0 < n
[-4]       0 < k_0 AND k_0 <= n AND 0 <= m_0 AND m_0 < k_0
       AND FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)
  |-------
[1]   FORALL (i: int): 0 <= i AND i < k_1 => a(m_0) <= a(i)

-*-SOCOS-*-
(left-condition (sequent ("a(m_0) < a(k_0)" "k_1 = k_0 + 1" "k_0 < n" "     0 < k_0 AND k_0 <= n AND 0 <= m_0 AND m_0 < k_0
       AND FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)") ("FORALL (i: int): 0 <= i AND i < k_1 => a(m_0) <= a(i)")))
-*-*-*-*-*-


nil

No change on: (socos-skip-msg (left-condition (sequent ("a(m_0) < a(k_0)" "k_1 = k_0 + 1" "k_0 < n" "     0 < k_0 AND k_0 <= n AND 0 <= m_0 AND m_0 < k_0
       AND FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)") ("FORALL (i: int): 0 <= i AND i < k_1 => a(m_0) <= a(i)"))))
cc__loop.2.1.2.1.2.2.3 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__branch:transition/trs1__branch__trs1__branch__trs1:transition/trs1__branch__trs1__branch__trs1__goto:transition/trs1__branch__trs1__branch__trs1__goto_check_loop_3:transition;

{-1}  a(m_0) < a(k_0)
{-2}  k_1 = k_0 + 1
{-3}  k_0 < n
[-4]       0 < k_0 AND k_0 <= n AND 0 <= m_0 AND m_0 < k_0
       AND FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)
  |-------
[1]   FORALL (i: int): 0 <= i AND i < k_1 => a(m_0) <= a(i)

nil

cc__loop.2.1.2.1.2.2.3 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__branch:transition/trs1__branch__trs1__branch__trs1:transition/trs1__branch__trs1__branch__trs1__goto:transition/trs1__branch__trs1__branch__trs1__goto_check_loop_3:transition;

{-1}  a(m_0) < a(k_0)
{-2}  k_1 = k_0 + 1
{-3}  k_0 < n
[-4]       0 < k_0 AND k_0 <= n AND 0 <= m_0 AND m_0 < k_0
       AND FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)
  |-------
[1]   FORALL (i: int): 0 <= i AND i < k_1 => a(m_0) <= a(i)

Postponing cc__loop.2.1.2.1.2.2.3.

cc__loop.2.1.2.2 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition;

[-1]  (((LAMBDA (m, k): k < n))(m_0, k_0))
[-2]  sit__loop(m_0, k_0)
  |-------
{1}   ((((LAMBDA (m, k): a(m) >= a(k)))(m_0, k_0)) =>
        m_1 = (((LAMBDA (m, k): k))(m_0, k_0)):: int =>
         k_1 = (((LAMBDA (m, k): k + 1))(m_1, k_0)):: int =>
          (id(((LAMBDA (m, k): 0 <= n - k))(m_1, k_1))) AND
           ((id(((LAMBDA (m, k):
                    n - k < ((LAMBDA (m, k): n - k))(m_0, k_0)))
                    (m_1, k_1)))
             AND (sit__loop(m_1, k_1))))

Adding comment: min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__branch:transition/trs1__branch__trs1__branch__trs2:transition;
this simplifies to: 
cc__loop.2.1.2.2 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__branch:transition/trs1__branch__trs1__branch__trs2:transition;

[-1]  (((LAMBDA (m, k): k < n))(m_0, k_0))
[-2]  sit__loop(m_0, k_0)
  |-------
[1]   ((((LAMBDA (m, k): a(m) >= a(k)))(m_0, k_0)) =>
        m_1 = (((LAMBDA (m, k): k))(m_0, k_0)):: int =>
         k_1 = (((LAMBDA (m, k): k + 1))(m_1, k_0)):: int =>
          (id(((LAMBDA (m, k): 0 <= n - k))(m_1, k_1))) AND
           ((id(((LAMBDA (m, k):
                    n - k < ((LAMBDA (m, k): n - k))(m_0, k_0)))
                    (m_1, k_1)))
             AND (sit__loop(m_1, k_1))))

-*-SOCOS-*-
(uid "min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__branch:transition/trs1__branch__trs1__branch__trs2:transition;")
-*-*-*-*-*-


nil

No change on: (socos-skip-msg (uid "min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__branch:transition/trs1__branch__trs1__branch__trs2:transition;"))
cc__loop.2.1.2.2 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__branch:transition/trs1__branch__trs1__branch__trs2:transition;

[-1]  (((LAMBDA (m, k): k < n))(m_0, k_0))
[-2]  sit__loop(m_0, k_0)
  |-------
[1]   ((((LAMBDA (m, k): a(m) >= a(k)))(m_0, k_0)) =>
        m_1 = (((LAMBDA (m, k): k))(m_0, k_0)):: int =>
         k_1 = (((LAMBDA (m, k): k + 1))(m_1, k_0)):: int =>
          (id(((LAMBDA (m, k): 0 <= n - k))(m_1, k_1))) AND
           ((id(((LAMBDA (m, k):
                    n - k < ((LAMBDA (m, k): n - k))(m_0, k_0)))
                    (m_1, k_1)))
             AND (sit__loop(m_1, k_1))))

Postponing cc__loop.2.1.2.2.

cc__loop.2.1.2.2 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__branch:transition/trs1__branch__trs1__branch__trs2:transition;

[-1]  (((LAMBDA (m, k): k < n))(m_0, k_0))
[-2]  sit__loop(m_0, k_0)
  |-------
[1]   ((((LAMBDA (m, k): a(m) >= a(k)))(m_0, k_0)) =>
        m_1 = (((LAMBDA (m, k): k))(m_0, k_0)):: int =>
         k_1 = (((LAMBDA (m, k): k + 1))(m_1, k_0)):: int =>
          (id(((LAMBDA (m, k): 0 <= n - k))(m_1, k_1))) AND
           ((id(((LAMBDA (m, k):
                    n - k < ((LAMBDA (m, k): n - k))(m_0, k_0)))
                    (m_1, k_1)))
             AND (sit__loop(m_1, k_1))))

Applying disjunctive simplification to flatten sequent,
this simplifies to: 
cc__loop.2.1.2.2 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__branch:transition/trs1__branch__trs1__branch__trs2:transition;

{-1}  (((LAMBDA (m, k): a(m) >= a(k)))(m_0, k_0))
[-2]  (((LAMBDA (m, k): k < n))(m_0, k_0))
[-3]  sit__loop(m_0, k_0)
  |-------
{1}   m_1 = (((LAMBDA (m, k): k))(m_0, k_0)):: int =>
       k_1 = (((LAMBDA (m, k): k + 1))(m_1, k_0)):: int =>
        (id(((LAMBDA (m, k): 0 <= n - k))(m_1, k_1))) AND
         ((id(((LAMBDA (m, k): n - k < ((LAMBDA (m, k): n - k))(m_0, k_0)))
                  (m_1, k_1)))
           AND (sit__loop(m_1, k_1)))

Applying disjunctive simplification to flatten sequent,
this simplifies to: 
cc__loop.2.1.2.2 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__branch:transition/trs1__branch__trs1__branch__trs2:transition;

[-1]  (((LAMBDA (m, k): a(m) >= a(k)))(m_0, k_0))
{-2}  m_1 = (((LAMBDA (m, k): k))(m_0, k_0)):: int
[-3]  (((LAMBDA (m, k): k < n))(m_0, k_0))
[-4]  sit__loop(m_0, k_0)
  |-------
{1}   k_1 = (((LAMBDA (m, k): k + 1))(m_1, k_0)):: int =>
       (id(((LAMBDA (m, k): 0 <= n - k))(m_1, k_1))) AND
        ((id(((LAMBDA (m, k): n - k < ((LAMBDA (m, k): n - k))(m_0, k_0)))
                 (m_1, k_1)))
          AND (sit__loop(m_1, k_1)))

Applying disjunctive simplification to flatten sequent,
this simplifies to: 
cc__loop.2.1.2.2 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__branch:transition/trs1__branch__trs1__branch__trs2:transition;

[-1]  (((LAMBDA (m, k): a(m) >= a(k)))(m_0, k_0))
[-2]  m_1 = (((LAMBDA (m, k): k))(m_0, k_0)):: int
{-3}  k_1 = (((LAMBDA (m, k): k + 1))(m_1, k_0)):: int
[-4]  (((LAMBDA (m, k): k < n))(m_0, k_0))
[-5]  sit__loop(m_0, k_0)
  |-------
{1}   (id(((LAMBDA (m, k): 0 <= n - k))(m_1, k_1))) AND
       ((id(((LAMBDA (m, k): n - k < ((LAMBDA (m, k): n - k))(m_0, k_0)))
                (m_1, k_1)))
         AND (sit__loop(m_1, k_1)))

Splitting conjunctions,
this yields  2 subgoals: 
cc__loop.2.1.2.2.1 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__branch:transition/trs1__branch__trs1__branch__trs2:transition;

[-1]  (((LAMBDA (m, k): a(m) >= a(k)))(m_0, k_0))
[-2]  m_1 = (((LAMBDA (m, k): k))(m_0, k_0)):: int
[-3]  k_1 = (((LAMBDA (m, k): k + 1))(m_1, k_0)):: int
[-4]  (((LAMBDA (m, k): k < n))(m_0, k_0))
[-5]  sit__loop(m_0, k_0)
  |-------
{1}   (id(((LAMBDA (m, k): 0 <= n - k))(m_1, k_1)))

Applying beta-reduction,
this simplifies to: 
cc__loop.2.1.2.2.1 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__branch:transition/trs1__branch__trs1__branch__trs2:transition;

[-1]  (((LAMBDA (m, k): a(m) >= a(k)))(m_0, k_0))
[-2]  m_1 = (((LAMBDA (m, k): k))(m_0, k_0)):: int
[-3]  k_1 = (((LAMBDA (m, k): k + 1))(m_1, k_0)):: int
[-4]  (((LAMBDA (m, k): k < n))(m_0, k_0))
[-5]  sit__loop(m_0, k_0)
  |-------
{1}   (id(0 <= n - k_1))

Adding comment: min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__branch:transition/trs1__branch__trs1__branch__trs2:transition/trs1__branch__trs1__branch__stmt6:transition;
this simplifies to: 
cc__loop.2.1.2.2.1 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__branch:transition/trs1__branch__trs1__branch__trs2:transition/trs1__branch__trs1__branch__stmt6:transition;

[-1]  (((LAMBDA (m, k): a(m) >= a(k)))(m_0, k_0))
[-2]  m_1 = (((LAMBDA (m, k): k))(m_0, k_0)):: int
[-3]  k_1 = (((LAMBDA (m, k): k + 1))(m_1, k_0)):: int
[-4]  (((LAMBDA (m, k): k < n))(m_0, k_0))
[-5]  sit__loop(m_0, k_0)
  |-------
[1]   (id(0 <= n - k_1))

-*-SOCOS-*-
(uid "min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__branch:transition/trs1__branch__trs1__branch__trs2:transition/trs1__branch__trs1__branch__stmt6:transition;")
-*-*-*-*-*-


nil

No change on: (socos-skip-msg (uid "min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__branch:transition/trs1__branch__trs1__branch__trs2:transition/trs1__branch__trs1__branch__stmt6:transition;"))
cc__loop.2.1.2.2.1 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__branch:transition/trs1__branch__trs1__branch__trs2:transition/trs1__branch__trs1__branch__stmt6:transition;

[-1]  (((LAMBDA (m, k): a(m) >= a(k)))(m_0, k_0))
[-2]  m_1 = (((LAMBDA (m, k): k))(m_0, k_0)):: int
[-3]  k_1 = (((LAMBDA (m, k): k + 1))(m_1, k_0)):: int
[-4]  (((LAMBDA (m, k): k < n))(m_0, k_0))
[-5]  sit__loop(m_0, k_0)
  |-------
[1]   (id(0 <= n - k_1))

Postponing cc__loop.2.1.2.2.1.

cc__loop.2.1.2.2.1 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__branch:transition/trs1__branch__trs1__branch__trs2:transition/trs1__branch__trs1__branch__stmt6:transition;

[-1]  (((LAMBDA (m, k): a(m) >= a(k)))(m_0, k_0))
[-2]  m_1 = (((LAMBDA (m, k): k))(m_0, k_0)):: int
[-3]  k_1 = (((LAMBDA (m, k): k + 1))(m_1, k_0)):: int
[-4]  (((LAMBDA (m, k): k < n))(m_0, k_0))
[-5]  sit__loop(m_0, k_0)
  |-------
[1]   (id(0 <= n - k_1))

Expanding all definitions,
this simplifies to: 
cc__loop.2.1.2.2.1 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__branch:transition/trs1__branch__trs1__branch__trs2:transition/trs1__branch__trs1__branch__stmt6:transition;

[-1]  (((LAMBDA (m, k): a(m) >= a(k)))(m_0, k_0))
[-2]  m_1 = (((LAMBDA (m, k): k))(m_0, k_0)):: int
[-3]  k_1 = (((LAMBDA (m, k): k + 1))(m_1, k_0)):: int
[-4]  (((LAMBDA (m, k): k < n))(m_0, k_0))
{-5}  (id(0 < k_0 AND k_0 <= n)) AND
       (id(0 <= m_0 AND m_0 < k_0)) AND
        (id(FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)))
  |-------
[1]   (id(0 <= n - k_1))

Applying disjunctive simplification to flatten sequent,
this simplifies to: 
cc__loop.2.1.2.2.1 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__branch:transition/trs1__branch__trs1__branch__trs2:transition/trs1__branch__trs1__branch__stmt6:transition;

[-1]  (((LAMBDA (m, k): a(m) >= a(k)))(m_0, k_0))
[-2]  m_1 = (((LAMBDA (m, k): k))(m_0, k_0)):: int
[-3]  k_1 = (((LAMBDA (m, k): k + 1))(m_1, k_0)):: int
[-4]  (((LAMBDA (m, k): k < n))(m_0, k_0))
{-5}  (id(0 < k_0 AND k_0 <= n))
{-6}  (id(0 <= m_0 AND m_0 < k_0))
{-7}  (id(FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)))
  |-------
[1]   (id(0 <= n - k_1))

-*-SOCOS-*-
(check-condition "min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__branch:transition/trs1__branch__trs1__branch__trs2:transition/trs1__branch__trs1__branch__stmt6:transition;")
-*-*-*-*-*-


nil

No change on: (socos-skip-msg (check-condition "min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__branch:transition/trs1__branch__trs1__branch__trs2:transition/trs1__branch__trs1__branch__stmt6:transition;"))
cc__loop.2.1.2.2.1 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__branch:transition/trs1__branch__trs1__branch__trs2:transition/trs1__branch__trs1__branch__stmt6:transition;

[-1]  (((LAMBDA (m, k): a(m) >= a(k)))(m_0, k_0))
[-2]  m_1 = (((LAMBDA (m, k): k))(m_0, k_0)):: int
[-3]  k_1 = (((LAMBDA (m, k): k + 1))(m_1, k_0)):: int
[-4]  (((LAMBDA (m, k): k < n))(m_0, k_0))
{-5}  (id(0 < k_0 AND k_0 <= n))
{-6}  (id(0 <= m_0 AND m_0 < k_0))
{-7}  (id(FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)))
  |-------
[1]   (id(0 <= n - k_1))

Expanding the definition of id,
this simplifies to: 
cc__loop.2.1.2.2.1 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__branch:transition/trs1__branch__trs1__branch__trs2:transition/trs1__branch__trs1__branch__stmt6:transition;

[-1]  (((LAMBDA (m, k): a(m) >= a(k)))(m_0, k_0))
[-2]  m_1 = (((LAMBDA (m, k): k))(m_0, k_0)):: int
[-3]  k_1 = (((LAMBDA (m, k): k + 1))(m_1, k_0)):: int
[-4]  (((LAMBDA (m, k): k < n))(m_0, k_0))
{-5}  0 < k_0 AND k_0 <= n
{-6}  0 <= m_0 AND m_0 < k_0
{-7}  FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)
  |-------
{1}   0 <= n - k_1

nil

cc__loop.2.1.2.2.1 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__branch:transition/trs1__branch__trs1__branch__trs2:transition/trs1__branch__trs1__branch__stmt6:transition;

[-1]  (((LAMBDA (m, k): a(m) >= a(k)))(m_0, k_0))
[-2]  m_1 = (((LAMBDA (m, k): k))(m_0, k_0)):: int
[-3]  k_1 = (((LAMBDA (m, k): k + 1))(m_1, k_0)):: int
[-4]  (((LAMBDA (m, k): k < n))(m_0, k_0))
{-5}  0 < k_0 AND k_0 <= n
{-6}  0 <= m_0 AND m_0 < k_0
{-7}  FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)
  |-------
{1}   0 <= n - k_1

Applying beta-reduction,
this simplifies to: 
cc__loop.2.1.2.2.1 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__branch:transition/trs1__branch__trs1__branch__trs2:transition/trs1__branch__trs1__branch__stmt6:transition;

{-1}  a(m_0) >= a(k_0)
{-2}  m_1 = k_0
{-3}  k_1 = k_0 + 1
{-4}  k_0 < n
[-5]  0 < k_0 AND k_0 <= n
[-6]  0 <= m_0 AND m_0 < k_0
[-7]  FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)
  |-------
[1]   0 <= n - k_1

No change on: (skip)
cc__loop.2.1.2.2.1 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__branch:transition/trs1__branch__trs1__branch__trs2:transition/trs1__branch__trs1__branch__stmt6:transition;

[-1]  a(m_0) >= a(k_0)
[-2]  m_1 = k_0
[-3]  k_1 = k_0 + 1
[-4]  k_0 < n
[-5]  0 < k_0 AND k_0 <= n
[-6]  0 <= m_0 AND m_0 < k_0
[-7]  FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)
  |-------
[1]   0 <= n - k_1


Attempted proof of cc__loop.2.1.2.2.1 failed.

Attempted proof of cc__loop.2.1.2.2.1 failed.
cc__loop.2.1.2.2.1 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__branch:transition/trs1__branch__trs1__branch__trs2:transition/trs1__branch__trs1__branch__stmt6:transition;

{-1}  a(m_0) >= a(k_0)
{-2}  m_1 = k_0
{-3}  k_1 = k_0 + 1
{-4}  k_0 < n
[-5]  0 < k_0 AND k_0 <= n
[-6]  0 <= m_0 AND m_0 < k_0
[-7]  FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)
  |-------
[1]   0 <= n - k_1

-*-SOCOS-*-
(left-condition (sequent ("a(m_0) >= a(k_0)" "m_1 = k_0" "k_1 = k_0 + 1" "k_0 < n" "0 < k_0 AND k_0 <= n" "0 <= m_0 AND m_0 < k_0" "FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)") ("0 <= n - k_1")))
-*-*-*-*-*-


nil

No change on: (socos-skip-msg (left-condition (sequent ("a(m_0) >= a(k_0)" "m_1 = k_0" "k_1 = k_0 + 1" "k_0 < n" "0 < k_0 AND k_0 <= n" "0 <= m_0 AND m_0 < k_0" "FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)") ("0 <= n - k_1"))))
cc__loop.2.1.2.2.1 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__branch:transition/trs1__branch__trs1__branch__trs2:transition/trs1__branch__trs1__branch__stmt6:transition;

{-1}  a(m_0) >= a(k_0)
{-2}  m_1 = k_0
{-3}  k_1 = k_0 + 1
{-4}  k_0 < n
[-5]  0 < k_0 AND k_0 <= n
[-6]  0 <= m_0 AND m_0 < k_0
[-7]  FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)
  |-------
[1]   0 <= n - k_1

nil

cc__loop.2.1.2.2.1 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__branch:transition/trs1__branch__trs1__branch__trs2:transition/trs1__branch__trs1__branch__stmt6:transition;

{-1}  a(m_0) >= a(k_0)
{-2}  m_1 = k_0
{-3}  k_1 = k_0 + 1
{-4}  k_0 < n
[-5]  0 < k_0 AND k_0 <= n
[-6]  0 <= m_0 AND m_0 < k_0
[-7]  FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)
  |-------
[1]   0 <= n - k_1

Postponing cc__loop.2.1.2.2.1.

cc__loop.2.1.2.2.2 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__branch:transition/trs1__branch__trs1__branch__trs2:transition;

[-1]  (((LAMBDA (m, k): a(m) >= a(k)))(m_0, k_0))
[-2]  m_1 = (((LAMBDA (m, k): k))(m_0, k_0)):: int
[-3]  k_1 = (((LAMBDA (m, k): k + 1))(m_1, k_0)):: int
[-4]  (((LAMBDA (m, k): k < n))(m_0, k_0))
[-5]  sit__loop(m_0, k_0)
  |-------
{1}   ((id(((LAMBDA (m, k): n - k < ((LAMBDA (m, k): n - k))(m_0, k_0)))
               (m_1, k_1)))
        AND (sit__loop(m_1, k_1)))

Splitting conjunctions,
this yields  2 subgoals: 
cc__loop.2.1.2.2.2.1 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__branch:transition/trs1__branch__trs1__branch__trs2:transition;

[-1]  (((LAMBDA (m, k): a(m) >= a(k)))(m_0, k_0))
[-2]  m_1 = (((LAMBDA (m, k): k))(m_0, k_0)):: int
[-3]  k_1 = (((LAMBDA (m, k): k + 1))(m_1, k_0)):: int
[-4]  (((LAMBDA (m, k): k < n))(m_0, k_0))
[-5]  sit__loop(m_0, k_0)
  |-------
{1}   (id(((LAMBDA (m, k): n - k < ((LAMBDA (m, k): n - k))(m_0, k_0)))
              (m_1, k_1)))

Applying beta-reduction,
this simplifies to: 
cc__loop.2.1.2.2.2.1 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__branch:transition/trs1__branch__trs1__branch__trs2:transition;

[-1]  (((LAMBDA (m, k): a(m) >= a(k)))(m_0, k_0))
[-2]  m_1 = (((LAMBDA (m, k): k))(m_0, k_0)):: int
[-3]  k_1 = (((LAMBDA (m, k): k + 1))(m_1, k_0)):: int
[-4]  (((LAMBDA (m, k): k < n))(m_0, k_0))
[-5]  sit__loop(m_0, k_0)
  |-------
{1}   (id(n - k_1 < n - k_0))

Adding comment: min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__branch:transition/trs1__branch__trs1__branch__trs2:transition/trs1__branch__trs1__branch__stmt7:transition;
this simplifies to: 
cc__loop.2.1.2.2.2.1 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__branch:transition/trs1__branch__trs1__branch__trs2:transition/trs1__branch__trs1__branch__stmt7:transition;

[-1]  (((LAMBDA (m, k): a(m) >= a(k)))(m_0, k_0))
[-2]  m_1 = (((LAMBDA (m, k): k))(m_0, k_0)):: int
[-3]  k_1 = (((LAMBDA (m, k): k + 1))(m_1, k_0)):: int
[-4]  (((LAMBDA (m, k): k < n))(m_0, k_0))
[-5]  sit__loop(m_0, k_0)
  |-------
[1]   (id(n - k_1 < n - k_0))

-*-SOCOS-*-
(uid "min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__branch:transition/trs1__branch__trs1__branch__trs2:transition/trs1__branch__trs1__branch__stmt7:transition;")
-*-*-*-*-*-


nil

No change on: (socos-skip-msg (uid "min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__branch:transition/trs1__branch__trs1__branch__trs2:transition/trs1__branch__trs1__branch__stmt7:transition;"))
cc__loop.2.1.2.2.2.1 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__branch:transition/trs1__branch__trs1__branch__trs2:transition/trs1__branch__trs1__branch__stmt7:transition;

[-1]  (((LAMBDA (m, k): a(m) >= a(k)))(m_0, k_0))
[-2]  m_1 = (((LAMBDA (m, k): k))(m_0, k_0)):: int
[-3]  k_1 = (((LAMBDA (m, k): k + 1))(m_1, k_0)):: int
[-4]  (((LAMBDA (m, k): k < n))(m_0, k_0))
[-5]  sit__loop(m_0, k_0)
  |-------
[1]   (id(n - k_1 < n - k_0))

Postponing cc__loop.2.1.2.2.2.1.

cc__loop.2.1.2.2.2.1 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__branch:transition/trs1__branch__trs1__branch__trs2:transition/trs1__branch__trs1__branch__stmt7:transition;

[-1]  (((LAMBDA (m, k): a(m) >= a(k)))(m_0, k_0))
[-2]  m_1 = (((LAMBDA (m, k): k))(m_0, k_0)):: int
[-3]  k_1 = (((LAMBDA (m, k): k + 1))(m_1, k_0)):: int
[-4]  (((LAMBDA (m, k): k < n))(m_0, k_0))
[-5]  sit__loop(m_0, k_0)
  |-------
[1]   (id(n - k_1 < n - k_0))

Expanding all definitions,
this simplifies to: 
cc__loop.2.1.2.2.2.1 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__branch:transition/trs1__branch__trs1__branch__trs2:transition/trs1__branch__trs1__branch__stmt7:transition;

[-1]  (((LAMBDA (m, k): a(m) >= a(k)))(m_0, k_0))
[-2]  m_1 = (((LAMBDA (m, k): k))(m_0, k_0)):: int
[-3]  k_1 = (((LAMBDA (m, k): k + 1))(m_1, k_0)):: int
[-4]  (((LAMBDA (m, k): k < n))(m_0, k_0))
{-5}  (id(0 < k_0 AND k_0 <= n)) AND
       (id(0 <= m_0 AND m_0 < k_0)) AND
        (id(FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)))
  |-------
[1]   (id(n - k_1 < n - k_0))

Applying disjunctive simplification to flatten sequent,
this simplifies to: 
cc__loop.2.1.2.2.2.1 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__branch:transition/trs1__branch__trs1__branch__trs2:transition/trs1__branch__trs1__branch__stmt7:transition;

[-1]  (((LAMBDA (m, k): a(m) >= a(k)))(m_0, k_0))
[-2]  m_1 = (((LAMBDA (m, k): k))(m_0, k_0)):: int
[-3]  k_1 = (((LAMBDA (m, k): k + 1))(m_1, k_0)):: int
[-4]  (((LAMBDA (m, k): k < n))(m_0, k_0))
{-5}  (id(0 < k_0 AND k_0 <= n))
{-6}  (id(0 <= m_0 AND m_0 < k_0))
{-7}  (id(FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)))
  |-------
[1]   (id(n - k_1 < n - k_0))

-*-SOCOS-*-
(check-condition "min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__branch:transition/trs1__branch__trs1__branch__trs2:transition/trs1__branch__trs1__branch__stmt7:transition;")
-*-*-*-*-*-


nil

No change on: (socos-skip-msg (check-condition "min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__branch:transition/trs1__branch__trs1__branch__trs2:transition/trs1__branch__trs1__branch__stmt7:transition;"))
cc__loop.2.1.2.2.2.1 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__branch:transition/trs1__branch__trs1__branch__trs2:transition/trs1__branch__trs1__branch__stmt7:transition;

[-1]  (((LAMBDA (m, k): a(m) >= a(k)))(m_0, k_0))
[-2]  m_1 = (((LAMBDA (m, k): k))(m_0, k_0)):: int
[-3]  k_1 = (((LAMBDA (m, k): k + 1))(m_1, k_0)):: int
[-4]  (((LAMBDA (m, k): k < n))(m_0, k_0))
{-5}  (id(0 < k_0 AND k_0 <= n))
{-6}  (id(0 <= m_0 AND m_0 < k_0))
{-7}  (id(FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)))
  |-------
[1]   (id(n - k_1 < n - k_0))

Expanding the definition of id,
this simplifies to: 
cc__loop.2.1.2.2.2.1 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__branch:transition/trs1__branch__trs1__branch__trs2:transition/trs1__branch__trs1__branch__stmt7:transition;

[-1]  (((LAMBDA (m, k): a(m) >= a(k)))(m_0, k_0))
[-2]  m_1 = (((LAMBDA (m, k): k))(m_0, k_0)):: int
[-3]  k_1 = (((LAMBDA (m, k): k + 1))(m_1, k_0)):: int
[-4]  (((LAMBDA (m, k): k < n))(m_0, k_0))
{-5}  0 < k_0 AND k_0 <= n
{-6}  0 <= m_0 AND m_0 < k_0
{-7}  FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)
  |-------
{1}   n - k_1 < n - k_0

nil

cc__loop.2.1.2.2.2.1 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__branch:transition/trs1__branch__trs1__branch__trs2:transition/trs1__branch__trs1__branch__stmt7:transition;

[-1]  (((LAMBDA (m, k): a(m) >= a(k)))(m_0, k_0))
[-2]  m_1 = (((LAMBDA (m, k): k))(m_0, k_0)):: int
[-3]  k_1 = (((LAMBDA (m, k): k + 1))(m_1, k_0)):: int
[-4]  (((LAMBDA (m, k): k < n))(m_0, k_0))
{-5}  0 < k_0 AND k_0 <= n
{-6}  0 <= m_0 AND m_0 < k_0
{-7}  FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)
  |-------
{1}   n - k_1 < n - k_0

Applying beta-reduction,
this simplifies to: 
cc__loop.2.1.2.2.2.1 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__branch:transition/trs1__branch__trs1__branch__trs2:transition/trs1__branch__trs1__branch__stmt7:transition;

{-1}  a(m_0) >= a(k_0)
{-2}  m_1 = k_0
{-3}  k_1 = k_0 + 1
{-4}  k_0 < n
[-5]  0 < k_0 AND k_0 <= n
[-6]  0 <= m_0 AND m_0 < k_0
[-7]  FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)
  |-------
[1]   n - k_1 < n - k_0

No change on: (skip)
cc__loop.2.1.2.2.2.1 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__branch:transition/trs1__branch__trs1__branch__trs2:transition/trs1__branch__trs1__branch__stmt7:transition;

[-1]  a(m_0) >= a(k_0)
[-2]  m_1 = k_0
[-3]  k_1 = k_0 + 1
[-4]  k_0 < n
[-5]  0 < k_0 AND k_0 <= n
[-6]  0 <= m_0 AND m_0 < k_0
[-7]  FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)
  |-------
[1]   n - k_1 < n - k_0


Attempted proof of cc__loop.2.1.2.2.2.1 failed.

Attempted proof of cc__loop.2.1.2.2.2.1 failed.
cc__loop.2.1.2.2.2.1 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__branch:transition/trs1__branch__trs1__branch__trs2:transition/trs1__branch__trs1__branch__stmt7:transition;

{-1}  a(m_0) >= a(k_0)
{-2}  m_1 = k_0
{-3}  k_1 = k_0 + 1
{-4}  k_0 < n
[-5]  0 < k_0 AND k_0 <= n
[-6]  0 <= m_0 AND m_0 < k_0
[-7]  FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)
  |-------
[1]   n - k_1 < n - k_0

-*-SOCOS-*-
(left-condition (sequent ("a(m_0) >= a(k_0)" "m_1 = k_0" "k_1 = k_0 + 1" "k_0 < n" "0 < k_0 AND k_0 <= n" "0 <= m_0 AND m_0 < k_0" "FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)") ("n - k_1 < n - k_0")))
-*-*-*-*-*-


nil

No change on: (socos-skip-msg (left-condition (sequent ("a(m_0) >= a(k_0)" "m_1 = k_0" "k_1 = k_0 + 1" "k_0 < n" "0 < k_0 AND k_0 <= n" "0 <= m_0 AND m_0 < k_0" "FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)") ("n - k_1 < n - k_0"))))
cc__loop.2.1.2.2.2.1 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__branch:transition/trs1__branch__trs1__branch__trs2:transition/trs1__branch__trs1__branch__stmt7:transition;

{-1}  a(m_0) >= a(k_0)
{-2}  m_1 = k_0
{-3}  k_1 = k_0 + 1
{-4}  k_0 < n
[-5]  0 < k_0 AND k_0 <= n
[-6]  0 <= m_0 AND m_0 < k_0
[-7]  FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)
  |-------
[1]   n - k_1 < n - k_0

nil

cc__loop.2.1.2.2.2.1 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__branch:transition/trs1__branch__trs1__branch__trs2:transition/trs1__branch__trs1__branch__stmt7:transition;

{-1}  a(m_0) >= a(k_0)
{-2}  m_1 = k_0
{-3}  k_1 = k_0 + 1
{-4}  k_0 < n
[-5]  0 < k_0 AND k_0 <= n
[-6]  0 <= m_0 AND m_0 < k_0
[-7]  FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)
  |-------
[1]   n - k_1 < n - k_0

Postponing cc__loop.2.1.2.2.2.1.

cc__loop.2.1.2.2.2.2 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__branch:transition/trs1__branch__trs1__branch__trs2:transition;

[-1]  (((LAMBDA (m, k): a(m) >= a(k)))(m_0, k_0))
[-2]  m_1 = (((LAMBDA (m, k): k))(m_0, k_0)):: int
[-3]  k_1 = (((LAMBDA (m, k): k + 1))(m_1, k_0)):: int
[-4]  (((LAMBDA (m, k): k < n))(m_0, k_0))
[-5]  sit__loop(m_0, k_0)
  |-------
{1}   (sit__loop(m_1, k_1))

Adding comment: min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__branch:transition/trs1__branch__trs1__branch__trs2:transition/trs1__branch__trs1__branch__trs2__goto:transition;
this simplifies to: 
cc__loop.2.1.2.2.2.2 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__branch:transition/trs1__branch__trs1__branch__trs2:transition/trs1__branch__trs1__branch__trs2__goto:transition;

[-1]  (((LAMBDA (m, k): a(m) >= a(k)))(m_0, k_0))
[-2]  m_1 = (((LAMBDA (m, k): k))(m_0, k_0)):: int
[-3]  k_1 = (((LAMBDA (m, k): k + 1))(m_1, k_0)):: int
[-4]  (((LAMBDA (m, k): k < n))(m_0, k_0))
[-5]  sit__loop(m_0, k_0)
  |-------
[1]   (sit__loop(m_1, k_1))

-*-SOCOS-*-
(uid "min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__branch:transition/trs1__branch__trs1__branch__trs2:transition/trs1__branch__trs1__branch__trs2__goto:transition;")
-*-*-*-*-*-


nil

No change on: (socos-skip-msg (uid "min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__branch:transition/trs1__branch__trs1__branch__trs2:transition/trs1__branch__trs1__branch__trs2__goto:transition;"))
cc__loop.2.1.2.2.2.2 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__branch:transition/trs1__branch__trs1__branch__trs2:transition/trs1__branch__trs1__branch__trs2__goto:transition;

[-1]  (((LAMBDA (m, k): a(m) >= a(k)))(m_0, k_0))
[-2]  m_1 = (((LAMBDA (m, k): k))(m_0, k_0)):: int
[-3]  k_1 = (((LAMBDA (m, k): k + 1))(m_1, k_0)):: int
[-4]  (((LAMBDA (m, k): k < n))(m_0, k_0))
[-5]  sit__loop(m_0, k_0)
  |-------
[1]   (sit__loop(m_1, k_1))

Postponing cc__loop.2.1.2.2.2.2.

cc__loop.2.1.2.2.2.2 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__branch:transition/trs1__branch__trs1__branch__trs2:transition/trs1__branch__trs1__branch__trs2__goto:transition;

[-1]  (((LAMBDA (m, k): a(m) >= a(k)))(m_0, k_0))
[-2]  m_1 = (((LAMBDA (m, k): k))(m_0, k_0)):: int
[-3]  k_1 = (((LAMBDA (m, k): k + 1))(m_1, k_0)):: int
[-4]  (((LAMBDA (m, k): k < n))(m_0, k_0))
[-5]  sit__loop(m_0, k_0)
  |-------
[1]   (sit__loop(m_1, k_1))

No change on: (expand "sit__ini__" - :assert? none)
cc__loop.2.1.2.2.2.2 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__branch:transition/trs1__branch__trs1__branch__trs2:transition/trs1__branch__trs1__branch__trs2__goto:transition;

[-1]  (((LAMBDA (m, k): a(m) >= a(k)))(m_0, k_0))
[-2]  m_1 = (((LAMBDA (m, k): k))(m_0, k_0)):: int
[-3]  k_1 = (((LAMBDA (m, k): k + 1))(m_1, k_0)):: int
[-4]  (((LAMBDA (m, k): k < n))(m_0, k_0))
[-5]  sit__loop(m_0, k_0)
  |-------
[1]   (sit__loop(m_1, k_1))

No change on: (expand "spec__min__min.pre__" - :assert? none)
cc__loop.2.1.2.2.2.2 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__branch:transition/trs1__branch__trs1__branch__trs2:transition/trs1__branch__trs1__branch__trs2__goto:transition;

[-1]  (((LAMBDA (m, k): a(m) >= a(k)))(m_0, k_0))
[-2]  m_1 = (((LAMBDA (m, k): k))(m_0, k_0)):: int
[-3]  k_1 = (((LAMBDA (m, k): k + 1))(m_1, k_0)):: int
[-4]  (((LAMBDA (m, k): k < n))(m_0, k_0))
[-5]  sit__loop(m_0, k_0)
  |-------
[1]   (sit__loop(m_1, k_1))

Expanding the definition of sit__loop,
this simplifies to: 
cc__loop.2.1.2.2.2.2 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__branch:transition/trs1__branch__trs1__branch__trs2:transition/trs1__branch__trs1__branch__trs2__goto:transition;

[-1]  (((LAMBDA (m, k): a(m) >= a(k)))(m_0, k_0))
[-2]  m_1 = (((LAMBDA (m, k): k))(m_0, k_0)):: int
[-3]  k_1 = (((LAMBDA (m, k): k + 1))(m_1, k_0)):: int
[-4]  (((LAMBDA (m, k): k < n))(m_0, k_0))
{-5}  (id(0 < k_0 AND k_0 <= n)) AND
       (id(0 <= m_0 AND m_0 < k_0)) AND
        (id(FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)))
  |-------
[1]   (sit__loop(m_1, k_1))

No change on: (expand "sit__fin__post__" - :assert? none)
cc__loop.2.1.2.2.2.2 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__branch:transition/trs1__branch__trs1__branch__trs2:transition/trs1__branch__trs1__branch__trs2__goto:transition;

[-1]  (((LAMBDA (m, k): a(m) >= a(k)))(m_0, k_0))
[-2]  m_1 = (((LAMBDA (m, k): k))(m_0, k_0)):: int
[-3]  k_1 = (((LAMBDA (m, k): k + 1))(m_1, k_0)):: int
[-4]  (((LAMBDA (m, k): k < n))(m_0, k_0))
{-5}  (id(0 < k_0 AND k_0 <= n)) AND
       (id(0 <= m_0 AND m_0 < k_0)) AND
        (id(FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)))
  |-------
[1]   (sit__loop(m_1, k_1))

No change on: (expand "spec__min__min.post__" - :assert? none)
cc__loop.2.1.2.2.2.2 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__branch:transition/trs1__branch__trs1__branch__trs2:transition/trs1__branch__trs1__branch__trs2__goto:transition;

[-1]  (((LAMBDA (m, k): a(m) >= a(k)))(m_0, k_0))
[-2]  m_1 = (((LAMBDA (m, k): k))(m_0, k_0)):: int
[-3]  k_1 = (((LAMBDA (m, k): k + 1))(m_1, k_0)):: int
[-4]  (((LAMBDA (m, k): k < n))(m_0, k_0))
{-5}  (id(0 < k_0 AND k_0 <= n)) AND
       (id(0 <= m_0 AND m_0 < k_0)) AND
        (id(FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)))
  |-------
[1]   (sit__loop(m_1, k_1))

Postponing cc__loop.2.1.2.2.2.2.

cc__loop.2.1.2.2.2.2 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__branch:transition/trs1__branch__trs1__branch__trs2:transition/trs1__branch__trs1__branch__trs2__goto:transition;

[-1]  (((LAMBDA (m, k): a(m) >= a(k)))(m_0, k_0))
[-2]  m_1 = (((LAMBDA (m, k): k))(m_0, k_0)):: int
[-3]  k_1 = (((LAMBDA (m, k): k + 1))(m_1, k_0)):: int
[-4]  (((LAMBDA (m, k): k < n))(m_0, k_0))
{-5}  (id(0 < k_0 AND k_0 <= n)) AND
       (id(0 <= m_0 AND m_0 < k_0)) AND
        (id(FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)))
  |-------
[1]   (sit__loop(m_1, k_1))

No change on: (expand "sit__ini__" + :assert? none)
cc__loop.2.1.2.2.2.2 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__branch:transition/trs1__branch__trs1__branch__trs2:transition/trs1__branch__trs1__branch__trs2__goto:transition;

[-1]  (((LAMBDA (m, k): a(m) >= a(k)))(m_0, k_0))
[-2]  m_1 = (((LAMBDA (m, k): k))(m_0, k_0)):: int
[-3]  k_1 = (((LAMBDA (m, k): k + 1))(m_1, k_0)):: int
[-4]  (((LAMBDA (m, k): k < n))(m_0, k_0))
{-5}  (id(0 < k_0 AND k_0 <= n)) AND
       (id(0 <= m_0 AND m_0 < k_0)) AND
        (id(FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)))
  |-------
[1]   (sit__loop(m_1, k_1))

No change on: (expand "spec__min__min.pre__" + :assert? none)
cc__loop.2.1.2.2.2.2 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__branch:transition/trs1__branch__trs1__branch__trs2:transition/trs1__branch__trs1__branch__trs2__goto:transition;

[-1]  (((LAMBDA (m, k): a(m) >= a(k)))(m_0, k_0))
[-2]  m_1 = (((LAMBDA (m, k): k))(m_0, k_0)):: int
[-3]  k_1 = (((LAMBDA (m, k): k + 1))(m_1, k_0)):: int
[-4]  (((LAMBDA (m, k): k < n))(m_0, k_0))
{-5}  (id(0 < k_0 AND k_0 <= n)) AND
       (id(0 <= m_0 AND m_0 < k_0)) AND
        (id(FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)))
  |-------
[1]   (sit__loop(m_1, k_1))

Expanding the definition of sit__loop,
this simplifies to: 
cc__loop.2.1.2.2.2.2 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__branch:transition/trs1__branch__trs1__branch__trs2:transition/trs1__branch__trs1__branch__trs2__goto:transition;

[-1]  (((LAMBDA (m, k): a(m) >= a(k)))(m_0, k_0))
[-2]  m_1 = (((LAMBDA (m, k): k))(m_0, k_0)):: int
[-3]  k_1 = (((LAMBDA (m, k): k + 1))(m_1, k_0)):: int
[-4]  (((LAMBDA (m, k): k < n))(m_0, k_0))
[-5]  (id(0 < k_0 AND k_0 <= n)) AND
       (id(0 <= m_0 AND m_0 < k_0)) AND
        (id(FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)))
  |-------
{1}   (id(0 < k_1 AND k_1 <= n)) AND
       (id(0 <= m_1 AND m_1 < k_1)) AND
        (id(FORALL (i: int): 0 <= i AND i < k_1 => a(m_1) <= a(i)))

No change on: (expand "sit__fin__post__" + :assert? none)
cc__loop.2.1.2.2.2.2 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__branch:transition/trs1__branch__trs1__branch__trs2:transition/trs1__branch__trs1__branch__trs2__goto:transition;

[-1]  (((LAMBDA (m, k): a(m) >= a(k)))(m_0, k_0))
[-2]  m_1 = (((LAMBDA (m, k): k))(m_0, k_0)):: int
[-3]  k_1 = (((LAMBDA (m, k): k + 1))(m_1, k_0)):: int
[-4]  (((LAMBDA (m, k): k < n))(m_0, k_0))
[-5]  (id(0 < k_0 AND k_0 <= n)) AND
       (id(0 <= m_0 AND m_0 < k_0)) AND
        (id(FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)))
  |-------
{1}   (id(0 < k_1 AND k_1 <= n)) AND
       (id(0 <= m_1 AND m_1 < k_1)) AND
        (id(FORALL (i: int): 0 <= i AND i < k_1 => a(m_1) <= a(i)))

No change on: (expand "spec__min__min.post__" + :assert? none)
cc__loop.2.1.2.2.2.2 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__branch:transition/trs1__branch__trs1__branch__trs2:transition/trs1__branch__trs1__branch__trs2__goto:transition;

[-1]  (((LAMBDA (m, k): a(m) >= a(k)))(m_0, k_0))
[-2]  m_1 = (((LAMBDA (m, k): k))(m_0, k_0)):: int
[-3]  k_1 = (((LAMBDA (m, k): k + 1))(m_1, k_0)):: int
[-4]  (((LAMBDA (m, k): k < n))(m_0, k_0))
[-5]  (id(0 < k_0 AND k_0 <= n)) AND
       (id(0 <= m_0 AND m_0 < k_0)) AND
        (id(FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)))
  |-------
{1}   (id(0 < k_1 AND k_1 <= n)) AND
       (id(0 <= m_1 AND m_1 < k_1)) AND
        (id(FORALL (i: int): 0 <= i AND i < k_1 => a(m_1) <= a(i)))

Postponing cc__loop.2.1.2.2.2.2.

cc__loop.2.1.2.2.2.2 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__branch:transition/trs1__branch__trs1__branch__trs2:transition/trs1__branch__trs1__branch__trs2__goto:transition;

[-1]  (((LAMBDA (m, k): a(m) >= a(k)))(m_0, k_0))
[-2]  m_1 = (((LAMBDA (m, k): k))(m_0, k_0)):: int
[-3]  k_1 = (((LAMBDA (m, k): k + 1))(m_1, k_0)):: int
[-4]  (((LAMBDA (m, k): k < n))(m_0, k_0))
[-5]  (id(0 < k_0 AND k_0 <= n)) AND
       (id(0 <= m_0 AND m_0 < k_0)) AND
        (id(FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)))
  |-------
{1}   (id(0 < k_1 AND k_1 <= n)) AND
       (id(0 <= m_1 AND m_1 < k_1)) AND
        (id(FORALL (i: int): 0 <= i AND i < k_1 => a(m_1) <= a(i)))

Splitting conjunction into branches,
this yields  3 subgoals: 
cc__loop.2.1.2.2.2.2.1 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__branch:transition/trs1__branch__trs1__branch__trs2:transition/trs1__branch__trs1__branch__trs2__goto:transition;

[-1]  (((LAMBDA (m, k): a(m) >= a(k)))(m_0, k_0))
[-2]  m_1 = (((LAMBDA (m, k): k))(m_0, k_0)):: int
[-3]  k_1 = (((LAMBDA (m, k): k + 1))(m_1, k_0)):: int
[-4]  (((LAMBDA (m, k): k < n))(m_0, k_0))
[-5]  (id(0 < k_0 AND k_0 <= n)) AND
       (id(0 <= m_0 AND m_0 < k_0)) AND
        (id(FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)))
  |-------
{1}   (id(0 < k_1 AND k_1 <= n))

Adding comment: min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__branch:transition/trs1__branch__trs1__branch__trs2:transition/trs1__branch__trs1__branch__trs2__goto:transition/trs1__branch__trs1__branch__trs2__goto_check_loop_1:transition;
this simplifies to: 
cc__loop.2.1.2.2.2.2.1 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__branch:transition/trs1__branch__trs1__branch__trs2:transition/trs1__branch__trs1__branch__trs2__goto:transition/trs1__branch__trs1__branch__trs2__goto_check_loop_1:transition;

[-1]  (((LAMBDA (m, k): a(m) >= a(k)))(m_0, k_0))
[-2]  m_1 = (((LAMBDA (m, k): k))(m_0, k_0)):: int
[-3]  k_1 = (((LAMBDA (m, k): k + 1))(m_1, k_0)):: int
[-4]  (((LAMBDA (m, k): k < n))(m_0, k_0))
[-5]  (id(0 < k_0 AND k_0 <= n)) AND
       (id(0 <= m_0 AND m_0 < k_0)) AND
        (id(FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)))
  |-------
[1]   (id(0 < k_1 AND k_1 <= n))

-*-SOCOS-*-
(uid "min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__branch:transition/trs1__branch__trs1__branch__trs2:transition/trs1__branch__trs1__branch__trs2__goto:transition/trs1__branch__trs1__branch__trs2__goto_check_loop_1:transition;")
-*-*-*-*-*-


nil

No change on: (socos-skip-msg (uid "min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__branch:transition/trs1__branch__trs1__branch__trs2:transition/trs1__branch__trs1__branch__trs2__goto:transition/trs1__branch__trs1__branch__trs2__goto_check_loop_1:transition;"))
cc__loop.2.1.2.2.2.2.1 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__branch:transition/trs1__branch__trs1__branch__trs2:transition/trs1__branch__trs1__branch__trs2__goto:transition/trs1__branch__trs1__branch__trs2__goto_check_loop_1:transition;

[-1]  (((LAMBDA (m, k): a(m) >= a(k)))(m_0, k_0))
[-2]  m_1 = (((LAMBDA (m, k): k))(m_0, k_0)):: int
[-3]  k_1 = (((LAMBDA (m, k): k + 1))(m_1, k_0)):: int
[-4]  (((LAMBDA (m, k): k < n))(m_0, k_0))
[-5]  (id(0 < k_0 AND k_0 <= n)) AND
       (id(0 <= m_0 AND m_0 < k_0)) AND
        (id(FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)))
  |-------
[1]   (id(0 < k_1 AND k_1 <= n))

Postponing cc__loop.2.1.2.2.2.2.1.

cc__loop.2.1.2.2.2.2.1 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__branch:transition/trs1__branch__trs1__branch__trs2:transition/trs1__branch__trs1__branch__trs2__goto:transition/trs1__branch__trs1__branch__trs2__goto_check_loop_1:transition;

[-1]  (((LAMBDA (m, k): a(m) >= a(k)))(m_0, k_0))
[-2]  m_1 = (((LAMBDA (m, k): k))(m_0, k_0)):: int
[-3]  k_1 = (((LAMBDA (m, k): k + 1))(m_1, k_0)):: int
[-4]  (((LAMBDA (m, k): k < n))(m_0, k_0))
[-5]  (id(0 < k_0 AND k_0 <= n)) AND
       (id(0 <= m_0 AND m_0 < k_0)) AND
        (id(FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)))
  |-------
[1]   (id(0 < k_1 AND k_1 <= n))

-*-SOCOS-*-
(check-condition "min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__branch:transition/trs1__branch__trs1__branch__trs2:transition/trs1__branch__trs1__branch__trs2__goto:transition/trs1__branch__trs1__branch__trs2__goto_check_loop_1:transition;")
-*-*-*-*-*-


nil

No change on: (socos-skip-msg (check-condition "min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__branch:transition/trs1__branch__trs1__branch__trs2:transition/trs1__branch__trs1__branch__trs2__goto:transition/trs1__branch__trs1__branch__trs2__goto_check_loop_1:transition;"))
cc__loop.2.1.2.2.2.2.1 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__branch:transition/trs1__branch__trs1__branch__trs2:transition/trs1__branch__trs1__branch__trs2__goto:transition/trs1__branch__trs1__branch__trs2__goto_check_loop_1:transition;

[-1]  (((LAMBDA (m, k): a(m) >= a(k)))(m_0, k_0))
[-2]  m_1 = (((LAMBDA (m, k): k))(m_0, k_0)):: int
[-3]  k_1 = (((LAMBDA (m, k): k + 1))(m_1, k_0)):: int
[-4]  (((LAMBDA (m, k): k < n))(m_0, k_0))
[-5]  (id(0 < k_0 AND k_0 <= n)) AND
       (id(0 <= m_0 AND m_0 < k_0)) AND
        (id(FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)))
  |-------
[1]   (id(0 < k_1 AND k_1 <= n))

Expanding the definition of id,
this simplifies to: 
cc__loop.2.1.2.2.2.2.1 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__branch:transition/trs1__branch__trs1__branch__trs2:transition/trs1__branch__trs1__branch__trs2__goto:transition/trs1__branch__trs1__branch__trs2__goto_check_loop_1:transition;

[-1]  (((LAMBDA (m, k): a(m) >= a(k)))(m_0, k_0))
[-2]  m_1 = (((LAMBDA (m, k): k))(m_0, k_0)):: int
[-3]  k_1 = (((LAMBDA (m, k): k + 1))(m_1, k_0)):: int
[-4]  (((LAMBDA (m, k): k < n))(m_0, k_0))
{-5}       0 < k_0 AND k_0 <= n AND 0 <= m_0 AND m_0 < k_0
       AND FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)
  |-------
{1}   0 < k_1 AND k_1 <= n

nil

cc__loop.2.1.2.2.2.2.1 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__branch:transition/trs1__branch__trs1__branch__trs2:transition/trs1__branch__trs1__branch__trs2__goto:transition/trs1__branch__trs1__branch__trs2__goto_check_loop_1:transition;

[-1]  (((LAMBDA (m, k): a(m) >= a(k)))(m_0, k_0))
[-2]  m_1 = (((LAMBDA (m, k): k))(m_0, k_0)):: int
[-3]  k_1 = (((LAMBDA (m, k): k + 1))(m_1, k_0)):: int
[-4]  (((LAMBDA (m, k): k < n))(m_0, k_0))
{-5}       0 < k_0 AND k_0 <= n AND 0 <= m_0 AND m_0 < k_0
       AND FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)
  |-------
{1}   0 < k_1 AND k_1 <= n

Applying beta-reduction,
this simplifies to: 
cc__loop.2.1.2.2.2.2.1 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__branch:transition/trs1__branch__trs1__branch__trs2:transition/trs1__branch__trs1__branch__trs2__goto:transition/trs1__branch__trs1__branch__trs2__goto_check_loop_1:transition;

{-1}  a(m_0) >= a(k_0)
{-2}  m_1 = k_0
{-3}  k_1 = k_0 + 1
{-4}  k_0 < n
[-5]       0 < k_0 AND k_0 <= n AND 0 <= m_0 AND m_0 < k_0
       AND FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)
  |-------
[1]   0 < k_1 AND k_1 <= n

No change on: (skip)
cc__loop.2.1.2.2.2.2.1 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__branch:transition/trs1__branch__trs1__branch__trs2:transition/trs1__branch__trs1__branch__trs2__goto:transition/trs1__branch__trs1__branch__trs2__goto_check_loop_1:transition;

[-1]  a(m_0) >= a(k_0)
[-2]  m_1 = k_0
[-3]  k_1 = k_0 + 1
[-4]  k_0 < n
[-5]       0 < k_0 AND k_0 <= n AND 0 <= m_0 AND m_0 < k_0
       AND FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)
  |-------
[1]   0 < k_1 AND k_1 <= n


Attempted proof of cc__loop.2.1.2.2.2.2.1 failed.

Attempted proof of cc__loop.2.1.2.2.2.2.1 failed.
cc__loop.2.1.2.2.2.2.1 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__branch:transition/trs1__branch__trs1__branch__trs2:transition/trs1__branch__trs1__branch__trs2__goto:transition/trs1__branch__trs1__branch__trs2__goto_check_loop_1:transition;

{-1}  a(m_0) >= a(k_0)
{-2}  m_1 = k_0
{-3}  k_1 = k_0 + 1
{-4}  k_0 < n
[-5]       0 < k_0 AND k_0 <= n AND 0 <= m_0 AND m_0 < k_0
       AND FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)
  |-------
[1]   0 < k_1 AND k_1 <= n

-*-SOCOS-*-
(left-condition (sequent ("a(m_0) >= a(k_0)" "m_1 = k_0" "k_1 = k_0 + 1" "k_0 < n" "     0 < k_0 AND k_0 <= n AND 0 <= m_0 AND m_0 < k_0
       AND FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)") ("0 < k_1 AND k_1 <= n")))
-*-*-*-*-*-


nil

No change on: (socos-skip-msg (left-condition (sequent ("a(m_0) >= a(k_0)" "m_1 = k_0" "k_1 = k_0 + 1" "k_0 < n" "     0 < k_0 AND k_0 <= n AND 0 <= m_0 AND m_0 < k_0
       AND FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)") ("0 < k_1 AND k_1 <= n"))))
cc__loop.2.1.2.2.2.2.1 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__branch:transition/trs1__branch__trs1__branch__trs2:transition/trs1__branch__trs1__branch__trs2__goto:transition/trs1__branch__trs1__branch__trs2__goto_check_loop_1:transition;

{-1}  a(m_0) >= a(k_0)
{-2}  m_1 = k_0
{-3}  k_1 = k_0 + 1
{-4}  k_0 < n
[-5]       0 < k_0 AND k_0 <= n AND 0 <= m_0 AND m_0 < k_0
       AND FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)
  |-------
[1]   0 < k_1 AND k_1 <= n

nil

cc__loop.2.1.2.2.2.2.1 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__branch:transition/trs1__branch__trs1__branch__trs2:transition/trs1__branch__trs1__branch__trs2__goto:transition/trs1__branch__trs1__branch__trs2__goto_check_loop_1:transition;

{-1}  a(m_0) >= a(k_0)
{-2}  m_1 = k_0
{-3}  k_1 = k_0 + 1
{-4}  k_0 < n
[-5]       0 < k_0 AND k_0 <= n AND 0 <= m_0 AND m_0 < k_0
       AND FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)
  |-------
[1]   0 < k_1 AND k_1 <= n

Postponing cc__loop.2.1.2.2.2.2.1.

cc__loop.2.1.2.2.2.2.2 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__branch:transition/trs1__branch__trs1__branch__trs2:transition/trs1__branch__trs1__branch__trs2__goto:transition;

[-1]  (((LAMBDA (m, k): a(m) >= a(k)))(m_0, k_0))
[-2]  m_1 = (((LAMBDA (m, k): k))(m_0, k_0)):: int
[-3]  k_1 = (((LAMBDA (m, k): k + 1))(m_1, k_0)):: int
[-4]  (((LAMBDA (m, k): k < n))(m_0, k_0))
[-5]  (id(0 < k_0 AND k_0 <= n)) AND
       (id(0 <= m_0 AND m_0 < k_0)) AND
        (id(FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)))
  |-------
{1}   (id(0 <= m_1 AND m_1 < k_1))

Adding comment: min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__branch:transition/trs1__branch__trs1__branch__trs2:transition/trs1__branch__trs1__branch__trs2__goto:transition/trs1__branch__trs1__branch__trs2__goto_check_loop_2:transition;
this simplifies to: 
cc__loop.2.1.2.2.2.2.2 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__branch:transition/trs1__branch__trs1__branch__trs2:transition/trs1__branch__trs1__branch__trs2__goto:transition/trs1__branch__trs1__branch__trs2__goto_check_loop_2:transition;

[-1]  (((LAMBDA (m, k): a(m) >= a(k)))(m_0, k_0))
[-2]  m_1 = (((LAMBDA (m, k): k))(m_0, k_0)):: int
[-3]  k_1 = (((LAMBDA (m, k): k + 1))(m_1, k_0)):: int
[-4]  (((LAMBDA (m, k): k < n))(m_0, k_0))
[-5]  (id(0 < k_0 AND k_0 <= n)) AND
       (id(0 <= m_0 AND m_0 < k_0)) AND
        (id(FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)))
  |-------
[1]   (id(0 <= m_1 AND m_1 < k_1))

-*-SOCOS-*-
(uid "min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__branch:transition/trs1__branch__trs1__branch__trs2:transition/trs1__branch__trs1__branch__trs2__goto:transition/trs1__branch__trs1__branch__trs2__goto_check_loop_2:transition;")
-*-*-*-*-*-


nil

No change on: (socos-skip-msg (uid "min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__branch:transition/trs1__branch__trs1__branch__trs2:transition/trs1__branch__trs1__branch__trs2__goto:transition/trs1__branch__trs1__branch__trs2__goto_check_loop_2:transition;"))
cc__loop.2.1.2.2.2.2.2 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__branch:transition/trs1__branch__trs1__branch__trs2:transition/trs1__branch__trs1__branch__trs2__goto:transition/trs1__branch__trs1__branch__trs2__goto_check_loop_2:transition;

[-1]  (((LAMBDA (m, k): a(m) >= a(k)))(m_0, k_0))
[-2]  m_1 = (((LAMBDA (m, k): k))(m_0, k_0)):: int
[-3]  k_1 = (((LAMBDA (m, k): k + 1))(m_1, k_0)):: int
[-4]  (((LAMBDA (m, k): k < n))(m_0, k_0))
[-5]  (id(0 < k_0 AND k_0 <= n)) AND
       (id(0 <= m_0 AND m_0 < k_0)) AND
        (id(FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)))
  |-------
[1]   (id(0 <= m_1 AND m_1 < k_1))

Postponing cc__loop.2.1.2.2.2.2.2.

cc__loop.2.1.2.2.2.2.2 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__branch:transition/trs1__branch__trs1__branch__trs2:transition/trs1__branch__trs1__branch__trs2__goto:transition/trs1__branch__trs1__branch__trs2__goto_check_loop_2:transition;

[-1]  (((LAMBDA (m, k): a(m) >= a(k)))(m_0, k_0))
[-2]  m_1 = (((LAMBDA (m, k): k))(m_0, k_0)):: int
[-3]  k_1 = (((LAMBDA (m, k): k + 1))(m_1, k_0)):: int
[-4]  (((LAMBDA (m, k): k < n))(m_0, k_0))
[-5]  (id(0 < k_0 AND k_0 <= n)) AND
       (id(0 <= m_0 AND m_0 < k_0)) AND
        (id(FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)))
  |-------
[1]   (id(0 <= m_1 AND m_1 < k_1))

-*-SOCOS-*-
(check-condition "min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__branch:transition/trs1__branch__trs1__branch__trs2:transition/trs1__branch__trs1__branch__trs2__goto:transition/trs1__branch__trs1__branch__trs2__goto_check_loop_2:transition;")
-*-*-*-*-*-


nil

No change on: (socos-skip-msg (check-condition "min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__branch:transition/trs1__branch__trs1__branch__trs2:transition/trs1__branch__trs1__branch__trs2__goto:transition/trs1__branch__trs1__branch__trs2__goto_check_loop_2:transition;"))
cc__loop.2.1.2.2.2.2.2 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__branch:transition/trs1__branch__trs1__branch__trs2:transition/trs1__branch__trs1__branch__trs2__goto:transition/trs1__branch__trs1__branch__trs2__goto_check_loop_2:transition;

[-1]  (((LAMBDA (m, k): a(m) >= a(k)))(m_0, k_0))
[-2]  m_1 = (((LAMBDA (m, k): k))(m_0, k_0)):: int
[-3]  k_1 = (((LAMBDA (m, k): k + 1))(m_1, k_0)):: int
[-4]  (((LAMBDA (m, k): k < n))(m_0, k_0))
[-5]  (id(0 < k_0 AND k_0 <= n)) AND
       (id(0 <= m_0 AND m_0 < k_0)) AND
        (id(FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)))
  |-------
[1]   (id(0 <= m_1 AND m_1 < k_1))

Expanding the definition of id,
this simplifies to: 
cc__loop.2.1.2.2.2.2.2 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__branch:transition/trs1__branch__trs1__branch__trs2:transition/trs1__branch__trs1__branch__trs2__goto:transition/trs1__branch__trs1__branch__trs2__goto_check_loop_2:transition;

[-1]  (((LAMBDA (m, k): a(m) >= a(k)))(m_0, k_0))
[-2]  m_1 = (((LAMBDA (m, k): k))(m_0, k_0)):: int
[-3]  k_1 = (((LAMBDA (m, k): k + 1))(m_1, k_0)):: int
[-4]  (((LAMBDA (m, k): k < n))(m_0, k_0))
{-5}       0 < k_0 AND k_0 <= n AND 0 <= m_0 AND m_0 < k_0
       AND FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)
  |-------
{1}   0 <= m_1 AND m_1 < k_1

nil

cc__loop.2.1.2.2.2.2.2 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__branch:transition/trs1__branch__trs1__branch__trs2:transition/trs1__branch__trs1__branch__trs2__goto:transition/trs1__branch__trs1__branch__trs2__goto_check_loop_2:transition;

[-1]  (((LAMBDA (m, k): a(m) >= a(k)))(m_0, k_0))
[-2]  m_1 = (((LAMBDA (m, k): k))(m_0, k_0)):: int
[-3]  k_1 = (((LAMBDA (m, k): k + 1))(m_1, k_0)):: int
[-4]  (((LAMBDA (m, k): k < n))(m_0, k_0))
{-5}       0 < k_0 AND k_0 <= n AND 0 <= m_0 AND m_0 < k_0
       AND FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)
  |-------
{1}   0 <= m_1 AND m_1 < k_1

Applying beta-reduction,
this simplifies to: 
cc__loop.2.1.2.2.2.2.2 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__branch:transition/trs1__branch__trs1__branch__trs2:transition/trs1__branch__trs1__branch__trs2__goto:transition/trs1__branch__trs1__branch__trs2__goto_check_loop_2:transition;

{-1}  a(m_0) >= a(k_0)
{-2}  m_1 = k_0
{-3}  k_1 = k_0 + 1
{-4}  k_0 < n
[-5]       0 < k_0 AND k_0 <= n AND 0 <= m_0 AND m_0 < k_0
       AND FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)
  |-------
[1]   0 <= m_1 AND m_1 < k_1

No change on: (skip)
cc__loop.2.1.2.2.2.2.2 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__branch:transition/trs1__branch__trs1__branch__trs2:transition/trs1__branch__trs1__branch__trs2__goto:transition/trs1__branch__trs1__branch__trs2__goto_check_loop_2:transition;

[-1]  a(m_0) >= a(k_0)
[-2]  m_1 = k_0
[-3]  k_1 = k_0 + 1
[-4]  k_0 < n
[-5]       0 < k_0 AND k_0 <= n AND 0 <= m_0 AND m_0 < k_0
       AND FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)
  |-------
[1]   0 <= m_1 AND m_1 < k_1


Attempted proof of cc__loop.2.1.2.2.2.2.2 failed.

Attempted proof of cc__loop.2.1.2.2.2.2.2 failed.
cc__loop.2.1.2.2.2.2.2 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__branch:transition/trs1__branch__trs1__branch__trs2:transition/trs1__branch__trs1__branch__trs2__goto:transition/trs1__branch__trs1__branch__trs2__goto_check_loop_2:transition;

{-1}  a(m_0) >= a(k_0)
{-2}  m_1 = k_0
{-3}  k_1 = k_0 + 1
{-4}  k_0 < n
[-5]       0 < k_0 AND k_0 <= n AND 0 <= m_0 AND m_0 < k_0
       AND FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)
  |-------
[1]   0 <= m_1 AND m_1 < k_1

-*-SOCOS-*-
(left-condition (sequent ("a(m_0) >= a(k_0)" "m_1 = k_0" "k_1 = k_0 + 1" "k_0 < n" "     0 < k_0 AND k_0 <= n AND 0 <= m_0 AND m_0 < k_0
       AND FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)") ("0 <= m_1 AND m_1 < k_1")))
-*-*-*-*-*-


nil

No change on: (socos-skip-msg (left-condition (sequent ("a(m_0) >= a(k_0)" "m_1 = k_0" "k_1 = k_0 + 1" "k_0 < n" "     0 < k_0 AND k_0 <= n AND 0 <= m_0 AND m_0 < k_0
       AND FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)") ("0 <= m_1 AND m_1 < k_1"))))
cc__loop.2.1.2.2.2.2.2 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__branch:transition/trs1__branch__trs1__branch__trs2:transition/trs1__branch__trs1__branch__trs2__goto:transition/trs1__branch__trs1__branch__trs2__goto_check_loop_2:transition;

{-1}  a(m_0) >= a(k_0)
{-2}  m_1 = k_0
{-3}  k_1 = k_0 + 1
{-4}  k_0 < n
[-5]       0 < k_0 AND k_0 <= n AND 0 <= m_0 AND m_0 < k_0
       AND FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)
  |-------
[1]   0 <= m_1 AND m_1 < k_1

nil

cc__loop.2.1.2.2.2.2.2 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__branch:transition/trs1__branch__trs1__branch__trs2:transition/trs1__branch__trs1__branch__trs2__goto:transition/trs1__branch__trs1__branch__trs2__goto_check_loop_2:transition;

{-1}  a(m_0) >= a(k_0)
{-2}  m_1 = k_0
{-3}  k_1 = k_0 + 1
{-4}  k_0 < n
[-5]       0 < k_0 AND k_0 <= n AND 0 <= m_0 AND m_0 < k_0
       AND FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)
  |-------
[1]   0 <= m_1 AND m_1 < k_1

Postponing cc__loop.2.1.2.2.2.2.2.

cc__loop.2.1.2.2.2.2.3 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__branch:transition/trs1__branch__trs1__branch__trs2:transition/trs1__branch__trs1__branch__trs2__goto:transition;

[-1]  (((LAMBDA (m, k): a(m) >= a(k)))(m_0, k_0))
[-2]  m_1 = (((LAMBDA (m, k): k))(m_0, k_0)):: int
[-3]  k_1 = (((LAMBDA (m, k): k + 1))(m_1, k_0)):: int
[-4]  (((LAMBDA (m, k): k < n))(m_0, k_0))
[-5]  (id(0 < k_0 AND k_0 <= n)) AND
       (id(0 <= m_0 AND m_0 < k_0)) AND
        (id(FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)))
  |-------
{1}   (id(FORALL (i: int): 0 <= i AND i < k_1 => a(m_1) <= a(i)))

Adding comment: min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__branch:transition/trs1__branch__trs1__branch__trs2:transition/trs1__branch__trs1__branch__trs2__goto:transition/trs1__branch__trs1__branch__trs2__goto_check_loop_3:transition;
this simplifies to: 
cc__loop.2.1.2.2.2.2.3 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__branch:transition/trs1__branch__trs1__branch__trs2:transition/trs1__branch__trs1__branch__trs2__goto:transition/trs1__branch__trs1__branch__trs2__goto_check_loop_3:transition;

[-1]  (((LAMBDA (m, k): a(m) >= a(k)))(m_0, k_0))
[-2]  m_1 = (((LAMBDA (m, k): k))(m_0, k_0)):: int
[-3]  k_1 = (((LAMBDA (m, k): k + 1))(m_1, k_0)):: int
[-4]  (((LAMBDA (m, k): k < n))(m_0, k_0))
[-5]  (id(0 < k_0 AND k_0 <= n)) AND
       (id(0 <= m_0 AND m_0 < k_0)) AND
        (id(FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)))
  |-------
[1]   (id(FORALL (i: int): 0 <= i AND i < k_1 => a(m_1) <= a(i)))

-*-SOCOS-*-
(uid "min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__branch:transition/trs1__branch__trs1__branch__trs2:transition/trs1__branch__trs1__branch__trs2__goto:transition/trs1__branch__trs1__branch__trs2__goto_check_loop_3:transition;")
-*-*-*-*-*-


nil

No change on: (socos-skip-msg (uid "min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__branch:transition/trs1__branch__trs1__branch__trs2:transition/trs1__branch__trs1__branch__trs2__goto:transition/trs1__branch__trs1__branch__trs2__goto_check_loop_3:transition;"))
cc__loop.2.1.2.2.2.2.3 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__branch:transition/trs1__branch__trs1__branch__trs2:transition/trs1__branch__trs1__branch__trs2__goto:transition/trs1__branch__trs1__branch__trs2__goto_check_loop_3:transition;

[-1]  (((LAMBDA (m, k): a(m) >= a(k)))(m_0, k_0))
[-2]  m_1 = (((LAMBDA (m, k): k))(m_0, k_0)):: int
[-3]  k_1 = (((LAMBDA (m, k): k + 1))(m_1, k_0)):: int
[-4]  (((LAMBDA (m, k): k < n))(m_0, k_0))
[-5]  (id(0 < k_0 AND k_0 <= n)) AND
       (id(0 <= m_0 AND m_0 < k_0)) AND
        (id(FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)))
  |-------
[1]   (id(FORALL (i: int): 0 <= i AND i < k_1 => a(m_1) <= a(i)))

Postponing cc__loop.2.1.2.2.2.2.3.

cc__loop.2.1.2.2.2.2.3 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__branch:transition/trs1__branch__trs1__branch__trs2:transition/trs1__branch__trs1__branch__trs2__goto:transition/trs1__branch__trs1__branch__trs2__goto_check_loop_3:transition;

[-1]  (((LAMBDA (m, k): a(m) >= a(k)))(m_0, k_0))
[-2]  m_1 = (((LAMBDA (m, k): k))(m_0, k_0)):: int
[-3]  k_1 = (((LAMBDA (m, k): k + 1))(m_1, k_0)):: int
[-4]  (((LAMBDA (m, k): k < n))(m_0, k_0))
[-5]  (id(0 < k_0 AND k_0 <= n)) AND
       (id(0 <= m_0 AND m_0 < k_0)) AND
        (id(FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)))
  |-------
[1]   (id(FORALL (i: int): 0 <= i AND i < k_1 => a(m_1) <= a(i)))

-*-SOCOS-*-
(check-condition "min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__branch:transition/trs1__branch__trs1__branch__trs2:transition/trs1__branch__trs1__branch__trs2__goto:transition/trs1__branch__trs1__branch__trs2__goto_check_loop_3:transition;")
-*-*-*-*-*-


nil

No change on: (socos-skip-msg (check-condition "min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__branch:transition/trs1__branch__trs1__branch__trs2:transition/trs1__branch__trs1__branch__trs2__goto:transition/trs1__branch__trs1__branch__trs2__goto_check_loop_3:transition;"))
cc__loop.2.1.2.2.2.2.3 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__branch:transition/trs1__branch__trs1__branch__trs2:transition/trs1__branch__trs1__branch__trs2__goto:transition/trs1__branch__trs1__branch__trs2__goto_check_loop_3:transition;

[-1]  (((LAMBDA (m, k): a(m) >= a(k)))(m_0, k_0))
[-2]  m_1 = (((LAMBDA (m, k): k))(m_0, k_0)):: int
[-3]  k_1 = (((LAMBDA (m, k): k + 1))(m_1, k_0)):: int
[-4]  (((LAMBDA (m, k): k < n))(m_0, k_0))
[-5]  (id(0 < k_0 AND k_0 <= n)) AND
       (id(0 <= m_0 AND m_0 < k_0)) AND
        (id(FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)))
  |-------
[1]   (id(FORALL (i: int): 0 <= i AND i < k_1 => a(m_1) <= a(i)))

Expanding the definition of id,
this simplifies to: 
cc__loop.2.1.2.2.2.2.3 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__branch:transition/trs1__branch__trs1__branch__trs2:transition/trs1__branch__trs1__branch__trs2__goto:transition/trs1__branch__trs1__branch__trs2__goto_check_loop_3:transition;

[-1]  (((LAMBDA (m, k): a(m) >= a(k)))(m_0, k_0))
[-2]  m_1 = (((LAMBDA (m, k): k))(m_0, k_0)):: int
[-3]  k_1 = (((LAMBDA (m, k): k + 1))(m_1, k_0)):: int
[-4]  (((LAMBDA (m, k): k < n))(m_0, k_0))
{-5}       0 < k_0 AND k_0 <= n AND 0 <= m_0 AND m_0 < k_0
       AND FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)
  |-------
{1}   FORALL (i: int): 0 <= i AND i < k_1 => a(m_1) <= a(i)

nil

cc__loop.2.1.2.2.2.2.3 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__branch:transition/trs1__branch__trs1__branch__trs2:transition/trs1__branch__trs1__branch__trs2__goto:transition/trs1__branch__trs1__branch__trs2__goto_check_loop_3:transition;

[-1]  (((LAMBDA (m, k): a(m) >= a(k)))(m_0, k_0))
[-2]  m_1 = (((LAMBDA (m, k): k))(m_0, k_0)):: int
[-3]  k_1 = (((LAMBDA (m, k): k + 1))(m_1, k_0)):: int
[-4]  (((LAMBDA (m, k): k < n))(m_0, k_0))
{-5}       0 < k_0 AND k_0 <= n AND 0 <= m_0 AND m_0 < k_0
       AND FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)
  |-------
{1}   FORALL (i: int): 0 <= i AND i < k_1 => a(m_1) <= a(i)

Applying beta-reduction,
this simplifies to: 
cc__loop.2.1.2.2.2.2.3 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__branch:transition/trs1__branch__trs1__branch__trs2:transition/trs1__branch__trs1__branch__trs2__goto:transition/trs1__branch__trs1__branch__trs2__goto_check_loop_3:transition;

{-1}  a(m_0) >= a(k_0)
{-2}  m_1 = k_0
{-3}  k_1 = k_0 + 1
{-4}  k_0 < n
[-5]       0 < k_0 AND k_0 <= n AND 0 <= m_0 AND m_0 < k_0
       AND FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)
  |-------
[1]   FORALL (i: int): 0 <= i AND i < k_1 => a(m_1) <= a(i)

No change on: (skip)
cc__loop.2.1.2.2.2.2.3 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__branch:transition/trs1__branch__trs1__branch__trs2:transition/trs1__branch__trs1__branch__trs2__goto:transition/trs1__branch__trs1__branch__trs2__goto_check_loop_3:transition;

[-1]  a(m_0) >= a(k_0)
[-2]  m_1 = k_0
[-3]  k_1 = k_0 + 1
[-4]  k_0 < n
[-5]       0 < k_0 AND k_0 <= n AND 0 <= m_0 AND m_0 < k_0
       AND FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)
  |-------
[1]   FORALL (i: int): 0 <= i AND i < k_1 => a(m_1) <= a(i)


Attempted proof of cc__loop.2.1.2.2.2.2.3 failed.

Attempted proof of cc__loop.2.1.2.2.2.2.3 failed.
cc__loop.2.1.2.2.2.2.3 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__branch:transition/trs1__branch__trs1__branch__trs2:transition/trs1__branch__trs1__branch__trs2__goto:transition/trs1__branch__trs1__branch__trs2__goto_check_loop_3:transition;

{-1}  a(m_0) >= a(k_0)
{-2}  m_1 = k_0
{-3}  k_1 = k_0 + 1
{-4}  k_0 < n
[-5]       0 < k_0 AND k_0 <= n AND 0 <= m_0 AND m_0 < k_0
       AND FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)
  |-------
[1]   FORALL (i: int): 0 <= i AND i < k_1 => a(m_1) <= a(i)

-*-SOCOS-*-
(left-condition (sequent ("a(m_0) >= a(k_0)" "m_1 = k_0" "k_1 = k_0 + 1" "k_0 < n" "     0 < k_0 AND k_0 <= n AND 0 <= m_0 AND m_0 < k_0
       AND FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)") ("FORALL (i: int): 0 <= i AND i < k_1 => a(m_1) <= a(i)")))
-*-*-*-*-*-


nil

No change on: (socos-skip-msg (left-condition (sequent ("a(m_0) >= a(k_0)" "m_1 = k_0" "k_1 = k_0 + 1" "k_0 < n" "     0 < k_0 AND k_0 <= n AND 0 <= m_0 AND m_0 < k_0
       AND FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)") ("FORALL (i: int): 0 <= i AND i < k_1 => a(m_1) <= a(i)"))))
cc__loop.2.1.2.2.2.2.3 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__branch:transition/trs1__branch__trs1__branch__trs2:transition/trs1__branch__trs1__branch__trs2__goto:transition/trs1__branch__trs1__branch__trs2__goto_check_loop_3:transition;

{-1}  a(m_0) >= a(k_0)
{-2}  m_1 = k_0
{-3}  k_1 = k_0 + 1
{-4}  k_0 < n
[-5]       0 < k_0 AND k_0 <= n AND 0 <= m_0 AND m_0 < k_0
       AND FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)
  |-------
[1]   FORALL (i: int): 0 <= i AND i < k_1 => a(m_1) <= a(i)

nil

cc__loop.2.1.2.2.2.2.3 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__branch:transition/trs1__branch__trs1__branch__trs2:transition/trs1__branch__trs1__branch__trs2__goto:transition/trs1__branch__trs1__branch__trs2__goto_check_loop_3:transition;

{-1}  a(m_0) >= a(k_0)
{-2}  m_1 = k_0
{-3}  k_1 = k_0 + 1
{-4}  k_0 < n
[-5]       0 < k_0 AND k_0 <= n AND 0 <= m_0 AND m_0 < k_0
       AND FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)
  |-------
[1]   FORALL (i: int): 0 <= i AND i < k_1 => a(m_1) <= a(i)

Postponing cc__loop.2.1.2.2.2.2.3.

cc__loop.2.2 : 
;;; min:context/min:procedure/loop:situation/trs1:transition;

[-1]  sit__loop(m_0, k_0)
  |-------
{1}   ((((LAMBDA (m, k): k = n))(m_0, k_0)) => sit__fin__post__(m_0, k_0))

Adding comment: min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs2:transition;
this simplifies to: 
cc__loop.2.2 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs2:transition;

[-1]  sit__loop(m_0, k_0)
  |-------
[1]   ((((LAMBDA (m, k): k = n))(m_0, k_0)) => sit__fin__post__(m_0, k_0))

-*-SOCOS-*-
(uid "min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs2:transition;")
-*-*-*-*-*-


nil

No change on: (socos-skip-msg (uid "min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs2:transition;"))
cc__loop.2.2 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs2:transition;

[-1]  sit__loop(m_0, k_0)
  |-------
[1]   ((((LAMBDA (m, k): k = n))(m_0, k_0)) => sit__fin__post__(m_0, k_0))

Postponing cc__loop.2.2.

cc__loop.2.2 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs2:transition;

[-1]  sit__loop(m_0, k_0)
  |-------
[1]   ((((LAMBDA (m, k): k = n))(m_0, k_0)) => sit__fin__post__(m_0, k_0))

Applying disjunctive simplification to flatten sequent,
this simplifies to: 
cc__loop.2.2 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs2:transition;

{-1}  (((LAMBDA (m, k): k = n))(m_0, k_0))
[-2]  sit__loop(m_0, k_0)
  |-------
{1}   sit__fin__post__(m_0, k_0)

Adding comment: min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs2:transition/trs1__branch__trs2__goto:transition;
this simplifies to: 
cc__loop.2.2 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs2:transition/trs1__branch__trs2__goto:transition;

[-1]  (((LAMBDA (m, k): k = n))(m_0, k_0))
[-2]  sit__loop(m_0, k_0)
  |-------
[1]   sit__fin__post__(m_0, k_0)

-*-SOCOS-*-
(uid "min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs2:transition/trs1__branch__trs2__goto:transition;")
-*-*-*-*-*-


nil

No change on: (socos-skip-msg (uid "min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs2:transition/trs1__branch__trs2__goto:transition;"))
cc__loop.2.2 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs2:transition/trs1__branch__trs2__goto:transition;

[-1]  (((LAMBDA (m, k): k = n))(m_0, k_0))
[-2]  sit__loop(m_0, k_0)
  |-------
[1]   sit__fin__post__(m_0, k_0)

Postponing cc__loop.2.2.

cc__loop.2.2 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs2:transition/trs1__branch__trs2__goto:transition;

[-1]  (((LAMBDA (m, k): k = n))(m_0, k_0))
[-2]  sit__loop(m_0, k_0)
  |-------
[1]   sit__fin__post__(m_0, k_0)

No change on: (expand "sit__ini__" - :assert? none)
cc__loop.2.2 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs2:transition/trs1__branch__trs2__goto:transition;

[-1]  (((LAMBDA (m, k): k = n))(m_0, k_0))
[-2]  sit__loop(m_0, k_0)
  |-------
[1]   sit__fin__post__(m_0, k_0)

No change on: (expand "spec__min__min.pre__" - :assert? none)
cc__loop.2.2 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs2:transition/trs1__branch__trs2__goto:transition;

[-1]  (((LAMBDA (m, k): k = n))(m_0, k_0))
[-2]  sit__loop(m_0, k_0)
  |-------
[1]   sit__fin__post__(m_0, k_0)

Expanding the definition of sit__loop,
this simplifies to: 
cc__loop.2.2 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs2:transition/trs1__branch__trs2__goto:transition;

[-1]  (((LAMBDA (m, k): k = n))(m_0, k_0))
{-2}  (id(0 < k_0 AND k_0 <= n)) AND
       (id(0 <= m_0 AND m_0 < k_0)) AND
        (id(FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)))
  |-------
[1]   sit__fin__post__(m_0, k_0)

No change on: (expand "sit__fin__post__" - :assert? none)
cc__loop.2.2 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs2:transition/trs1__branch__trs2__goto:transition;

[-1]  (((LAMBDA (m, k): k = n))(m_0, k_0))
{-2}  (id(0 < k_0 AND k_0 <= n)) AND
       (id(0 <= m_0 AND m_0 < k_0)) AND
        (id(FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)))
  |-------
[1]   sit__fin__post__(m_0, k_0)

No change on: (expand "spec__min__min.post__" - :assert? none)
cc__loop.2.2 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs2:transition/trs1__branch__trs2__goto:transition;

[-1]  (((LAMBDA (m, k): k = n))(m_0, k_0))
{-2}  (id(0 < k_0 AND k_0 <= n)) AND
       (id(0 <= m_0 AND m_0 < k_0)) AND
        (id(FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)))
  |-------
[1]   sit__fin__post__(m_0, k_0)

Postponing cc__loop.2.2.

cc__loop.2.2 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs2:transition/trs1__branch__trs2__goto:transition;

[-1]  (((LAMBDA (m, k): k = n))(m_0, k_0))
{-2}  (id(0 < k_0 AND k_0 <= n)) AND
       (id(0 <= m_0 AND m_0 < k_0)) AND
        (id(FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)))
  |-------
[1]   sit__fin__post__(m_0, k_0)

No change on: (expand "sit__ini__" + :assert? none)
cc__loop.2.2 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs2:transition/trs1__branch__trs2__goto:transition;

[-1]  (((LAMBDA (m, k): k = n))(m_0, k_0))
{-2}  (id(0 < k_0 AND k_0 <= n)) AND
       (id(0 <= m_0 AND m_0 < k_0)) AND
        (id(FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)))
  |-------
[1]   sit__fin__post__(m_0, k_0)

No change on: (expand "spec__min__min.pre__" + :assert? none)
cc__loop.2.2 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs2:transition/trs1__branch__trs2__goto:transition;

[-1]  (((LAMBDA (m, k): k = n))(m_0, k_0))
{-2}  (id(0 < k_0 AND k_0 <= n)) AND
       (id(0 <= m_0 AND m_0 < k_0)) AND
        (id(FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)))
  |-------
[1]   sit__fin__post__(m_0, k_0)

No change on: (expand "sit__loop" + :assert? none)
cc__loop.2.2 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs2:transition/trs1__branch__trs2__goto:transition;

[-1]  (((LAMBDA (m, k): k = n))(m_0, k_0))
{-2}  (id(0 < k_0 AND k_0 <= n)) AND
       (id(0 <= m_0 AND m_0 < k_0)) AND
        (id(FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)))
  |-------
[1]   sit__fin__post__(m_0, k_0)

Expanding the definition of sit__fin__post__,
this simplifies to: 
cc__loop.2.2 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs2:transition/trs1__branch__trs2__goto:transition;

[-1]  (((LAMBDA (m, k): k = n))(m_0, k_0))
[-2]  (id(0 < k_0 AND k_0 <= n)) AND
       (id(0 <= m_0 AND m_0 < k_0)) AND
        (id(FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)))
  |-------
{1}   (spec__min__min.post__(a, m_0))

Expanding the definition of spec__min__min.post__,
this simplifies to: 
cc__loop.2.2 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs2:transition/trs1__branch__trs2__goto:transition;

[-1]  (((LAMBDA (m, k): k = n))(m_0, k_0))
[-2]  (id(0 < k_0 AND k_0 <= n)) AND
       (id(0 <= m_0 AND m_0 < k_0)) AND
        (id(FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)))
  |-------
{1}   (id(n > 0)) AND
       (id(0 <= m_0 AND m_0 < n)) AND
        (id(FORALL (i: int): 0 <= i AND i < n => a(m_0) <= a(i)))

Postponing cc__loop.2.2.

cc__loop.2.2 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs2:transition/trs1__branch__trs2__goto:transition;

[-1]  (((LAMBDA (m, k): k = n))(m_0, k_0))
[-2]  (id(0 < k_0 AND k_0 <= n)) AND
       (id(0 <= m_0 AND m_0 < k_0)) AND
        (id(FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)))
  |-------
{1}   (id(n > 0)) AND
       (id(0 <= m_0 AND m_0 < n)) AND
        (id(FORALL (i: int): 0 <= i AND i < n => a(m_0) <= a(i)))

Splitting conjunction into branches,
this yields  3 subgoals: 
cc__loop.2.2.1 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs2:transition/trs1__branch__trs2__goto:transition;

[-1]  (((LAMBDA (m, k): k = n))(m_0, k_0))
[-2]  (id(0 < k_0 AND k_0 <= n)) AND
       (id(0 <= m_0 AND m_0 < k_0)) AND
        (id(FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)))
  |-------
{1}   (id(n > 0))

Adding comment: min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs2:transition/trs1__branch__trs2__goto:transition/trs1__branch__trs2__goto_check_post___1:transition;
this simplifies to: 
cc__loop.2.2.1 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs2:transition/trs1__branch__trs2__goto:transition/trs1__branch__trs2__goto_check_post___1:transition;

[-1]  (((LAMBDA (m, k): k = n))(m_0, k_0))
[-2]  (id(0 < k_0 AND k_0 <= n)) AND
       (id(0 <= m_0 AND m_0 < k_0)) AND
        (id(FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)))
  |-------
[1]   (id(n > 0))

-*-SOCOS-*-
(uid "min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs2:transition/trs1__branch__trs2__goto:transition/trs1__branch__trs2__goto_check_post___1:transition;")
-*-*-*-*-*-


nil

No change on: (socos-skip-msg (uid "min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs2:transition/trs1__branch__trs2__goto:transition/trs1__branch__trs2__goto_check_post___1:transition;"))
cc__loop.2.2.1 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs2:transition/trs1__branch__trs2__goto:transition/trs1__branch__trs2__goto_check_post___1:transition;

[-1]  (((LAMBDA (m, k): k = n))(m_0, k_0))
[-2]  (id(0 < k_0 AND k_0 <= n)) AND
       (id(0 <= m_0 AND m_0 < k_0)) AND
        (id(FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)))
  |-------
[1]   (id(n > 0))

Postponing cc__loop.2.2.1.

cc__loop.2.2.1 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs2:transition/trs1__branch__trs2__goto:transition/trs1__branch__trs2__goto_check_post___1:transition;

[-1]  (((LAMBDA (m, k): k = n))(m_0, k_0))
[-2]  (id(0 < k_0 AND k_0 <= n)) AND
       (id(0 <= m_0 AND m_0 < k_0)) AND
        (id(FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)))
  |-------
[1]   (id(n > 0))

-*-SOCOS-*-
(check-condition "min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs2:transition/trs1__branch__trs2__goto:transition/trs1__branch__trs2__goto_check_post___1:transition;")
-*-*-*-*-*-


nil

No change on: (socos-skip-msg (check-condition "min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs2:transition/trs1__branch__trs2__goto:transition/trs1__branch__trs2__goto_check_post___1:transition;"))
cc__loop.2.2.1 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs2:transition/trs1__branch__trs2__goto:transition/trs1__branch__trs2__goto_check_post___1:transition;

[-1]  (((LAMBDA (m, k): k = n))(m_0, k_0))
[-2]  (id(0 < k_0 AND k_0 <= n)) AND
       (id(0 <= m_0 AND m_0 < k_0)) AND
        (id(FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)))
  |-------
[1]   (id(n > 0))

Expanding the definition of id,
this simplifies to: 
cc__loop.2.2.1 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs2:transition/trs1__branch__trs2__goto:transition/trs1__branch__trs2__goto_check_post___1:transition;

[-1]  (((LAMBDA (m, k): k = n))(m_0, k_0))
{-2}       0 < k_0 AND k_0 <= n AND 0 <= m_0 AND m_0 < k_0
       AND FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)
  |-------
{1}   n > 0

nil

cc__loop.2.2.1 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs2:transition/trs1__branch__trs2__goto:transition/trs1__branch__trs2__goto_check_post___1:transition;

[-1]  (((LAMBDA (m, k): k = n))(m_0, k_0))
{-2}       0 < k_0 AND k_0 <= n AND 0 <= m_0 AND m_0 < k_0
       AND FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)
  |-------
{1}   n > 0

Applying beta-reduction,
this simplifies to: 
cc__loop.2.2.1 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs2:transition/trs1__branch__trs2__goto:transition/trs1__branch__trs2__goto_check_post___1:transition;

{-1}  k_0 = n
[-2]       0 < k_0 AND k_0 <= n AND 0 <= m_0 AND m_0 < k_0
       AND FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)
  |-------
[1]   n > 0

No change on: (skip)
cc__loop.2.2.1 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs2:transition/trs1__branch__trs2__goto:transition/trs1__branch__trs2__goto_check_post___1:transition;

[-1]  k_0 = n
[-2]       0 < k_0 AND k_0 <= n AND 0 <= m_0 AND m_0 < k_0
       AND FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)
  |-------
[1]   n > 0


Attempted proof of cc__loop.2.2.1 failed.

Attempted proof of cc__loop.2.2.1 failed.
cc__loop.2.2.1 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs2:transition/trs1__branch__trs2__goto:transition/trs1__branch__trs2__goto_check_post___1:transition;

{-1}  k_0 = n
[-2]       0 < k_0 AND k_0 <= n AND 0 <= m_0 AND m_0 < k_0
       AND FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)
  |-------
[1]   n > 0

-*-SOCOS-*-
(left-condition (sequent ("k_0 = n" "     0 < k_0 AND k_0 <= n AND 0 <= m_0 AND m_0 < k_0
       AND FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)") ("n > 0")))
-*-*-*-*-*-


nil

No change on: (socos-skip-msg (left-condition (sequent ("k_0 = n" "     0 < k_0 AND k_0 <= n AND 0 <= m_0 AND m_0 < k_0
       AND FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)") ("n > 0"))))
cc__loop.2.2.1 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs2:transition/trs1__branch__trs2__goto:transition/trs1__branch__trs2__goto_check_post___1:transition;

{-1}  k_0 = n
[-2]       0 < k_0 AND k_0 <= n AND 0 <= m_0 AND m_0 < k_0
       AND FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)
  |-------
[1]   n > 0

nil

cc__loop.2.2.1 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs2:transition/trs1__branch__trs2__goto:transition/trs1__branch__trs2__goto_check_post___1:transition;

{-1}  k_0 = n
[-2]       0 < k_0 AND k_0 <= n AND 0 <= m_0 AND m_0 < k_0
       AND FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)
  |-------
[1]   n > 0

Postponing cc__loop.2.2.1.

cc__loop.2.2.2 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs2:transition/trs1__branch__trs2__goto:transition;

[-1]  (((LAMBDA (m, k): k = n))(m_0, k_0))
[-2]  (id(0 < k_0 AND k_0 <= n)) AND
       (id(0 <= m_0 AND m_0 < k_0)) AND
        (id(FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)))
  |-------
{1}   (id(0 <= m_0 AND m_0 < n))

Adding comment: min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs2:transition/trs1__branch__trs2__goto:transition/trs1__branch__trs2__goto_check_post___2:transition;
this simplifies to: 
cc__loop.2.2.2 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs2:transition/trs1__branch__trs2__goto:transition/trs1__branch__trs2__goto_check_post___2:transition;

[-1]  (((LAMBDA (m, k): k = n))(m_0, k_0))
[-2]  (id(0 < k_0 AND k_0 <= n)) AND
       (id(0 <= m_0 AND m_0 < k_0)) AND
        (id(FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)))
  |-------
[1]   (id(0 <= m_0 AND m_0 < n))

-*-SOCOS-*-
(uid "min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs2:transition/trs1__branch__trs2__goto:transition/trs1__branch__trs2__goto_check_post___2:transition;")
-*-*-*-*-*-


nil

No change on: (socos-skip-msg (uid "min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs2:transition/trs1__branch__trs2__goto:transition/trs1__branch__trs2__goto_check_post___2:transition;"))
cc__loop.2.2.2 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs2:transition/trs1__branch__trs2__goto:transition/trs1__branch__trs2__goto_check_post___2:transition;

[-1]  (((LAMBDA (m, k): k = n))(m_0, k_0))
[-2]  (id(0 < k_0 AND k_0 <= n)) AND
       (id(0 <= m_0 AND m_0 < k_0)) AND
        (id(FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)))
  |-------
[1]   (id(0 <= m_0 AND m_0 < n))

Postponing cc__loop.2.2.2.

cc__loop.2.2.2 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs2:transition/trs1__branch__trs2__goto:transition/trs1__branch__trs2__goto_check_post___2:transition;

[-1]  (((LAMBDA (m, k): k = n))(m_0, k_0))
[-2]  (id(0 < k_0 AND k_0 <= n)) AND
       (id(0 <= m_0 AND m_0 < k_0)) AND
        (id(FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)))
  |-------
[1]   (id(0 <= m_0 AND m_0 < n))

-*-SOCOS-*-
(check-condition "min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs2:transition/trs1__branch__trs2__goto:transition/trs1__branch__trs2__goto_check_post___2:transition;")
-*-*-*-*-*-


nil

No change on: (socos-skip-msg (check-condition "min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs2:transition/trs1__branch__trs2__goto:transition/trs1__branch__trs2__goto_check_post___2:transition;"))
cc__loop.2.2.2 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs2:transition/trs1__branch__trs2__goto:transition/trs1__branch__trs2__goto_check_post___2:transition;

[-1]  (((LAMBDA (m, k): k = n))(m_0, k_0))
[-2]  (id(0 < k_0 AND k_0 <= n)) AND
       (id(0 <= m_0 AND m_0 < k_0)) AND
        (id(FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)))
  |-------
[1]   (id(0 <= m_0 AND m_0 < n))

Expanding the definition of id,
this simplifies to: 
cc__loop.2.2.2 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs2:transition/trs1__branch__trs2__goto:transition/trs1__branch__trs2__goto_check_post___2:transition;

[-1]  (((LAMBDA (m, k): k = n))(m_0, k_0))
{-2}       0 < k_0 AND k_0 <= n AND 0 <= m_0 AND m_0 < k_0
       AND FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)
  |-------
{1}   0 <= m_0 AND m_0 < n

nil

cc__loop.2.2.2 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs2:transition/trs1__branch__trs2__goto:transition/trs1__branch__trs2__goto_check_post___2:transition;

[-1]  (((LAMBDA (m, k): k = n))(m_0, k_0))
{-2}       0 < k_0 AND k_0 <= n AND 0 <= m_0 AND m_0 < k_0
       AND FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)
  |-------
{1}   0 <= m_0 AND m_0 < n

Applying beta-reduction,
this simplifies to: 
cc__loop.2.2.2 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs2:transition/trs1__branch__trs2__goto:transition/trs1__branch__trs2__goto_check_post___2:transition;

{-1}  k_0 = n
[-2]       0 < k_0 AND k_0 <= n AND 0 <= m_0 AND m_0 < k_0
       AND FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)
  |-------
[1]   0 <= m_0 AND m_0 < n

No change on: (skip)
cc__loop.2.2.2 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs2:transition/trs1__branch__trs2__goto:transition/trs1__branch__trs2__goto_check_post___2:transition;

[-1]  k_0 = n
[-2]       0 < k_0 AND k_0 <= n AND 0 <= m_0 AND m_0 < k_0
       AND FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)
  |-------
[1]   0 <= m_0 AND m_0 < n


Attempted proof of cc__loop.2.2.2 failed.

Attempted proof of cc__loop.2.2.2 failed.
cc__loop.2.2.2 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs2:transition/trs1__branch__trs2__goto:transition/trs1__branch__trs2__goto_check_post___2:transition;

{-1}  k_0 = n
[-2]       0 < k_0 AND k_0 <= n AND 0 <= m_0 AND m_0 < k_0
       AND FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)
  |-------
[1]   0 <= m_0 AND m_0 < n

-*-SOCOS-*-
(left-condition (sequent ("k_0 = n" "     0 < k_0 AND k_0 <= n AND 0 <= m_0 AND m_0 < k_0
       AND FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)") ("0 <= m_0 AND m_0 < n")))
-*-*-*-*-*-


nil

No change on: (socos-skip-msg (left-condition (sequent ("k_0 = n" "     0 < k_0 AND k_0 <= n AND 0 <= m_0 AND m_0 < k_0
       AND FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)") ("0 <= m_0 AND m_0 < n"))))
cc__loop.2.2.2 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs2:transition/trs1__branch__trs2__goto:transition/trs1__branch__trs2__goto_check_post___2:transition;

{-1}  k_0 = n
[-2]       0 < k_0 AND k_0 <= n AND 0 <= m_0 AND m_0 < k_0
       AND FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)
  |-------
[1]   0 <= m_0 AND m_0 < n

nil

cc__loop.2.2.2 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs2:transition/trs1__branch__trs2__goto:transition/trs1__branch__trs2__goto_check_post___2:transition;

{-1}  k_0 = n
[-2]       0 < k_0 AND k_0 <= n AND 0 <= m_0 AND m_0 < k_0
       AND FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)
  |-------
[1]   0 <= m_0 AND m_0 < n

Postponing cc__loop.2.2.2.

cc__loop.2.2.3 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs2:transition/trs1__branch__trs2__goto:transition;

[-1]  (((LAMBDA (m, k): k = n))(m_0, k_0))
[-2]  (id(0 < k_0 AND k_0 <= n)) AND
       (id(0 <= m_0 AND m_0 < k_0)) AND
        (id(FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)))
  |-------
{1}   (id(FORALL (i: int): 0 <= i AND i < n => a(m_0) <= a(i)))

Adding comment: min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs2:transition/trs1__branch__trs2__goto:transition/trs1__branch__trs2__goto_check_post___3:transition;
this simplifies to: 
cc__loop.2.2.3 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs2:transition/trs1__branch__trs2__goto:transition/trs1__branch__trs2__goto_check_post___3:transition;

[-1]  (((LAMBDA (m, k): k = n))(m_0, k_0))
[-2]  (id(0 < k_0 AND k_0 <= n)) AND
       (id(0 <= m_0 AND m_0 < k_0)) AND
        (id(FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)))
  |-------
[1]   (id(FORALL (i: int): 0 <= i AND i < n => a(m_0) <= a(i)))

-*-SOCOS-*-
(uid "min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs2:transition/trs1__branch__trs2__goto:transition/trs1__branch__trs2__goto_check_post___3:transition;")
-*-*-*-*-*-


nil

No change on: (socos-skip-msg (uid "min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs2:transition/trs1__branch__trs2__goto:transition/trs1__branch__trs2__goto_check_post___3:transition;"))
cc__loop.2.2.3 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs2:transition/trs1__branch__trs2__goto:transition/trs1__branch__trs2__goto_check_post___3:transition;

[-1]  (((LAMBDA (m, k): k = n))(m_0, k_0))
[-2]  (id(0 < k_0 AND k_0 <= n)) AND
       (id(0 <= m_0 AND m_0 < k_0)) AND
        (id(FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)))
  |-------
[1]   (id(FORALL (i: int): 0 <= i AND i < n => a(m_0) <= a(i)))

Postponing cc__loop.2.2.3.

cc__loop.2.2.3 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs2:transition/trs1__branch__trs2__goto:transition/trs1__branch__trs2__goto_check_post___3:transition;

[-1]  (((LAMBDA (m, k): k = n))(m_0, k_0))
[-2]  (id(0 < k_0 AND k_0 <= n)) AND
       (id(0 <= m_0 AND m_0 < k_0)) AND
        (id(FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)))
  |-------
[1]   (id(FORALL (i: int): 0 <= i AND i < n => a(m_0) <= a(i)))

-*-SOCOS-*-
(check-condition "min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs2:transition/trs1__branch__trs2__goto:transition/trs1__branch__trs2__goto_check_post___3:transition;")
-*-*-*-*-*-


nil

No change on: (socos-skip-msg (check-condition "min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs2:transition/trs1__branch__trs2__goto:transition/trs1__branch__trs2__goto_check_post___3:transition;"))
cc__loop.2.2.3 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs2:transition/trs1__branch__trs2__goto:transition/trs1__branch__trs2__goto_check_post___3:transition;

[-1]  (((LAMBDA (m, k): k = n))(m_0, k_0))
[-2]  (id(0 < k_0 AND k_0 <= n)) AND
       (id(0 <= m_0 AND m_0 < k_0)) AND
        (id(FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)))
  |-------
[1]   (id(FORALL (i: int): 0 <= i AND i < n => a(m_0) <= a(i)))

Expanding the definition of id,
this simplifies to: 
cc__loop.2.2.3 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs2:transition/trs1__branch__trs2__goto:transition/trs1__branch__trs2__goto_check_post___3:transition;

[-1]  (((LAMBDA (m, k): k = n))(m_0, k_0))
{-2}       0 < k_0 AND k_0 <= n AND 0 <= m_0 AND m_0 < k_0
       AND FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)
  |-------
{1}   FORALL (i: int): 0 <= i AND i < n => a(m_0) <= a(i)

nil

cc__loop.2.2.3 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs2:transition/trs1__branch__trs2__goto:transition/trs1__branch__trs2__goto_check_post___3:transition;

[-1]  (((LAMBDA (m, k): k = n))(m_0, k_0))
{-2}       0 < k_0 AND k_0 <= n AND 0 <= m_0 AND m_0 < k_0
       AND FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)
  |-------
{1}   FORALL (i: int): 0 <= i AND i < n => a(m_0) <= a(i)

Applying beta-reduction,
this simplifies to: 
cc__loop.2.2.3 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs2:transition/trs1__branch__trs2__goto:transition/trs1__branch__trs2__goto_check_post___3:transition;

{-1}  k_0 = n
[-2]       0 < k_0 AND k_0 <= n AND 0 <= m_0 AND m_0 < k_0
       AND FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)
  |-------
[1]   FORALL (i: int): 0 <= i AND i < n => a(m_0) <= a(i)

No change on: (skip)
cc__loop.2.2.3 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs2:transition/trs1__branch__trs2__goto:transition/trs1__branch__trs2__goto_check_post___3:transition;

[-1]  k_0 = n
[-2]       0 < k_0 AND k_0 <= n AND 0 <= m_0 AND m_0 < k_0
       AND FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)
  |-------
[1]   FORALL (i: int): 0 <= i AND i < n => a(m_0) <= a(i)


Attempted proof of cc__loop.2.2.3 failed.

Attempted proof of cc__loop.2.2.3 failed.
cc__loop.2.2.3 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs2:transition/trs1__branch__trs2__goto:transition/trs1__branch__trs2__goto_check_post___3:transition;

{-1}  k_0 = n
[-2]       0 < k_0 AND k_0 <= n AND 0 <= m_0 AND m_0 < k_0
       AND FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)
  |-------
[1]   FORALL (i: int): 0 <= i AND i < n => a(m_0) <= a(i)

-*-SOCOS-*-
(left-condition (sequent ("k_0 = n" "     0 < k_0 AND k_0 <= n AND 0 <= m_0 AND m_0 < k_0
       AND FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)") ("FORALL (i: int): 0 <= i AND i < n => a(m_0) <= a(i)")))
-*-*-*-*-*-


nil

No change on: (socos-skip-msg (left-condition (sequent ("k_0 = n" "     0 < k_0 AND k_0 <= n AND 0 <= m_0 AND m_0 < k_0
       AND FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)") ("FORALL (i: int): 0 <= i AND i < n => a(m_0) <= a(i)"))))
cc__loop.2.2.3 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs2:transition/trs1__branch__trs2__goto:transition/trs1__branch__trs2__goto_check_post___3:transition;

{-1}  k_0 = n
[-2]       0 < k_0 AND k_0 <= n AND 0 <= m_0 AND m_0 < k_0
       AND FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)
  |-------
[1]   FORALL (i: int): 0 <= i AND i < n => a(m_0) <= a(i)

nil

cc__loop.2.2.3 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs2:transition/trs1__branch__trs2__goto:transition/trs1__branch__trs2__goto_check_post___3:transition;

{-1}  k_0 = n
[-2]       0 < k_0 AND k_0 <= n AND 0 <= m_0 AND m_0 < k_0
       AND FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)
  |-------
[1]   FORALL (i: int): 0 <= i AND i < n => a(m_0) <= a(i)

Postponing cc__loop.2.2.3.

cc__loop.1 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/loop__stmt1:transition;

{-1}  0 < k_0 AND k_0 <= n
{-2}  0 <= m_0 AND m_0 < k_0
{-3}  FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)
  |-------
{1}   k_0 < n OR k_0 = n

***Warning: Fewer subproofs (0) than subgoals (1)
No change on: (skip)
cc__loop.1 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/loop__stmt1:transition;

{-1}  0 < k_0 AND k_0 <= n
{-2}  0 <= m_0 AND m_0 < k_0
{-3}  FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)
  |-------
{1}   k_0 < n OR k_0 = n

Postponing cc__loop.1.

cc__loop.2.1.1 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__stmt2:transition;

{-1}  k_0 < n
[-2]  0 < k_0 AND k_0 <= n
[-3]  0 <= m_0 AND m_0 < k_0
[-4]  FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)
  |-------
[1]   a(m_0) < a(k_0) OR a(m_0) >= a(k_0)

***Warning: Fewer subproofs (0) than subgoals (1)
No change on: (skip)
cc__loop.2.1.1 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__stmt2:transition;

{-1}  k_0 < n
[-2]  0 < k_0 AND k_0 <= n
[-3]  0 <= m_0 AND m_0 < k_0
[-4]  FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)
  |-------
[1]   a(m_0) < a(k_0) OR a(m_0) >= a(k_0)

Postponing cc__loop.2.1.1.

cc__loop.2.1.2.1.1 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__branch:transition/trs1__branch__trs1__branch__trs1:transition/trs1__branch__trs1__branch__stmt4:transition;

{-1}  a(m_0) < a(k_0)
{-2}  k_1 = k_0 + 1
{-3}  k_0 < n
[-4]  0 < k_0 AND k_0 <= n
[-5]  0 <= m_0 AND m_0 < k_0
[-6]  FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)
  |-------
[1]   0 <= n - k_1

***Warning: Fewer subproofs (0) than subgoals (1)
No change on: (skip)
cc__loop.2.1.2.1.1 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__branch:transition/trs1__branch__trs1__branch__trs1:transition/trs1__branch__trs1__branch__stmt4:transition;

{-1}  a(m_0) < a(k_0)
{-2}  k_1 = k_0 + 1
{-3}  k_0 < n
[-4]  0 < k_0 AND k_0 <= n
[-5]  0 <= m_0 AND m_0 < k_0
[-6]  FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)
  |-------
[1]   0 <= n - k_1

Postponing cc__loop.2.1.2.1.1.

cc__loop.2.1.2.1.2.1 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__branch:transition/trs1__branch__trs1__branch__trs1:transition/trs1__branch__trs1__branch__stmt5:transition;

{-1}  a(m_0) < a(k_0)
{-2}  k_1 = k_0 + 1
{-3}  k_0 < n
[-4]  0 < k_0 AND k_0 <= n
[-5]  0 <= m_0 AND m_0 < k_0
[-6]  FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)
  |-------
[1]   n - k_1 < n - k_0

***Warning: Fewer subproofs (0) than subgoals (1)
No change on: (skip)
cc__loop.2.1.2.1.2.1 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__branch:transition/trs1__branch__trs1__branch__trs1:transition/trs1__branch__trs1__branch__stmt5:transition;

{-1}  a(m_0) < a(k_0)
{-2}  k_1 = k_0 + 1
{-3}  k_0 < n
[-4]  0 < k_0 AND k_0 <= n
[-5]  0 <= m_0 AND m_0 < k_0
[-6]  FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)
  |-------
[1]   n - k_1 < n - k_0

Postponing cc__loop.2.1.2.1.2.1.

cc__loop.2.1.2.1.2.2.1 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__branch:transition/trs1__branch__trs1__branch__trs1:transition/trs1__branch__trs1__branch__trs1__goto:transition/trs1__branch__trs1__branch__trs1__goto_check_loop_1:transition;

{-1}  a(m_0) < a(k_0)
{-2}  k_1 = k_0 + 1
{-3}  k_0 < n
[-4]       0 < k_0 AND k_0 <= n AND 0 <= m_0 AND m_0 < k_0
       AND FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)
  |-------
[1]   0 < k_1 AND k_1 <= n

***Warning: Fewer subproofs (0) than subgoals (1)
No change on: (skip)
cc__loop.2.1.2.1.2.2.1 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__branch:transition/trs1__branch__trs1__branch__trs1:transition/trs1__branch__trs1__branch__trs1__goto:transition/trs1__branch__trs1__branch__trs1__goto_check_loop_1:transition;

{-1}  a(m_0) < a(k_0)
{-2}  k_1 = k_0 + 1
{-3}  k_0 < n
[-4]       0 < k_0 AND k_0 <= n AND 0 <= m_0 AND m_0 < k_0
       AND FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)
  |-------
[1]   0 < k_1 AND k_1 <= n

Postponing cc__loop.2.1.2.1.2.2.1.

cc__loop.2.1.2.1.2.2.2 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__branch:transition/trs1__branch__trs1__branch__trs1:transition/trs1__branch__trs1__branch__trs1__goto:transition/trs1__branch__trs1__branch__trs1__goto_check_loop_2:transition;

{-1}  a(m_0) < a(k_0)
{-2}  k_1 = k_0 + 1
{-3}  k_0 < n
[-4]       0 < k_0 AND k_0 <= n AND 0 <= m_0 AND m_0 < k_0
       AND FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)
  |-------
[1]   0 <= m_0 AND m_0 < k_1

***Warning: Fewer subproofs (0) than subgoals (1)
No change on: (skip)
cc__loop.2.1.2.1.2.2.2 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__branch:transition/trs1__branch__trs1__branch__trs1:transition/trs1__branch__trs1__branch__trs1__goto:transition/trs1__branch__trs1__branch__trs1__goto_check_loop_2:transition;

{-1}  a(m_0) < a(k_0)
{-2}  k_1 = k_0 + 1
{-3}  k_0 < n
[-4]       0 < k_0 AND k_0 <= n AND 0 <= m_0 AND m_0 < k_0
       AND FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)
  |-------
[1]   0 <= m_0 AND m_0 < k_1

Postponing cc__loop.2.1.2.1.2.2.2.

cc__loop.2.1.2.1.2.2.3 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__branch:transition/trs1__branch__trs1__branch__trs1:transition/trs1__branch__trs1__branch__trs1__goto:transition/trs1__branch__trs1__branch__trs1__goto_check_loop_3:transition;

{-1}  a(m_0) < a(k_0)
{-2}  k_1 = k_0 + 1
{-3}  k_0 < n
[-4]       0 < k_0 AND k_0 <= n AND 0 <= m_0 AND m_0 < k_0
       AND FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)
  |-------
[1]   FORALL (i: int): 0 <= i AND i < k_1 => a(m_0) <= a(i)

***Warning: Fewer subproofs (0) than subgoals (1)
No change on: (skip)
cc__loop.2.1.2.1.2.2.3 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__branch:transition/trs1__branch__trs1__branch__trs1:transition/trs1__branch__trs1__branch__trs1__goto:transition/trs1__branch__trs1__branch__trs1__goto_check_loop_3:transition;

{-1}  a(m_0) < a(k_0)
{-2}  k_1 = k_0 + 1
{-3}  k_0 < n
[-4]       0 < k_0 AND k_0 <= n AND 0 <= m_0 AND m_0 < k_0
       AND FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)
  |-------
[1]   FORALL (i: int): 0 <= i AND i < k_1 => a(m_0) <= a(i)

Postponing cc__loop.2.1.2.1.2.2.3.

cc__loop.2.1.2.2.1 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__branch:transition/trs1__branch__trs1__branch__trs2:transition/trs1__branch__trs1__branch__stmt6:transition;

{-1}  a(m_0) >= a(k_0)
{-2}  m_1 = k_0
{-3}  k_1 = k_0 + 1
{-4}  k_0 < n
[-5]  0 < k_0 AND k_0 <= n
[-6]  0 <= m_0 AND m_0 < k_0
[-7]  FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)
  |-------
[1]   0 <= n - k_1

***Warning: Fewer subproofs (0) than subgoals (1)
No change on: (skip)
cc__loop.2.1.2.2.1 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__branch:transition/trs1__branch__trs1__branch__trs2:transition/trs1__branch__trs1__branch__stmt6:transition;

{-1}  a(m_0) >= a(k_0)
{-2}  m_1 = k_0
{-3}  k_1 = k_0 + 1
{-4}  k_0 < n
[-5]  0 < k_0 AND k_0 <= n
[-6]  0 <= m_0 AND m_0 < k_0
[-7]  FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)
  |-------
[1]   0 <= n - k_1

Postponing cc__loop.2.1.2.2.1.

cc__loop.2.1.2.2.2.1 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__branch:transition/trs1__branch__trs1__branch__trs2:transition/trs1__branch__trs1__branch__stmt7:transition;

{-1}  a(m_0) >= a(k_0)
{-2}  m_1 = k_0
{-3}  k_1 = k_0 + 1
{-4}  k_0 < n
[-5]  0 < k_0 AND k_0 <= n
[-6]  0 <= m_0 AND m_0 < k_0
[-7]  FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)
  |-------
[1]   n - k_1 < n - k_0

***Warning: Fewer subproofs (0) than subgoals (1)
No change on: (skip)
cc__loop.2.1.2.2.2.1 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__branch:transition/trs1__branch__trs1__branch__trs2:transition/trs1__branch__trs1__branch__stmt7:transition;

{-1}  a(m_0) >= a(k_0)
{-2}  m_1 = k_0
{-3}  k_1 = k_0 + 1
{-4}  k_0 < n
[-5]  0 < k_0 AND k_0 <= n
[-6]  0 <= m_0 AND m_0 < k_0
[-7]  FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)
  |-------
[1]   n - k_1 < n - k_0

Postponing cc__loop.2.1.2.2.2.1.

cc__loop.2.1.2.2.2.2.1 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__branch:transition/trs1__branch__trs1__branch__trs2:transition/trs1__branch__trs1__branch__trs2__goto:transition/trs1__branch__trs1__branch__trs2__goto_check_loop_1:transition;

{-1}  a(m_0) >= a(k_0)
{-2}  m_1 = k_0
{-3}  k_1 = k_0 + 1
{-4}  k_0 < n
[-5]       0 < k_0 AND k_0 <= n AND 0 <= m_0 AND m_0 < k_0
       AND FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)
  |-------
[1]   0 < k_1 AND k_1 <= n

***Warning: Fewer subproofs (0) than subgoals (1)
No change on: (skip)
cc__loop.2.1.2.2.2.2.1 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__branch:transition/trs1__branch__trs1__branch__trs2:transition/trs1__branch__trs1__branch__trs2__goto:transition/trs1__branch__trs1__branch__trs2__goto_check_loop_1:transition;

{-1}  a(m_0) >= a(k_0)
{-2}  m_1 = k_0
{-3}  k_1 = k_0 + 1
{-4}  k_0 < n
[-5]       0 < k_0 AND k_0 <= n AND 0 <= m_0 AND m_0 < k_0
       AND FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)
  |-------
[1]   0 < k_1 AND k_1 <= n

Postponing cc__loop.2.1.2.2.2.2.1.

cc__loop.2.1.2.2.2.2.2 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__branch:transition/trs1__branch__trs1__branch__trs2:transition/trs1__branch__trs1__branch__trs2__goto:transition/trs1__branch__trs1__branch__trs2__goto_check_loop_2:transition;

{-1}  a(m_0) >= a(k_0)
{-2}  m_1 = k_0
{-3}  k_1 = k_0 + 1
{-4}  k_0 < n
[-5]       0 < k_0 AND k_0 <= n AND 0 <= m_0 AND m_0 < k_0
       AND FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)
  |-------
[1]   0 <= m_1 AND m_1 < k_1

***Warning: Fewer subproofs (0) than subgoals (1)
No change on: (skip)
cc__loop.2.1.2.2.2.2.2 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__branch:transition/trs1__branch__trs1__branch__trs2:transition/trs1__branch__trs1__branch__trs2__goto:transition/trs1__branch__trs1__branch__trs2__goto_check_loop_2:transition;

{-1}  a(m_0) >= a(k_0)
{-2}  m_1 = k_0
{-3}  k_1 = k_0 + 1
{-4}  k_0 < n
[-5]       0 < k_0 AND k_0 <= n AND 0 <= m_0 AND m_0 < k_0
       AND FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)
  |-------
[1]   0 <= m_1 AND m_1 < k_1

Postponing cc__loop.2.1.2.2.2.2.2.

cc__loop.2.1.2.2.2.2.3 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__branch:transition/trs1__branch__trs1__branch__trs2:transition/trs1__branch__trs1__branch__trs2__goto:transition/trs1__branch__trs1__branch__trs2__goto_check_loop_3:transition;

{-1}  a(m_0) >= a(k_0)
{-2}  m_1 = k_0
{-3}  k_1 = k_0 + 1
{-4}  k_0 < n
[-5]       0 < k_0 AND k_0 <= n AND 0 <= m_0 AND m_0 < k_0
       AND FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)
  |-------
[1]   FORALL (i: int): 0 <= i AND i < k_1 => a(m_1) <= a(i)

***Warning: Fewer subproofs (0) than subgoals (1)
No change on: (skip)
cc__loop.2.1.2.2.2.2.3 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__branch:transition/trs1__branch__trs1__branch__trs2:transition/trs1__branch__trs1__branch__trs2__goto:transition/trs1__branch__trs1__branch__trs2__goto_check_loop_3:transition;

{-1}  a(m_0) >= a(k_0)
{-2}  m_1 = k_0
{-3}  k_1 = k_0 + 1
{-4}  k_0 < n
[-5]       0 < k_0 AND k_0 <= n AND 0 <= m_0 AND m_0 < k_0
       AND FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)
  |-------
[1]   FORALL (i: int): 0 <= i AND i < k_1 => a(m_1) <= a(i)

Postponing cc__loop.2.1.2.2.2.2.3.

cc__loop.2.2.1 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs2:transition/trs1__branch__trs2__goto:transition/trs1__branch__trs2__goto_check_post___1:transition;

{-1}  k_0 = n
[-2]       0 < k_0 AND k_0 <= n AND 0 <= m_0 AND m_0 < k_0
       AND FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)
  |-------
[1]   n > 0

***Warning: Fewer subproofs (0) than subgoals (1)
No change on: (skip)
cc__loop.2.2.1 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs2:transition/trs1__branch__trs2__goto:transition/trs1__branch__trs2__goto_check_post___1:transition;

{-1}  k_0 = n
[-2]       0 < k_0 AND k_0 <= n AND 0 <= m_0 AND m_0 < k_0
       AND FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)
  |-------
[1]   n > 0

Postponing cc__loop.2.2.1.

cc__loop.2.2.2 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs2:transition/trs1__branch__trs2__goto:transition/trs1__branch__trs2__goto_check_post___2:transition;

{-1}  k_0 = n
[-2]       0 < k_0 AND k_0 <= n AND 0 <= m_0 AND m_0 < k_0
       AND FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)
  |-------
[1]   0 <= m_0 AND m_0 < n

***Warning: Fewer subproofs (0) than subgoals (1)
No change on: (skip)
cc__loop.2.2.2 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs2:transition/trs1__branch__trs2__goto:transition/trs1__branch__trs2__goto_check_post___2:transition;

{-1}  k_0 = n
[-2]       0 < k_0 AND k_0 <= n AND 0 <= m_0 AND m_0 < k_0
       AND FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)
  |-------
[1]   0 <= m_0 AND m_0 < n

Postponing cc__loop.2.2.2.

cc__loop.2.2.3 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs2:transition/trs1__branch__trs2__goto:transition/trs1__branch__trs2__goto_check_post___3:transition;

{-1}  k_0 = n
[-2]       0 < k_0 AND k_0 <= n AND 0 <= m_0 AND m_0 < k_0
       AND FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)
  |-------
[1]   FORALL (i: int): 0 <= i AND i < n => a(m_0) <= a(i)

***Warning: Fewer subproofs (0) than subgoals (1)
No change on: (skip)
cc__loop.2.2.3 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs2:transition/trs1__branch__trs2__goto:transition/trs1__branch__trs2__goto_check_post___3:transition;

{-1}  k_0 = n
[-2]       0 < k_0 AND k_0 <= n AND 0 <= m_0 AND m_0 < k_0
       AND FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)
  |-------
[1]   FORALL (i: int): 0 <= i AND i < n => a(m_0) <= a(i)

Postponing cc__loop.2.2.3.

cc__loop.1 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/loop__stmt1:transition;

{-1}  0 < k_0 AND k_0 <= n
{-2}  0 <= m_0 AND m_0 < k_0
{-3}  FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)
  |-------
{1}   k_0 < n OR k_0 = n

Postponing cc__loop.1.

cc__loop.2.1.1 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__stmt2:transition;

{-1}  k_0 < n
[-2]  0 < k_0 AND k_0 <= n
[-3]  0 <= m_0 AND m_0 < k_0
[-4]  FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)
  |-------
[1]   a(m_0) < a(k_0) OR a(m_0) >= a(k_0)

Postponing cc__loop.2.1.1.

cc__loop.2.1.2.1.1 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__branch:transition/trs1__branch__trs1__branch__trs1:transition/trs1__branch__trs1__branch__stmt4:transition;

{-1}  a(m_0) < a(k_0)
{-2}  k_1 = k_0 + 1
{-3}  k_0 < n
[-4]  0 < k_0 AND k_0 <= n
[-5]  0 <= m_0 AND m_0 < k_0
[-6]  FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)
  |-------
[1]   0 <= n - k_1

Postponing cc__loop.2.1.2.1.1.

cc__loop.2.1.2.1.2.1 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__branch:transition/trs1__branch__trs1__branch__trs1:transition/trs1__branch__trs1__branch__stmt5:transition;

{-1}  a(m_0) < a(k_0)
{-2}  k_1 = k_0 + 1
{-3}  k_0 < n
[-4]  0 < k_0 AND k_0 <= n
[-5]  0 <= m_0 AND m_0 < k_0
[-6]  FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)
  |-------
[1]   n - k_1 < n - k_0

Postponing cc__loop.2.1.2.1.2.1.

cc__loop.2.1.2.1.2.2.1 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__branch:transition/trs1__branch__trs1__branch__trs1:transition/trs1__branch__trs1__branch__trs1__goto:transition/trs1__branch__trs1__branch__trs1__goto_check_loop_1:transition;

{-1}  a(m_0) < a(k_0)
{-2}  k_1 = k_0 + 1
{-3}  k_0 < n
[-4]       0 < k_0 AND k_0 <= n AND 0 <= m_0 AND m_0 < k_0
       AND FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)
  |-------
[1]   0 < k_1 AND k_1 <= n

Postponing cc__loop.2.1.2.1.2.2.1.

cc__loop.2.1.2.1.2.2.2 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__branch:transition/trs1__branch__trs1__branch__trs1:transition/trs1__branch__trs1__branch__trs1__goto:transition/trs1__branch__trs1__branch__trs1__goto_check_loop_2:transition;

{-1}  a(m_0) < a(k_0)
{-2}  k_1 = k_0 + 1
{-3}  k_0 < n
[-4]       0 < k_0 AND k_0 <= n AND 0 <= m_0 AND m_0 < k_0
       AND FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)
  |-------
[1]   0 <= m_0 AND m_0 < k_1

Postponing cc__loop.2.1.2.1.2.2.2.

cc__loop.2.1.2.1.2.2.3 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__branch:transition/trs1__branch__trs1__branch__trs1:transition/trs1__branch__trs1__branch__trs1__goto:transition/trs1__branch__trs1__branch__trs1__goto_check_loop_3:transition;

{-1}  a(m_0) < a(k_0)
{-2}  k_1 = k_0 + 1
{-3}  k_0 < n
[-4]       0 < k_0 AND k_0 <= n AND 0 <= m_0 AND m_0 < k_0
       AND FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)
  |-------
[1]   FORALL (i: int): 0 <= i AND i < k_1 => a(m_0) <= a(i)

Postponing cc__loop.2.1.2.1.2.2.3.

cc__loop.2.1.2.2.1 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__branch:transition/trs1__branch__trs1__branch__trs2:transition/trs1__branch__trs1__branch__stmt6:transition;

{-1}  a(m_0) >= a(k_0)
{-2}  m_1 = k_0
{-3}  k_1 = k_0 + 1
{-4}  k_0 < n
[-5]  0 < k_0 AND k_0 <= n
[-6]  0 <= m_0 AND m_0 < k_0
[-7]  FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)
  |-------
[1]   0 <= n - k_1

Postponing cc__loop.2.1.2.2.1.

cc__loop.2.1.2.2.2.1 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__branch:transition/trs1__branch__trs1__branch__trs2:transition/trs1__branch__trs1__branch__stmt7:transition;

{-1}  a(m_0) >= a(k_0)
{-2}  m_1 = k_0
{-3}  k_1 = k_0 + 1
{-4}  k_0 < n
[-5]  0 < k_0 AND k_0 <= n
[-6]  0 <= m_0 AND m_0 < k_0
[-7]  FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)
  |-------
[1]   n - k_1 < n - k_0

Postponing cc__loop.2.1.2.2.2.1.

cc__loop.2.1.2.2.2.2.1 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__branch:transition/trs1__branch__trs1__branch__trs2:transition/trs1__branch__trs1__branch__trs2__goto:transition/trs1__branch__trs1__branch__trs2__goto_check_loop_1:transition;

{-1}  a(m_0) >= a(k_0)
{-2}  m_1 = k_0
{-3}  k_1 = k_0 + 1
{-4}  k_0 < n
[-5]       0 < k_0 AND k_0 <= n AND 0 <= m_0 AND m_0 < k_0
       AND FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)
  |-------
[1]   0 < k_1 AND k_1 <= n

Postponing cc__loop.2.1.2.2.2.2.1.

cc__loop.2.1.2.2.2.2.2 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__branch:transition/trs1__branch__trs1__branch__trs2:transition/trs1__branch__trs1__branch__trs2__goto:transition/trs1__branch__trs1__branch__trs2__goto_check_loop_2:transition;

{-1}  a(m_0) >= a(k_0)
{-2}  m_1 = k_0
{-3}  k_1 = k_0 + 1
{-4}  k_0 < n
[-5]       0 < k_0 AND k_0 <= n AND 0 <= m_0 AND m_0 < k_0
       AND FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)
  |-------
[1]   0 <= m_1 AND m_1 < k_1

Postponing cc__loop.2.1.2.2.2.2.2.

cc__loop.2.1.2.2.2.2.3 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs1:transition/trs1__branch__trs1__branch:transition/trs1__branch__trs1__branch__trs2:transition/trs1__branch__trs1__branch__trs2__goto:transition/trs1__branch__trs1__branch__trs2__goto_check_loop_3:transition;

{-1}  a(m_0) >= a(k_0)
{-2}  m_1 = k_0
{-3}  k_1 = k_0 + 1
{-4}  k_0 < n
[-5]       0 < k_0 AND k_0 <= n AND 0 <= m_0 AND m_0 < k_0
       AND FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)
  |-------
[1]   FORALL (i: int): 0 <= i AND i < k_1 => a(m_1) <= a(i)

Postponing cc__loop.2.1.2.2.2.2.3.

cc__loop.2.2.1 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs2:transition/trs1__branch__trs2__goto:transition/trs1__branch__trs2__goto_check_post___1:transition;

{-1}  k_0 = n
[-2]       0 < k_0 AND k_0 <= n AND 0 <= m_0 AND m_0 < k_0
       AND FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)
  |-------
[1]   n > 0

Postponing cc__loop.2.2.1.

cc__loop.2.2.2 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs2:transition/trs1__branch__trs2__goto:transition/trs1__branch__trs2__goto_check_post___2:transition;

{-1}  k_0 = n
[-2]       0 < k_0 AND k_0 <= n AND 0 <= m_0 AND m_0 < k_0
       AND FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)
  |-------
[1]   0 <= m_0 AND m_0 < n

Postponing cc__loop.2.2.2.

cc__loop.2.2.3 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/trs1__branch:transition/trs1__branch__trs2:transition/trs1__branch__trs2__goto:transition/trs1__branch__trs2__goto_check_post___3:transition;

{-1}  k_0 = n
[-2]       0 < k_0 AND k_0 <= n AND 0 <= m_0 AND m_0 < k_0
       AND FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)
  |-------
[1]   FORALL (i: int): 0 <= i AND i < n => a(m_0) <= a(i)

Postponing cc__loop.2.2.3.

cc__loop.1 : 
;;; min:context/min:procedure/loop:situation/trs1:transition/loop__stmt1:transition;

{-1}  0 < k_0 AND k_0 <= n
{-2}  0 <= m_0 AND m_0 < k_0
{-3}  FORALL (i: int): 0 <= i AND i < k_0 => a(m_0) <= a(i)
  |-------
{1}   k_0 < n OR k_0 = n


Run time  = 0.40 secs.
Real time = 0.73 secs.

impl__min__min.cc__loop unproved in 0.40 real, 0.40 cpu seconds
Proving theory spec__min__min
Rerunning proof of spec__min__min.post___TCC1
Installing rewrite rule sets.singleton_rew (all instances)
post___TCC1 :  

  |-------
{1}   FORALL (m: int):
        (id(0 <= m AND m < n)) AND (id(n > 0)) IMPLIES
         (FORALL (i: int): 0 <= i AND i < n IMPLIES m >= 0 AND m < n)

Rerunning step: (then (skosimp-2) (uid "min:context/min:procedure;") (then (expand-nested-defs - (("pre__" 1) ("post__" 3))) (flatten-disjunct -) (check-report (skip))))
Skolemizing and flattening,
this simplifies to: 
post___TCC1 :  

{-1}  (id(0 <= m AND m < n))
{-2}  (id(n > 0))
{-3}  0 <= i
{-4}  i < n
  |-------
{1}   m >= 0 AND m < n

Adding comment: min:context/min:procedure;
this simplifies to: 
post___TCC1 : 
;;; min:context/min:procedure;

[-1]  (id(0 <= m AND m < n))
[-2]  (id(n > 0))
[-3]  0 <= i
[-4]  i < n
  |-------
[1]   m >= 0 AND m < n

-*-SOCOS-*-
(uid "min:context/min:procedure;")
-*-*-*-*-*-


nil

No change on: (socos-skip-msg (uid "min:context/min:procedure;"))
post___TCC1 : 
;;; min:context/min:procedure;

[-1]  (id(0 <= m AND m < n))
[-2]  (id(n > 0))
[-3]  0 <= i
[-4]  i < n
  |-------
[1]   m >= 0 AND m < n

Postponing post___TCC1.

post___TCC1 : 
;;; min:context/min:procedure;

[-1]  (id(0 <= m AND m < n))
[-2]  (id(n > 0))
[-3]  0 <= i
[-4]  i < n
  |-------
[1]   m >= 0 AND m < n

No change on: (expand-nested-defs - (("pre__" 1) ("post__" 3)))
post___TCC1 : 
;;; min:context/min:procedure;

[-1]  (id(0 <= m AND m < n))
[-2]  (id(n > 0))
[-3]  0 <= i
[-4]  i < n
  |-------
[1]   m >= 0 AND m < n

No change on: (flatten-disjunct -)
post___TCC1 : 
;;; min:context/min:procedure;

[-1]  (id(0 <= m AND m < n))
[-2]  (id(n > 0))
[-3]  0 <= i
[-4]  i < n
  |-------
[1]   m >= 0 AND m < n

-*-SOCOS-*-
(check-condition "min:context/min:procedure;")
-*-*-*-*-*-


nil

No change on: (socos-skip-msg (check-condition "min:context/min:procedure;"))
post___TCC1 : 
;;; min:context/min:procedure;

[-1]  (id(0 <= m AND m < n))
[-2]  (id(n > 0))
[-3]  0 <= i
[-4]  i < n
  |-------
[1]   m >= 0 AND m < n

Expanding the definition of id,
this simplifies to: 
post___TCC1 : 
;;; min:context/min:procedure;

{-1}  0 <= m AND m < n
{-2}  n > 0
[-3]  0 <= i
[-4]  i < n
  |-------
[1]   m >= 0 AND m < n

nil

post___TCC1 : 
;;; min:context/min:procedure;

{-1}  0 <= m AND m < n
{-2}  n > 0
[-3]  0 <= i
[-4]  i < n
  |-------
[1]   m >= 0 AND m < n

No suitable redexes found.
No change on: (beta)
post___TCC1 : 
;;; min:context/min:procedure;

{-1}  0 <= m AND m < n
{-2}  n > 0
[-3]  0 <= i
[-4]  i < n
  |-------
[1]   m >= 0 AND m < n

No change on: (skip)
post___TCC1 : 
;;; min:context/min:procedure;

[-1]  0 <= m AND m < n
[-2]  n > 0
[-3]  0 <= i
[-4]  i < n
  |-------
[1]   m >= 0 AND m < n


Attempted proof of post___TCC1 failed.

Attempted proof of post___TCC1 failed.
post___TCC1 : 
;;; min:context/min:procedure;

{-1}  0 <= m AND m < n
{-2}  n > 0
[-3]  0 <= i
[-4]  i < n
  |-------
[1]   m >= 0 AND m < n

-*-SOCOS-*-
(left-condition (sequent ("0 <= m AND m < n" "n > 0" "0 <= i" "i < n") ("m >= 0 AND m < n")) spec__min__min 26 4)
-*-*-*-*-*-


nil

No change on: (socos-skip-msg (left-condition (sequent ("0 <= m AND m < n" "n > 0" "0 <= i" "i < n") ("m >= 0 AND m < n")) spec__min__min 26 4))
post___TCC1 : 
;;; min:context/min:procedure;

{-1}  0 <= m AND m < n
{-2}  n > 0
[-3]  0 <= i
[-4]  i < n
  |-------
[1]   m >= 0 AND m < n

nil

post___TCC1 : 
;;; min:context/min:procedure;

{-1}  0 <= m AND m < n
{-2}  n > 0
[-3]  0 <= i
[-4]  i < n
  |-------
[1]   m >= 0 AND m < n

Postponing post___TCC1.

post___TCC1 : 
;;; min:context/min:procedure;

{-1}  0 <= m AND m < n
{-2}  n > 0
[-3]  0 <= i
[-4]  i < n
  |-------
[1]   m >= 0 AND m < n

***Warning: Fewer subproofs (0) than subgoals (1)
No change on: (skip)
post___TCC1 : 
;;; min:context/min:procedure;

{-1}  0 <= m AND m < n
{-2}  n > 0
[-3]  0 <= i
[-4]  i < n
  |-------
[1]   m >= 0 AND m < n

Postponing post___TCC1.

post___TCC1 : 
;;; min:context/min:procedure;

{-1}  0 <= m AND m < n
{-2}  n > 0
[-3]  0 <= i
[-4]  i < n
  |-------
[1]   m >= 0 AND m < n

Postponing post___TCC1.

post___TCC1 : 
;;; min:context/min:procedure;

{-1}  0 <= m AND m < n
{-2}  n > 0
[-3]  0 <= i
[-4]  i < n
  |-------
[1]   m >= 0 AND m < n


Run time  = 0.02 secs.
Real time = 0.04 secs.

spec__min__min.post___TCC1 unproved in 0.02 real, 0.02 cpu seconds
Rerunning proof of spec__min__min.post___TCC2
Installing rewrite rule sets.singleton_rew (all instances)
post___TCC2 :  

  |-------
{1}   FORALL (m: int):
        (id(0 <= m AND m < n)) AND (id(n > 0)) IMPLIES
         (FORALL (i: int): 0 <= i AND i < n IMPLIES i >= 0)

Rerunning step: (then (skosimp-2) (uid "min:context/min:procedure;") (then (expand-nested-defs - (("pre__" 1) ("post__" 3))) (flatten-disjunct -) (check-report (skip))))
Skolemizing and flattening,
this simplifies to: 
post___TCC2 :  

{-1}  (id(0 <= m AND m < n))
{-2}  (id(n > 0))
{-3}  0 <= i
{-4}  i < n
  |-------
{1}   i >= 0

Adding comment: min:context/min:procedure;
this simplifies to: 
post___TCC2 : 
;;; min:context/min:procedure;

[-1]  (id(0 <= m AND m < n))
[-2]  (id(n > 0))
[-3]  0 <= i
[-4]  i < n
  |-------
[1]   i >= 0

-*-SOCOS-*-
(uid "min:context/min:procedure;")
-*-*-*-*-*-


nil

No change on: (socos-skip-msg (uid "min:context/min:procedure;"))
post___TCC2 : 
;;; min:context/min:procedure;

[-1]  (id(0 <= m AND m < n))
[-2]  (id(n > 0))
[-3]  0 <= i
[-4]  i < n
  |-------
[1]   i >= 0

Postponing post___TCC2.

post___TCC2 : 
;;; min:context/min:procedure;

[-1]  (id(0 <= m AND m < n))
[-2]  (id(n > 0))
[-3]  0 <= i
[-4]  i < n
  |-------
[1]   i >= 0

No change on: (expand-nested-defs - (("pre__" 1) ("post__" 3)))
post___TCC2 : 
;;; min:context/min:procedure;

[-1]  (id(0 <= m AND m < n))
[-2]  (id(n > 0))
[-3]  0 <= i
[-4]  i < n
  |-------
[1]   i >= 0

No change on: (flatten-disjunct -)
post___TCC2 : 
;;; min:context/min:procedure;

[-1]  (id(0 <= m AND m < n))
[-2]  (id(n > 0))
[-3]  0 <= i
[-4]  i < n
  |-------
[1]   i >= 0

-*-SOCOS-*-
(check-condition "min:context/min:procedure;")
-*-*-*-*-*-


nil

No change on: (socos-skip-msg (check-condition "min:context/min:procedure;"))
post___TCC2 : 
;;; min:context/min:procedure;

[-1]  (id(0 <= m AND m < n))
[-2]  (id(n > 0))
[-3]  0 <= i
[-4]  i < n
  |-------
[1]   i >= 0

Expanding the definition of id,
this simplifies to: 
post___TCC2 : 
;;; min:context/min:procedure;

{-1}  0 <= m AND m < n
{-2}  n > 0
[-3]  0 <= i
[-4]  i < n
  |-------
[1]   i >= 0

nil

post___TCC2 : 
;;; min:context/min:procedure;

{-1}  0 <= m AND m < n
{-2}  n > 0
[-3]  0 <= i
[-4]  i < n
  |-------
[1]   i >= 0

No suitable redexes found.
No change on: (beta)
post___TCC2 : 
;;; min:context/min:procedure;

{-1}  0 <= m AND m < n
{-2}  n > 0
[-3]  0 <= i
[-4]  i < n
  |-------
[1]   i >= 0

No change on: (skip)
post___TCC2 : 
;;; min:context/min:procedure;

[-1]  0 <= m AND m < n
[-2]  n > 0
[-3]  0 <= i
[-4]  i < n
  |-------
[1]   i >= 0


Attempted proof of post___TCC2 failed.

Attempted proof of post___TCC2 failed.
post___TCC2 : 
;;; min:context/min:procedure;

{-1}  0 <= m AND m < n
{-2}  n > 0
[-3]  0 <= i
[-4]  i < n
  |-------
[1]   i >= 0

-*-SOCOS-*-
(left-condition (sequent ("0 <= m AND m < n" "n > 0" "0 <= i" "i < n") ("i >= 0")) spec__min__min 26 4)
-*-*-*-*-*-


nil

No change on: (socos-skip-msg (left-condition (sequent ("0 <= m AND m < n" "n > 0" "0 <= i" "i < n") ("i >= 0")) spec__min__min 26 4))
post___TCC2 : 
;;; min:context/min:procedure;

{-1}  0 <= m AND m < n
{-2}  n > 0
[-3]  0 <= i
[-4]  i < n
  |-------
[1]   i >= 0

nil

post___TCC2 : 
;;; min:context/min:procedure;

{-1}  0 <= m AND m < n
{-2}  n > 0
[-3]  0 <= i
[-4]  i < n
  |-------
[1]   i >= 0

Postponing post___TCC2.

post___TCC2 : 
;;; min:context/min:procedure;

{-1}  0 <= m AND m < n
{-2}  n > 0
[-3]  0 <= i
[-4]  i < n
  |-------
[1]   i >= 0

***Warning: Fewer subproofs (0) than subgoals (1)
No change on: (skip)
post___TCC2 : 
;;; min:context/min:procedure;

{-1}  0 <= m AND m < n
{-2}  n > 0
[-3]  0 <= i
[-4]  i < n
  |-------
[1]   i >= 0

Postponing post___TCC2.

post___TCC2 : 
;;; min:context/min:procedure;

{-1}  0 <= m AND m < n
{-2}  n > 0
[-3]  0 <= i
[-4]  i < n
  |-------
[1]   i >= 0

Postponing post___TCC2.

post___TCC2 : 
;;; min:context/min:procedure;

{-1}  0 <= m AND m < n
{-2}  n > 0
[-3]  0 <= i
[-4]  i < n
  |-------
[1]   i >= 0


Run time  = 0.03 secs.
Real time = 0.05 secs.

spec__min__min.post___TCC2 unproved in 0.03 real, 0.03 cpu seconds


 Proof summary for theory ctx__min
    Theory totals: 0 formulas, 0 attempted, 0 succeeded (0.00 s)

 Proof summary for theory impl__min__min
    sit__loop_TCC1........................unfinished          [shostak](0.05 s)
    sit__loop_TCC2........................unfinished          [shostak](0.02 s)
    cc__ini__.............................unfinished          [shostak](0.06 s)
    cc__loop_TCC1.........................unfinished          [shostak](0.03 s)
    cc__loop_TCC2.........................unfinished          [shostak](0.02 s)
    cc__loop..............................unfinished          [shostak](0.40 s)
    Theory totals: 6 formulas, 6 attempted, 0 succeeded (0.58 s)

 Proof summary for theory spec__min__min
    post___TCC1...........................unfinished          [shostak](0.02 s)
    post___TCC2...........................unfinished          [shostak](0.03 s)
    Theory totals: 2 formulas, 2 attempted, 0 succeeded (0.04 s)

Grand Totals: 8 proofs, 8 attempted, 0 succeeded (0.63 s)
Created directory /home/aton4/mparsa/Documents/min/pvsbin
Saving bin file for theory ctx__min
Saving ctx__min
Saving bin file for theory spec__min__min
Saving spec__min__min
Saving bin file for theory impl__min__min
Saving impl__min__min
Context file /home/aton4/mparsa/Documents/min/.pvscontext written
:PROOFCHECK_OK

:CHECK_FINISHED
