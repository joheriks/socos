(parray
 (permutation_rfl 0
  (permutation_rfl-1 nil 3480349935
   ("" (skolem!)
    (("" (expand permutation)
      (("" (inst 1 id)
        (("" (assert)
          (("" (skosimp*)
            (("" (expand id) (("" (propax) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((permutation const-decl "bool" parray nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (index type-eq-decl nil parray nil)
    (n formal-const-decl "nat" parray nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (permutation_sym 0
  (permutation_sym-1 nil 3480349990
   ("" (skolem 1 (a b))
    (("" (flatten)
      (("" (expand permutation)
        (("" (skolem -1 "f")
          (("" (flatten)
            (("" (case "n>0")
              (("1" (inst 1 "inverse(f)")
                (("1" (split)
                  (("1" (use "bij_inv_is_bij" (f f))
                    (("1" (assert) nil nil)
                     ("2" (inst 1 0) (("2" (assert) nil nil)) nil))
                    nil)
                   ("2" (skosimp*)
                    (("2" (inst -3 "inverse(f)(i!1)")
                      (("1" (use inverse_surjective (f f))
                        (("1" (assert) nil nil)
                         ("2" (expand bijective?)
                          (("2" (assert) nil nil)) nil)
                         ("3" (inst 1 0) nil nil))
                        nil)
                       ("2" (inst 1 0) nil nil))
                      nil))
                    nil))
                  nil)
                 ("2" (inst 1 0) (("2" (assert) nil nil)) nil))
                nil)
               ("2" (inst 2 "lambda (x:below[0]): 0")
                (("1" (expand bijective?)
                  (("1" (expand injective?)
                    (("1" (expand surjective?)
                      (("1" (split)
                        (("1" (grind) nil nil) ("2" (grind) nil nil)
                         ("3" (grind) nil nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (grind) nil nil) ("3" (grind) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((n formal-const-decl "nat" parray nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (> const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (bij_inv_is_bij formula-decl nil function_inverse nil)
    (bijective? const-decl "bool" functions nil)
    (inverse_surjective formula-decl nil function_inverse nil)
    (surjective? const-decl "bool" functions nil)
    (inverse const-decl "D" function_inverse nil)
    (< const-decl "bool" reals nil) (index type-eq-decl nil parray nil)
    (TRUE const-decl "bool" booleans nil)
    (injective? const-decl "bool" functions nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (FALSE const-decl "bool" booleans nil)
    (below type-eq-decl nil nat_types nil)
    (permutation const-decl "bool" parray nil))
   shostak))
 (permutation_trs 0
  (permutation_trs-1 nil 3480350811
   ("" (skolem 1 (a b c))
    (("" (flatten)
      (("" (expand permutation)
        (("" (skolem -1 f1)
          (("" (skolem -2 f2)
            (("" (inst 1 "f1 o f2")
              (("" (split)
                (("1"
                  (use "composition_bijective[index,index,index]"
                       ("f1" "f2" "f2" "f1"))
                  (("1" (assert) nil nil) ("2" (assert) nil nil)) nil)
                 ("2" (flatten)
                  (("2" (expand o)
                    (("2" (skolem 1 i)
                      (("2" (inst -2 "f2(i)")
                        (("2" (inst -4 i) (("2" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (n formal-const-decl "nat" parray nil)
    (index type-eq-decl nil parray nil)
    (O const-decl "T3" function_props nil)
    (composition_bijective judgement-tcc nil function_props nil)
    (bijective? const-decl "bool" functions nil)
    (permutation const-decl "bool" parray nil))
   shostak))
 (swap_acc 0
  (swap_acc-1 nil 3480355242
   ("" (expand swap)
    (("" (skosimp*)
      (("" (lift-if) (("" (lift-if) (("" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   ((swap const-decl "parray" parray nil)) shostak))
 (permutation_swap 0
  (permutation_swap-1 nil 3480355276
   ("" (skolem 1 (a i j))
    (("" (expand permutation)
      (("" (expand swap)
        ((""
          (inst 1
           "lambda (x:index): if x=i then j elsif x=j then i else x endif")
          (("" (split)
            (("1" (expand bijective?)
              (("1" (split)
                (("1" (expand injective?)
                  (("1" (skosimp*) (("1" (grind) nil nil)) nil)) nil)
                 ("2" (expand surjective?)
                  (("2" (skolem 1 y)
                    (("2" (case "y=i")
                      (("1" (inst 1 j) (("1" (grind) nil nil)) nil)
                       ("2" (case "y=j")
                        (("1" (inst 2 i) (("1" (grind) nil nil)) nil)
                         ("2" (inst 3 y) (("2" (grind) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (grind) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((permutation const-decl "bool" parray nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (n formal-const-decl "nat" parray nil)
    (index type-eq-decl nil parray nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (bijective? const-decl "bool" functions nil)
    (surjective? const-decl "bool" functions nil)
    (injective? const-decl "bool" functions nil)
    (swap const-decl "parray" parray nil))
   shostak)))

