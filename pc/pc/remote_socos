#!/usr/bin/env python
# -*- coding: latin-1 -*-
# Experimental interface to remote Socos checker

import sys
import getopt
import httplib
import urllib
import json
import os
import signal
import traceback
import readline
import rlcompleter
import threading
import time
import traceback

import init_socos
from pc.client import *


global host,strategy,options

options = ["host=","strategy=","logdir=","plain","attempts=","repeat=","max-parallel="]
strategy = "(endgame)"
host = "localhost:8081"


def short_usage():
    print "Usage: 'remote_socos [ " + "  ".join(["--%s"%x for x in options]) + " ] FILE"

def progress_str( pnow, pmax, maxlen=0 ):
    if maxlen and pmax>maxlen:
        maxlen = maxlen - 2
        pnow = pnow * maxlen / pmax
        pmax = maxlen
    return "[" + "#"*pnow + "."*(pmax-pnow) + "]"


class CheckerThread( threading.Thread ):

    def __init__( self, fname, printer, attempts ):
        threading.Thread.__init__(self)
        self.fname = fname
        self.printer = printer
        self.attempts = attempts
        self.session = None
        self.elapsed = 0.0
        self.error = False

    def run( self ):
        f = open(self.fname)
        data = f.read()
        f.close()
        try:
            self.session = CheckerSession(url=host)
            self.session.get_session_id(attempts=self.attempts)
            for msg in self.session.check(data,strategy):
                self.printer.print_thread_message(self,msg)
                if msg.get("type",None)=="ERROR":
                    self.error=True
        except CheckerException,e:
            self.printer.print_thread_exception(self,e)
            self.error=True

    def kill( self ):
        if self.session and self.session.sid:
            session2 = CheckerSession(url=host,sid=self.session.sid)
            for msg in session2.kill():
                self.printer.print_thread_message(self,msg)            



class Printer:

    def __init__( self ):
        self.t0 = time.time()
        
    def __enter__( self ):
        self.setup()
        return self

    def __exit__( self, type, value, traceback ):
        self.teardown()

    def setup( self ):
        pass

    def teardown( self ):
        pass

    def update( self ):
        pass

    def print_message( self, msg ):
        pass

    def print_thread_message( self, thread, msg ):
        pass
    
    def print_thread_exception( self, thread, exc ):
        pass



class MultiplexPrinter( Printer ):

    def __init__( self, printers ):
        Printer.__init__(self)
        self.printers = printers

    def setup( self ):
        for prn in self.printers:
            prn.setup()

    def teardown( self ):
        for prn in self.printers:
            prn.teardown()

    def update( self ):
        for prn in self.printers:
            prn.update()

    def print_message( self, msg ):
        for prn in self.printer:
            prn.print_message(msg)
                              
    def print_thread_message( self, thread, msg ):
        for prn in self.printers:
            prn.print_thread_message(thread,msg)
        
    def print_thread_exception( self, thread, exc ):
        for prn in self.printers:
            prn.print_thread_exception(thread,exc)


class Logger( Printer ):

    def __init__( self, logpath ):
        Printer.__init__( self )
        self.logpath = logpath
        
    def setup( self ):
        self.files = {}
        if not os.path.exists(self.logpath):
            os.mkdir(self.logpath)

    def teardown( self ):
        for t,f in self.files.items():
            f.close()

    def _create_log_file( self, thread ):
        fname = os.path.basename(thread.fname)
        fpath = os.path.join(self.logpath,fname+".log")
        t = 0
        while os.path.exists(fpath):
            t += 1
            fpath = os.path.join(self.logpath,fname+".log.%d"%t)
        self.files[thread] = open(fpath,"w")
        
        
    def print_thread_message( self, thread, msg ):
        if not thread in self.files:
            self._create_log_file(thread)
        self.files[thread].write(repr(msg)+"\n")

    def print_thread_exception( self, thread, exc ):
        if not thread in self.files:
            self._create_log_file(thread)
        self.files[thread].write(exc.message+"\n")



class ConsolePrinter( Printer ):

    def setup( self ):
        print "MESSAGE LOG"
        print "="*78
        return self

    def teardown( self ):
        print "="*78
        print "%.3fs"%(time.time()-self.t0)
        
    def print_message( self, msg ):
        print msg
        
    def print_thread_message( self, thread, msg ):
        print thread.fname+":",
        if "type" in msg and msg["type"]=="PROGRESS":
            print "[" + progress_str(int(msg["pnow"]),int(msg["pmax"])) + "]"
        else:
            print "%s"%json.dumps(msg)

    def print_thread_exception( self, thread, exc ):
        print "%s: %s"%(thread.fname,exc.message)
        


class CursesPrinter( Printer ):

    def __init__( self ):
        Printer.__init__(self)
        self.lock = threading.Lock()
        self.msg = None
        
    def setup( self ):
        self.threads = []
        self.progress = {}
        self.status = {}
        self.error = {}
        self.stdscr = curses.initscr()
        self.pad = curses.newpad(10,80)
        curses.noecho()
        curses.cbreak()

    def teardown( self ):
        self.pad.addstr(0,0,"Press any key to exit...",curses.A_REVERSE)
        self.pad.clrtoeol()
        #self.pad.refresh(0,0,0,0,0,self.stdscr.getmaxyx()[1]-1)
        self.pad.refresh(0,0,0,0,self.stdscr.getmaxyx()[0]-1,self.stdscr.getmaxyx()[1]-1)
        while True:
            x = self.pad.getch()
            if x<256: break
        curses.echo()
        curses.nocbreak()
        curses.endwin()


    def update( self ):
        self.lock.acquire()
        self.threads.sort(cmp = lambda x,y: -1 if x.isAlive() and not y.isAlive() else 0)
        fmt = "%5.5s   %-20.20s   %-32.32s   %1.1s   %s"
        strings = []
        for thread in self.threads:
            sid = str(thread.session.sid) if thread.session.sid is not None else "?"
            fn = os.path.basename(thread.fname)
            if self.error[thread]:
                pr = self.error[thread]
            elif self.progress[thread]:
                pnow,pmax = self.progress[thread]
                pr = progress_str(pnow,pmax,32)
            else:
                pr = ""
            if self.status[thread]: st = self.status[thread][0].upper()
            else: st = "\|/-"[int(thread.elapsed*10)%4]
            tm = "%.2fs"%thread.elapsed 
            strings.append(fmt%(sid,fn,pr,st,tm))
        self.pad.resize(len(strings)+3,80)
        self.pad.addstr(0,0,fmt%("S#","FILE","PROGRESS","S","TIME   "),curses.A_REVERSE)
        r = 1
        for s in strings:
            self.pad.addstr(r,0,s)
            r += 1
        if self.msg:
            self.pad.addstr(len(strings)+1,0,self.msg,curses.A_REVERSE)

        self.pad.refresh(0,0,0,0,self.stdscr.getmaxyx()[0]-1,self.stdscr.getmaxyx()[1]-1)
        self.lock.release()


    def _new_thread( self, thread ):
        self.threads.append(thread)
        self.status[thread] = None
        self.progress[thread] = None
        self.error[thread] = None
                           
        
    def print_message( self, msg ):
        self.lock.acquire()
        self.msg = msg
        self.lock.release()
        
        
    def print_thread_message( self, thread, msg ):
        self.lock.acquire()
        if thread not in self.threads:
            self._new_thread(thread)
        msgtype = msg.get("type",None)
        if msgtype=="PROGRESS":
            pnow,pmax = int(msg["pnow"]),int(msg["pmax"])
            self.progress[thread] = (pnow,pmax)
        elif msgtype=="SUMMARY":
            self.status[thread] = msg["status"]
        elif msgtype=="ERROR":
            self.status[thread] = "ERROR"
        self.lock.release()


    def print_thread_exception( self, thread, exc ):
        self.lock.acquire()
        if thread not in self.threads:
            self._new_thread(thread)
        self.error[thread] = exc.message
        self.lock.release()



def check_parallel( files, prn, attempts, max_parallel=None ):
    max_parallel = max_parallel if max_parallel else len(files)
    pending = [CheckerThread(x, prn, attempts) for x in files]
    running = []
    completed = []
    brk = []

    def sighandler( sign, handler ):
        brk.append(True)

    signal.signal(signal.SIGINT,sighandler)

    while pending or running:
        if brk:
            for t in running:
                t.kill()
            prn.update()
            break
        else:
            while len(running)<max_parallel and pending:
                t = pending.pop(0)
                running.append(t)
                t.start()
                t.t0 = time.time()

        i = 0
        while i<len(running):
            t = running[i]
            if t.isAlive():
                t.elapsed = time.time()-t.t0
                i += 1
            else:
                del running[i]
                completed.append(t)
                
        prn.update()
        time.sleep(0.1)

    signal.signal(signal.SIGINT,signal.SIG_DFL)

    if any([t.error for t in completed]) or pending or running:
        raise Exception("checking failed")

if __name__=="__main__":

    readline.parse_and_bind("tab: complete")

    files = []
    logdir = None
    attempts=1
    repeat=1
    max_parallel = None

    curse = False
    try:
        import curses
        curse = True
    except ImportError:
        prn = ConsolePrinter()

    try:
        opts,files = getopt.getopt(sys.argv[1:],"",options)
                                   
        for o,a in opts:
            if o == "--plain": curse = False
            if o == "--host": host = a
            if o == "--strategy": strategy = a
            if o == "--logdir": logdir = a
            if o == "--attempts": attempts = int(a)
            if o == "--repeat": repeat = int(a)
            if o == "--max-parallel": max_parallel = int(a)
    except getopt.GetoptError,e:
        short_usage()
        sys.exit(1)

    files=files*repeat

    prn = CursesPrinter() if curse else ConsolePrinter()
    if logdir:
        prn = MultiplexPrinter([prn,Logger(logdir)])

    exitcode = 0
    if files:
        with prn:
            try:
                check_parallel(files, prn, attempts, max_parallel)
            except Exception,e:
                prn.print_message(str(e))
                prn.update()
                exitcode = 1
                
    sys.exit(exitcode)

#    while True and not files:
#        try:
#            eval(str(raw_input("remote_socos> ")))
#            if sys.stdin.closed: break
#        except Exception,e:
#            if isinstance(e,EOFError):
#                print
#                break
#            else:
#                traceback.print_exc(file=sys.stdout)
