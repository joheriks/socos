(Tree)
(List2Tree
 (list_of_tree_TCC1 0
  (list_of_tree_TCC1-1 nil 3571482437 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(well_founded?[Tree])" Tree_adt nil)) nil))
 (list_of_tree_TCC2 0
  (list_of_tree_TCC2-1 nil 3571482437 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(well_founded?[Tree])" Tree_adt nil)) nil))
 (null_append 0
  (null_append-1 nil 3571731170
   ("" (induct s) (("1" (grind) nil nil) ("2" (grind) nil nil)) nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (append def-decl "list[T]" list_props nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil))
   shostak))
 (add2list_null 0
  (add2list_null-1 nil 3571731324 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (map adt-def-decl "list[T1]" list_adt_map nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (add2list const-decl "list[nat]" List2Tree nil))
   shostak))
 (length_list_of_tree 0
  (length_list_of_tree-1 nil 3571482948
   ("" (induct t)
    (("1" (grind) nil nil)
     ("2" (grind)
      (("2" (rewrite map_length)
        (("2" (grind)
          (("2" (rewrite length_append) (("2" (grind) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((add2list const-decl "list[nat]" List2Tree nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (length_append formula-decl nil list_props nil)
    (map_length formula-decl nil more_map_props nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (append def-decl "list[T]" list_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (Tree_induction formula-decl nil Tree_adt nil)
    (list_of_tree def-decl "list[nat]" List2Tree nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil) (> const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Tree type-decl nil Tree_adt nil))
   shostak))
 (list_of_tree_not_null 0
  (list_of_tree_not_null-1 nil 3571506963
   ("" (induct t) (("1" (grind) nil nil) ("2" (grind) nil nil)) nil)
   ((add2list const-decl "list[nat]" List2Tree nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (map adt-def-decl "list[T1]" list_adt_map nil)
    (append def-decl "list[T]" list_props nil)
    (Tree_induction formula-decl nil Tree_adt nil)
    (list_of_tree def-decl "list[nat]" List2Tree nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Tree type-decl nil Tree_adt nil))
   shostak))
 (list_of_tree_not_null2 0
  (list_of_tree_not_null2-1 nil 3571506984
   ("" (induct t) (("1" (grind) nil nil) ("2" (grind) nil nil)) nil)
   ((add2list const-decl "list[nat]" List2Tree nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (map adt-def-decl "list[T1]" list_adt_map nil)
    (append def-decl "list[T]" list_props nil)
    (Tree_induction formula-decl nil Tree_adt nil)
    (FALSE const-decl "bool" booleans nil)
    (list_of_tree def-decl "list[nat]" List2Tree nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Tree type-decl nil Tree_adt nil))
   shostak))
 (list_of_tree_not_null3 0
  (list_of_tree_not_null3-1 nil 3571731416
   ("" (grind)
    (("" (use list_of_tree_not_null2) (("" (grind) nil nil)) nil)) nil)
   ((list_of_tree_not_null2 formula-decl nil List2Tree nil)
    (Tree type-decl nil Tree_adt nil))
   shostak))
 (add2list_append 0
  (add2list_append-1 nil 3571506842
   ("" (induct s)
    (("1" (grind) nil nil)
     ("2" (auto-rewrite add2list) (("2" (grind) nil nil)) nil))
    nil)
   ((NOT const-decl "[bool -> bool]" booleans nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (map adt-def-decl "list[T1]" list_adt_map nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (append def-decl "list[T]" list_props nil)
    (add2list const-decl "list[nat]" List2Tree nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil))
   shostak))
 (add2list_add2list 0
  (add2list_add2list-1 nil 3571506894
   ("" (induct s)
    (("1" (grind) nil nil)
     ("2" (auto-rewrite add2list) (("2" (grind) nil nil)) nil))
    nil)
   ((NOT const-decl "[bool -> bool]" booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (map adt-def-decl "list[T1]" list_adt_map nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (add2list const-decl "list[nat]" List2Tree nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   shostak))
 (first_list_of_tree_TCC1 0
  (first_list_of_tree_TCC1-1 nil 3571503477 ("" (subtype-tcc) nil nil)
   ((list_of_tree_not_null formula-decl nil List2Tree nil)) nil))
 (first_list_of_tree_TCC2 0
  (first_list_of_tree_TCC2-1 nil 3571503890 ("" (subtype-tcc) nil nil)
   ((list_of_tree_not_null formula-decl nil List2Tree nil)) nil))
 (first_list_of_tree 0
  (first_list_of_tree-1 nil 3571503479
   ("" (induct t)
    (("1" (grind) nil nil)
     ("2" (skosimp*)
      (("2" (expand list_of_tree 1 (1))
        (("2" (expand append 1 (1)) (("2" (grind) nil nil)) nil)) nil))
      nil))
    nil)
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (append def-decl "list[T]" list_props nil)
    (map adt-def-decl "list[T1]" list_adt_map nil)
    (add2list const-decl "list[nat]" List2Tree nil)
    (Tree_induction formula-decl nil Tree_adt nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (node adt-constructor-decl "[[Tree, Tree] -> (Node?)]" Tree_adt
     nil)
    (Node? adt-recognizer-decl "[Tree -> boolean]" Tree_adt nil)
    (list_of_tree def-decl "list[nat]" List2Tree nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Tree type-decl nil Tree_adt nil)
    (list_of_tree_not_null formula-decl nil List2Tree nil))
   shostak))
 (list_of_tree_inj 0
  (list_of_tree_inj-1 nil 3571482439
   ("" (induct t)
    (("1" (skosimp*)
      (("1" (expand add2list)
        (("1" (case "r!1 = leaf")
          (("1" (grind)
            (("1" (case "cdr(cons(n!1, s!1)) = cdr(cons(n!1, l!1))")
              (("1" (assert) nil nil)
               ("2" (replace -2) (("2" (propax) nil nil)) nil))
              nil))
            nil)
           ("2" (hide 2)
            (("2"
              (case "car(append(map[nat, nat](LAMBDA i: i + n!1)(list_of_tree(leaf)), s!1)) = car(
       append(map[nat, nat](LAMBDA i: i + n!1)(list_of_tree(r!1)), l!1))")
              (("1" (hide -2)
                (("1" (expand map)
                  (("1" (grind)
                    (("1" (expand append) (("1" (grind) nil nil)) nil)
                     ("2" (expand append) (("2" (grind) nil nil)) nil))
                    nil))
                  nil))
                nil)
               ("2" (replace -1) (("2" (propax) nil nil)) nil)
               ("3" (grind) nil nil) ("4" (grind) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (skosimp*)
      (("2" (case "r!1 = leaf")
        (("1" (replace -1)
          (("1" (hide 1)
            (("1" (hide -1 -2 -3)
              (("1" (expand add2list)
                (("1"
                  (case "car( append(map[nat, nat]
                 (LAMBDA i: i + n!1)
                 (list_of_tree(node(node1_var!1, node2_var!1))),
             s!1))
       = car(append(map[nat, nat](LAMBDA i: i + n!1)(list_of_tree(leaf)), l!1))")
                  (("1" (hide -2)
                    (("1" (expand map)
                      (("1" (grind)
                        (("1" (expand append) (("1" (grind) nil nil))
                          nil)
                         ("2" (expand append) (("2" (grind) nil nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (replace -1) (("2" (propax) nil nil)) nil)
                   ("3" (grind) nil nil) ("4" (grind) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (expand list_of_tree -3)
          (("2" (assert)
            (("2" (auto-rewrite add2list_append add2list_add2list)
              (("2" (assert)
                (("2" (auto-rewrite append_assoc)
                  (("2" (assert)
                    (("2" (inst? -1)
                      (("2" (assert)
                        (("2" (hide -3)
                          (("2" (skosimp*)
                            (("2" (replace -1)
                              (("2"
                                (hide -1)
                                (("2"
                                  (inst? -2)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (skosimp*)
                                      (("2"
                                        (replace -2)
                                        (("2"
                                          (grind)
                                          (("2"
                                            (rewrite Tree_node_eta)
                                            nil
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((l adt-accessor-decl "[(Node?) -> Tree]" Tree_adt nil)
    (r adt-accessor-decl "[(Node?) -> Tree]" Tree_adt nil)
    (Tree_node_eta formula-decl nil Tree_adt nil)
    (append_assoc formula-decl nil list_props nil)
    (add2list_add2list formula-decl nil List2Tree nil)
    (add2list_append formula-decl nil List2Tree nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (node adt-constructor-decl "[[Tree, Tree] -> (Node?)]" Tree_adt
     nil)
    (Node? adt-recognizer-decl "[Tree -> boolean]" Tree_adt nil)
    (Leaf? adt-recognizer-decl "[Tree -> boolean]" Tree_adt nil)
    (leaf adt-constructor-decl "(Leaf?)" Tree_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (map adt-def-decl "list[T1]" list_adt_map nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (list_of_tree_not_null2 formula-decl nil List2Tree nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (Tree_induction formula-decl nil Tree_adt nil)
    (list_of_tree def-decl "list[nat]" List2Tree nil)
    (add2list const-decl "list[nat]" List2Tree nil)
    (append def-decl "list[T]" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Tree type-decl nil Tree_adt nil))
   shostak))
 (tr1 0
  (tr1-1 nil 3571731604
   ("" (skosimp*)
    (("" (assert) (("" (replace -1) (("" (assert) nil nil)) nil)) nil))
    nil)
   ((null_append formula-decl nil List2Tree nil)
    (add2list_null formula-decl nil List2Tree nil)
    (list_of_tree_not_null3 formula-decl nil List2Tree nil))
   shostak)))

